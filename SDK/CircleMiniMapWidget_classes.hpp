#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CircleMiniMapWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CircleMiniMapWidget.CircleMiniMapWidget_C
// 0x0050 (0x0290 - 0x0240)
class UCircleMiniMapWidget_C final : public UUserWidget
{
public:
	class UWidgetAnimation*                       CountdownWarning;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBlueZoneGpsWidget_Circle_C*            BlueZoneGpsWidget_Circle;                          // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             BluezoneTime;                                      // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             GridText;                                          // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 icon_n;                                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UMapGridWidget_C*                       MapGridWidget;                                     // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class URetainerBox*                           RetainerBox_0;                                     // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	struct FVector2D                              ViewSize;                                          // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ATslCharacter*                          Character;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Radius;                                            // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnPrepass_0(class UWidget* BoundWidget);
	void On_Arrow_Prepass_0(class UWidget* BoundWidget);
	void OnPrepass_1(class UWidget* BoundWidget);
	void On_BluezoneTime_Prepass_0(class UWidget* BoundWidget);
	void GetNextPlayzoneDirection(float* Direction);
	void On_TimeBorder_Prepass_0(class UWidget* BoundWidget);
	void On_GridText_Prepass_0(class UWidget* BoundWidget);
	void On_TimeBorder_Prepass_1(class UWidget* BoundWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CircleMiniMapWidget_C">();
	}
	static class UCircleMiniMapWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCircleMiniMapWidget_C>();
	}
};
static_assert(alignof(UCircleMiniMapWidget_C) == 0x000008, "Wrong alignment on UCircleMiniMapWidget_C");
static_assert(sizeof(UCircleMiniMapWidget_C) == 0x000290, "Wrong size on UCircleMiniMapWidget_C");
static_assert(offsetof(UCircleMiniMapWidget_C, CountdownWarning) == 0x000240, "Member 'UCircleMiniMapWidget_C::CountdownWarning' has a wrong offset!");
static_assert(offsetof(UCircleMiniMapWidget_C, BlueZoneGpsWidget_Circle) == 0x000248, "Member 'UCircleMiniMapWidget_C::BlueZoneGpsWidget_Circle' has a wrong offset!");
static_assert(offsetof(UCircleMiniMapWidget_C, BluezoneTime) == 0x000250, "Member 'UCircleMiniMapWidget_C::BluezoneTime' has a wrong offset!");
static_assert(offsetof(UCircleMiniMapWidget_C, GridText) == 0x000258, "Member 'UCircleMiniMapWidget_C::GridText' has a wrong offset!");
static_assert(offsetof(UCircleMiniMapWidget_C, icon_n) == 0x000260, "Member 'UCircleMiniMapWidget_C::icon_n' has a wrong offset!");
static_assert(offsetof(UCircleMiniMapWidget_C, MapGridWidget) == 0x000268, "Member 'UCircleMiniMapWidget_C::MapGridWidget' has a wrong offset!");
static_assert(offsetof(UCircleMiniMapWidget_C, RetainerBox_0) == 0x000270, "Member 'UCircleMiniMapWidget_C::RetainerBox_0' has a wrong offset!");
static_assert(offsetof(UCircleMiniMapWidget_C, ViewSize) == 0x000278, "Member 'UCircleMiniMapWidget_C::ViewSize' has a wrong offset!");
static_assert(offsetof(UCircleMiniMapWidget_C, Character) == 0x000280, "Member 'UCircleMiniMapWidget_C::Character' has a wrong offset!");
static_assert(offsetof(UCircleMiniMapWidget_C, Radius) == 0x000288, "Member 'UCircleMiniMapWidget_C::Radius' has a wrong offset!");

}

