#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponEquipmentWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "InventoryBaseWidget_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WeaponEquipmentWidget.WeaponEquipmentWidget_C
// 0x0090 (0x0308 - 0x0278)
class UWeaponEquipmentWidget_C final : public UInventoryBaseWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WeaponEquipmentWidget_C;            // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                FocusColorBG;                                      // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponEquipmentSlotWidget_C*           Weapon_01;                                         // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponEquipmentSlotWidget_C*           Weapon_02;                                         // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponEquipmentSlotWidget_C*           Weapon_03;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponEquipmentSlotWidget_C*           Weapon_04;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponEquipmentSlotWidget_C*           Weapon_05;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class FText                                   TitleText;                                         // 0x02B0(0x0018)(Edit, BlueprintVisible)
	int32                                         SelectedTabIndex;                                  // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeaponProcessor*                       WeaponProcessor;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UWeaponEquipmentSlotWidget_C*>   WeaponSlotList;                                    // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          Equipment;                                         // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTslItemDragDropOperation_C*            TslItemDragDropOperation;                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         FocusIndex;                                        // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWantFocus;                                        // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelfPuFocusIndex;                                  // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WeaponEquipmentWidget(int32 EntryPoint);
	void OnWidgetMoveDown();
	void OnWidgetMoveUp();
	void BndEvt__Weapon_05_K2Node_ComponentBoundEvent_123_RefreshFocus__DelegateSignature();
	void BndEvt__Weapon_04_K2Node_ComponentBoundEvent_106_RefreshFocus__DelegateSignature();
	void BndEvt__Weapon_03_K2Node_ComponentBoundEvent_90_RefreshFocus__DelegateSignature();
	void BndEvt__Weapon_02_K2Node_ComponentBoundEvent_75_RefreshFocus__DelegateSignature();
	void BndEvt__Weapon_01_K2Node_ComponentBoundEvent_19_RefreshFocus__DelegateSignature();
	void SetInventoryWidget(class UInventoryWidget_C* Inventory);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void Construct();
	void GetWeaponItemByTabIndex(int32 Index_0, class UWeaponItem** WeaponItem);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void InitializeWeaponEquipment();
	void MainPrepass(class UWidget* BoundWidget);
	void GetEquipment(class AEquipment** Equipment_0);
	void OnChildSlotRefreshFocus();
	void StartSelfAttachmentPut(bool* bResult);
	void StopSelftattachmentPut();
	void PutAttachment();
	void SelfUpAttachmentIndexUp();
	bool Up();
	bool SetFocus(bool NewFocus);
	bool Right();
	bool Left();
	bool InputY();
	bool InputX();
	bool InputRT();
	bool InputRB();
	bool InputLT();
	bool InputLB();
	bool InputB();
	bool InputA();
	bool Down();

	void GetFocusableLeftChildIdnex(int32* Index_0) const;
	void GetFocusableRightChildIndex(int32* Index_0) const;
	void GetFocusableUpChildIndex(int32* Index_0) const;
	void GetFocusableDownChildIndex(int32* Index_0) const;
	void FindFirtFocusableWidgetIndex(int32* Index_0) const;
	bool IsFocus() const;
	class UUserWidget* GetUpWidget() const;
	class UUserWidget* GetRightWidget() const;
	class UUserWidget* GetLeftWidget() const;
	class UUserWidget* GetFocusingChildWidget() const;
	class UUserWidget* GetDownWidget() const;
	bool IsFocusable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WeaponEquipmentWidget_C">();
	}
	static class UWeaponEquipmentWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponEquipmentWidget_C>();
	}
};
static_assert(alignof(UWeaponEquipmentWidget_C) == 0x000008, "Wrong alignment on UWeaponEquipmentWidget_C");
static_assert(sizeof(UWeaponEquipmentWidget_C) == 0x000308, "Wrong size on UWeaponEquipmentWidget_C");
static_assert(offsetof(UWeaponEquipmentWidget_C, UberGraphFrame_WeaponEquipmentWidget_C) == 0x000278, "Member 'UWeaponEquipmentWidget_C::UberGraphFrame_WeaponEquipmentWidget_C' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, FocusColorBG) == 0x000280, "Member 'UWeaponEquipmentWidget_C::FocusColorBG' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, Weapon_01) == 0x000288, "Member 'UWeaponEquipmentWidget_C::Weapon_01' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, Weapon_02) == 0x000290, "Member 'UWeaponEquipmentWidget_C::Weapon_02' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, Weapon_03) == 0x000298, "Member 'UWeaponEquipmentWidget_C::Weapon_03' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, Weapon_04) == 0x0002A0, "Member 'UWeaponEquipmentWidget_C::Weapon_04' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, Weapon_05) == 0x0002A8, "Member 'UWeaponEquipmentWidget_C::Weapon_05' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, TitleText) == 0x0002B0, "Member 'UWeaponEquipmentWidget_C::TitleText' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, SelectedTabIndex) == 0x0002C8, "Member 'UWeaponEquipmentWidget_C::SelectedTabIndex' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, WeaponProcessor) == 0x0002D0, "Member 'UWeaponEquipmentWidget_C::WeaponProcessor' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, WeaponSlotList) == 0x0002D8, "Member 'UWeaponEquipmentWidget_C::WeaponSlotList' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, Equipment) == 0x0002E8, "Member 'UWeaponEquipmentWidget_C::Equipment' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, TslItemDragDropOperation) == 0x0002F0, "Member 'UWeaponEquipmentWidget_C::TslItemDragDropOperation' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, FocusIndex) == 0x0002F8, "Member 'UWeaponEquipmentWidget_C::FocusIndex' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, bWantFocus) == 0x0002FC, "Member 'UWeaponEquipmentWidget_C::bWantFocus' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentWidget_C, SelfPuFocusIndex) == 0x000300, "Member 'UWeaponEquipmentWidget_C::SelfPuFocusIndex' has a wrong offset!");

}

