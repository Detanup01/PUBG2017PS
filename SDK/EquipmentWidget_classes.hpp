#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EquipmentWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InventoryBaseWidget_classes.hpp"
#include "TslGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass EquipmentWidget.EquipmentWidget_C
// 0x0100 (0x0378 - 0x0278)
class UEquipmentWidget_C final : public UInventoryBaseWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_EquipmentWidget_C;                  // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       CapacityOver;                                      // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       CharacterFadeIn;                                   // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBigEquipmentSlotWidget_C*              Backpack;                                          // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBigEquipmentSlotWidget_C*              Belt;                                              // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCanvasPanel*                           CanvasPanel_1;                                     // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                CharacterLayer;                                    // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 CharacterSceneCapturedImage;                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USmallEquipmentSlotWidget_C*            Eyes;                                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USmallEquipmentSlotWidget_C*            Feet;                                              // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USmallEquipmentSlotWidget_C*            Hands;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBigEquipmentSlotWidget_C*              Head;                                              // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USmallEquipmentSlotWidget_C*            Leg;                                               // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USmallEquipmentSlotWidget_C*            Mask;                                              // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USmallEquipmentSlotWidget_C*            Outer_0;                                           // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USmallEquipmentSlotWidget_C*            Torso;                                             // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBigEquipmentSlotWidget_C*              TorsoArmor;                                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 WeightImage;                                       // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	TArray<class UInventorySlotBaseWidget_C*>     EquipSlotList;                                     // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class AInventory*                             Inventory;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               WeightMaterial;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ACharacterStudio*                       CharacterStudio;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMouseDown;                                        // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bRollBackMosueIVsibility;                          // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_332[0x2];                                      // 0x0332(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MouseDownPosition;                                 // 0x0334(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMouseOn;                                          // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WeightTooltipText;                                 // 0x0340(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DisplayingAlphaEnd;                                // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTslItemDragDropOperation_C*            TslItemDragDropOperation;                          // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWantFocus;                                        // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            FocusWidget;                                       // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_EquipmentWidget(int32 EntryPoint);
	void OnSlotMoveRight();
	void SlotMoveLeft();
	void OnSlotMoveDown();
	void OnSlotMoveUp();
	void BndEvt__Feet_K2Node_ComponentBoundEvent_65_RefreshFocus__DelegateSignature();
	void BndEvt__Leg_K2Node_ComponentBoundEvent_54_RefreshFocus__DelegateSignature();
	void BndEvt__Hands_K2Node_ComponentBoundEvent_44_RefreshFocus__DelegateSignature();
	void BndEvt__Outer_K2Node_ComponentBoundEvent_35_RefreshFocus__DelegateSignature();
	void BndEvt__Torso_K2Node_ComponentBoundEvent_27_RefreshFocus__DelegateSignature();
	void BndEvt__Mask_K2Node_ComponentBoundEvent_20_RefreshFocus__DelegateSignature();
	void BndEvt__Eyes_K2Node_ComponentBoundEvent_14_RefreshFocus__DelegateSignature();
	void BndEvt__Belt_K2Node_ComponentBoundEvent_9_RefreshFocus__DelegateSignature();
	void BndEvt__TorsoArmor_K2Node_ComponentBoundEvent_5_RefreshFocus__DelegateSignature();
	void BndEvt__Backpack_K2Node_ComponentBoundEvent_2_RefreshFocus__DelegateSignature();
	void BndEvt__Head_K2Node_ComponentBoundEvent_0_RefreshFocus__DelegateSignature();
	void Custom_Event_1();
	void Custom_Event_0();
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnAddYaw(float Scale);
	void OnLookUp(float Scale);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnSpawnActorInSceneCaptureWorld(class AActor* SpawnedActor);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Destruct();
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void Construct();
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FSlateBrush GetCharacterView();
	void OnItemDragEnter(class UItem* Item);
	void OnItemDragLeave();
	void MainPrepass(class UWidget* BoundWidget);
	void UpdateCharacter(class UWidget* BoundWidget);
	void InitializeEquipWidget();
	void UpdateWeight(class UWidget* BoundWidget);
	void OnPrepass_0(class UWidget* BoundWidget);
	void On_CharacterLayer_Prepass_0(class UWidget* BoundWidget);
	struct FSlateBrush Get_CharacterSceneCapturedImage_Brush_0();
	void OnChildSlotRefresh();
	bool Up();
	bool SetFocus(bool NewFocus);
	bool Right();
	bool Left();
	bool InputY();
	bool InputX();
	bool InputRT();
	bool InputRB();
	bool InputLT();
	bool InputLB();
	bool InputB();
	bool InputA();
	bool Down();

	void GetChildLeftWidget(class UUserWidget** NewParam) const;
	void GetRealChildLeftWidget(class UUserWidget** LeftWidget) const;
	void GetRealChildRightWidget(class UUserWidget** RightWidget) const;
	void GetRealChildUpWidget(class UUserWidget** UpWidget) const;
	void GetRealChildDownWidget(class UUserWidget** DownWidget) const;
	void FindFirstFocusableChildWidget(class UUserWidget** NewParam) const;
	bool IsFocus() const;
	class UUserWidget* GetUpWidget() const;
	class UUserWidget* GetRightWidget() const;
	class UUserWidget* GetLeftWidget() const;
	class UUserWidget* GetFocusingChildWidget() const;
	class UUserWidget* GetDownWidget() const;
	bool IsFocusable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EquipmentWidget_C">();
	}
	static class UEquipmentWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEquipmentWidget_C>();
	}
};
static_assert(alignof(UEquipmentWidget_C) == 0x000008, "Wrong alignment on UEquipmentWidget_C");
static_assert(sizeof(UEquipmentWidget_C) == 0x000378, "Wrong size on UEquipmentWidget_C");
static_assert(offsetof(UEquipmentWidget_C, UberGraphFrame_EquipmentWidget_C) == 0x000278, "Member 'UEquipmentWidget_C::UberGraphFrame_EquipmentWidget_C' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, CapacityOver) == 0x000280, "Member 'UEquipmentWidget_C::CapacityOver' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, CharacterFadeIn) == 0x000288, "Member 'UEquipmentWidget_C::CharacterFadeIn' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Backpack) == 0x000290, "Member 'UEquipmentWidget_C::Backpack' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Belt) == 0x000298, "Member 'UEquipmentWidget_C::Belt' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, CanvasPanel_1) == 0x0002A0, "Member 'UEquipmentWidget_C::CanvasPanel_1' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, CharacterLayer) == 0x0002A8, "Member 'UEquipmentWidget_C::CharacterLayer' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, CharacterSceneCapturedImage) == 0x0002B0, "Member 'UEquipmentWidget_C::CharacterSceneCapturedImage' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Eyes) == 0x0002B8, "Member 'UEquipmentWidget_C::Eyes' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Feet) == 0x0002C0, "Member 'UEquipmentWidget_C::Feet' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Hands) == 0x0002C8, "Member 'UEquipmentWidget_C::Hands' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Head) == 0x0002D0, "Member 'UEquipmentWidget_C::Head' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Leg) == 0x0002D8, "Member 'UEquipmentWidget_C::Leg' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Mask) == 0x0002E0, "Member 'UEquipmentWidget_C::Mask' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Outer_0) == 0x0002E8, "Member 'UEquipmentWidget_C::Outer_0' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Torso) == 0x0002F0, "Member 'UEquipmentWidget_C::Torso' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, TorsoArmor) == 0x0002F8, "Member 'UEquipmentWidget_C::TorsoArmor' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, WeightImage) == 0x000300, "Member 'UEquipmentWidget_C::WeightImage' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, EquipSlotList) == 0x000308, "Member 'UEquipmentWidget_C::EquipSlotList' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, Inventory) == 0x000318, "Member 'UEquipmentWidget_C::Inventory' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, WeightMaterial) == 0x000320, "Member 'UEquipmentWidget_C::WeightMaterial' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, CharacterStudio) == 0x000328, "Member 'UEquipmentWidget_C::CharacterStudio' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, bMouseDown) == 0x000330, "Member 'UEquipmentWidget_C::bMouseDown' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, bRollBackMosueIVsibility) == 0x000331, "Member 'UEquipmentWidget_C::bRollBackMosueIVsibility' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, MouseDownPosition) == 0x000334, "Member 'UEquipmentWidget_C::MouseDownPosition' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, bMouseOn) == 0x00033C, "Member 'UEquipmentWidget_C::bMouseOn' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, WeightTooltipText) == 0x000340, "Member 'UEquipmentWidget_C::WeightTooltipText' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, DisplayingAlphaEnd) == 0x000358, "Member 'UEquipmentWidget_C::DisplayingAlphaEnd' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, TslItemDragDropOperation) == 0x000360, "Member 'UEquipmentWidget_C::TslItemDragDropOperation' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, bWantFocus) == 0x000368, "Member 'UEquipmentWidget_C::bWantFocus' has a wrong offset!");
static_assert(offsetof(UEquipmentWidget_C, FocusWidget) == 0x000370, "Member 'UEquipmentWidget_C::FocusWidget' has a wrong offset!");

}

