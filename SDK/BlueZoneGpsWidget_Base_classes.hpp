#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueZoneGpsWidget_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "TslGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C
// 0x0048 (0x0288 - 0x0240)
class UBlueZoneGpsWidget_Base_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                CachedNextPlayerzoneToCharacterDirection;          // 0x0248(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DangerLength;                                      // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SafeLength;                                        // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PlayerLength;                                      // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         NextPlayerzoneToCurrentBlueZoneLength;             // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                SafeLengthPosA;                                    // 0x0264(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsWidgetVanishing;                                // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastGauge;                                         // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            ResetCurve;                                        // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bOldIsInNextPlayzone;                              // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BlueZoneGpsWidget_Base(int32 EntryPoint);
	void ChildUpdateGauge(float Gauge);
	void ChildResetPlayzone(float Gauge);
	void ChildResetBluezone(float Gauge);
	void OnEnterNextPlayzone();
	void OnLeaveNextPlayzone();
	void OnWarning();
	void MainPrepassWidgetVisibilitySetting(class UWidget* BoundWidget);
	void Construct();
	void GetDangerLength(float* DangerLength_0, struct FVector* A, struct FVector* B);
	void GetNextPlayzonePositionAndRadius(struct FVector* NextPlayzonePosition, float* Radius);
	void GetCurrentPlayzonePositionAndRadius(struct FVector* CurrentPlayzonePosition, float* CurrentPlayzoneRadius);
	void GetBluezonePositionAndRadius(struct FVector* BluezonePosition, float* BluezoneRadius);
	void GetSafeLength(float* SafeLength_0, struct FVector* A, struct FVector* B);
	void GetNextPlayerzoneToCharacterDirection(float Scale, struct FVector* Direction);
	void GetPlayerLength(float* PlayerLength_0);
	void GetNextPlayerzoneToCurrentBlueZoneLength(float* Length);
	void IsInNextPlayzoneBp(bool* bIsIn);
	struct FLinearColor GetIsInNextPlayzone();
	void BluezoneGpsMainPrepass(class UWidget* BoundWidget);
	void UpdateGauge();
	void SetBluezoneReset(bool bNewBluezoneReset);
	void SetPlayzoneReset(bool bNewPlayzoneReset);
	void SetResetTimeCheck(float ResetTimeCheck, float* Result);
	void SetReset(bool bReset);
	void TickWaning();

	void GetTslCharacter(class ACharacter** Character) const;
	class FText GetBluezoneTimeText() const;
	void IsStateBluezoneReady(bool* IsReady) const;
	void GetBluezoneStateBp(int32* Stae) const;
	void GetNextPlayzonePositionBp(struct FVector* NextPlayzonePosition) const;
	void GetNextplayzoneRadiusBp(float* NextPlayzoneRadius) const;
	void IsResetBp(bool* bReset) const;
	void GetCurrentPlayZonePosition(struct FVector* CurrentPlayzonePosition) const;
	void GetCurrentPlayZoneRadius(float* CurrentPlayzoneRadius) const;
	void IsBluezoneReset(bool* bBluezoneReset) const;
	void IsPlayzoneReset(bool* bReset) const;
	void GetResetTimeCheck(float* ResetTimeCheck) const;
	void IsWarningBp(bool* bIsWarning) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BlueZoneGpsWidget_Base_C">();
	}
	static class UBlueZoneGpsWidget_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueZoneGpsWidget_Base_C>();
	}
};
static_assert(alignof(UBlueZoneGpsWidget_Base_C) == 0x000008, "Wrong alignment on UBlueZoneGpsWidget_Base_C");
static_assert(sizeof(UBlueZoneGpsWidget_Base_C) == 0x000288, "Wrong size on UBlueZoneGpsWidget_Base_C");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, UberGraphFrame) == 0x000240, "Member 'UBlueZoneGpsWidget_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, CachedNextPlayerzoneToCharacterDirection) == 0x000248, "Member 'UBlueZoneGpsWidget_Base_C::CachedNextPlayerzoneToCharacterDirection' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, DangerLength) == 0x000254, "Member 'UBlueZoneGpsWidget_Base_C::DangerLength' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, SafeLength) == 0x000258, "Member 'UBlueZoneGpsWidget_Base_C::SafeLength' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, PlayerLength) == 0x00025C, "Member 'UBlueZoneGpsWidget_Base_C::PlayerLength' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, NextPlayerzoneToCurrentBlueZoneLength) == 0x000260, "Member 'UBlueZoneGpsWidget_Base_C::NextPlayerzoneToCurrentBlueZoneLength' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, SafeLengthPosA) == 0x000264, "Member 'UBlueZoneGpsWidget_Base_C::SafeLengthPosA' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, bIsWidgetVanishing) == 0x000270, "Member 'UBlueZoneGpsWidget_Base_C::bIsWidgetVanishing' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, LastGauge) == 0x000274, "Member 'UBlueZoneGpsWidget_Base_C::LastGauge' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, ResetCurve) == 0x000278, "Member 'UBlueZoneGpsWidget_Base_C::ResetCurve' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Base_C, bOldIsInNextPlayzone) == 0x000280, "Member 'UBlueZoneGpsWidget_Base_C::bOldIsInNextPlayzone' has a wrong offset!");

}

