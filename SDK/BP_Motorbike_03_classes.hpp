#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Motorbike_03

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TslGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Motorbike_03.BP_Motorbike_03_C
// 0x00C8 (0x0798 - 0x06D0)
class ABP_Motorbike_03_C final : public ATslWheeledVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       FirstPersonCameraInVehicle;                        // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USpringArmInVehicleComponent*           FirstPersonSpringArmInVehicle;                     // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UArrowComponent*                        Arrow;                                             // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UCameraComponent*                       ThirdPersonCameraInVehicle;                        // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USpringArmInVehicleComponent*           ThirdPersonSpringArmInVehicle;                     // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         COM_Offset_Steer;                                  // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         COM_Offset_Yaw;                                    // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         COM_Offset_Roll;                                   // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         COM_Boost;                                         // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            RollCurve;                                         // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            ReturnClampCurve;                                  // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            SteerCurve;                                        // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            YawCurve;                                          // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            TorqueStabilizeCurve;                              // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHasContact;                                       // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_739[0x3];                                      // 0x0739(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GameTime;                                          // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABP_CameraMan_C*                        CameraManRef;                                      // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AIrControl_F;                                      // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AIrControl_R;                                      // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHasSideCart;                                      // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_751[0x7];                                      // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RollCurve_Cart;                                    // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            ReturnClampCurve_Cart;                             // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            SteerCurve_Cart;                                   // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            YawCurve_Cart;                                     // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            TorqueStabilizeCurve_Cart;                         // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            EngineAudioCurve;                                  // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTslWheeledVehicleMovement*             TslMovementRef;                                    // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         FuelEfficiency;                                    // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Motorbike_03(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InpActEvt_PeekRight_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_PeekRight_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_PeekLeft_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_PeekLeft_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Decimal_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_NumPadFive_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void InpActEvt_NumPadTwo_K2Node_InputKeyEvent_18(const struct FKey& Key);
	void InpActEvt_NumPadEight_K2Node_InputKeyEvent_19(const struct FKey& Key);
	void InpActEvt_NumPadNine_K2Node_InputKeyEvent_20(const struct FKey& Key);
	void InpActEvt_NumPadSeven_K2Node_InputKeyEvent_21(const struct FKey& Key);
	void InpActEvt_NumPadThree_K2Node_InputKeyEvent_22(const struct FKey& Key);
	void InpActEvt_Subtract_K2Node_InputKeyEvent_23(const struct FKey& Key);
	void InpActEvt_Add_K2Node_InputKeyEvent_24(const struct FKey& Key);
	void InpActEvt_NumPadOne_K2Node_InputKeyEvent_25(const struct FKey& Key);
	void InpActEvt_NumPadFour_K2Node_InputKeyEvent_26(const struct FKey& Key);
	void InpActEvt_NumPadFour_K2Node_InputKeyEvent_27(const struct FKey& Key);
	void InpActEvt_NumPadSix_K2Node_InputKeyEvent_28(const struct FKey& Key);
	void InpActEvt_NumPadSix_K2Node_InputKeyEvent_29(const struct FKey& Key);
	void InpActEvt_Multiply_K2Node_InputKeyEvent_30(const struct FKey& Key);
	void InpActEvt_NumPadZero_K2Node_InputKeyEvent_31(const struct FKey& Key);
	void UserConstructionScript();
	void Process_Stabilize();
	void Process_Contact();
	void Process_Eject();
	void Process_AirControl();
	void Process_Camera();
	void StablizeMotorbike();
	void StabilizeMotorbikeSidecart();
	void Process_Boost();
	void Process_Audio();
	void Process_FuelConsumption();
	void Init_Cache();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Motorbike_03_C">();
	}
	static class ABP_Motorbike_03_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Motorbike_03_C>();
	}
};
static_assert(alignof(ABP_Motorbike_03_C) == 0x000008, "Wrong alignment on ABP_Motorbike_03_C");
static_assert(sizeof(ABP_Motorbike_03_C) == 0x000798, "Wrong size on ABP_Motorbike_03_C");
static_assert(offsetof(ABP_Motorbike_03_C, UberGraphFrame) == 0x0006D0, "Member 'ABP_Motorbike_03_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, FirstPersonCameraInVehicle) == 0x0006D8, "Member 'ABP_Motorbike_03_C::FirstPersonCameraInVehicle' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, FirstPersonSpringArmInVehicle) == 0x0006E0, "Member 'ABP_Motorbike_03_C::FirstPersonSpringArmInVehicle' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, Arrow) == 0x0006E8, "Member 'ABP_Motorbike_03_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, ThirdPersonCameraInVehicle) == 0x0006F0, "Member 'ABP_Motorbike_03_C::ThirdPersonCameraInVehicle' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, ThirdPersonSpringArmInVehicle) == 0x0006F8, "Member 'ABP_Motorbike_03_C::ThirdPersonSpringArmInVehicle' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, COM_Offset_Steer) == 0x000700, "Member 'ABP_Motorbike_03_C::COM_Offset_Steer' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, COM_Offset_Yaw) == 0x000704, "Member 'ABP_Motorbike_03_C::COM_Offset_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, COM_Offset_Roll) == 0x000708, "Member 'ABP_Motorbike_03_C::COM_Offset_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, COM_Boost) == 0x00070C, "Member 'ABP_Motorbike_03_C::COM_Boost' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, RollCurve) == 0x000710, "Member 'ABP_Motorbike_03_C::RollCurve' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, ReturnClampCurve) == 0x000718, "Member 'ABP_Motorbike_03_C::ReturnClampCurve' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, SteerCurve) == 0x000720, "Member 'ABP_Motorbike_03_C::SteerCurve' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, YawCurve) == 0x000728, "Member 'ABP_Motorbike_03_C::YawCurve' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, TorqueStabilizeCurve) == 0x000730, "Member 'ABP_Motorbike_03_C::TorqueStabilizeCurve' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, bHasContact) == 0x000738, "Member 'ABP_Motorbike_03_C::bHasContact' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, GameTime) == 0x00073C, "Member 'ABP_Motorbike_03_C::GameTime' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, CameraManRef) == 0x000740, "Member 'ABP_Motorbike_03_C::CameraManRef' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, AIrControl_F) == 0x000748, "Member 'ABP_Motorbike_03_C::AIrControl_F' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, AIrControl_R) == 0x00074C, "Member 'ABP_Motorbike_03_C::AIrControl_R' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, bHasSideCart) == 0x000750, "Member 'ABP_Motorbike_03_C::bHasSideCart' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, RollCurve_Cart) == 0x000758, "Member 'ABP_Motorbike_03_C::RollCurve_Cart' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, ReturnClampCurve_Cart) == 0x000760, "Member 'ABP_Motorbike_03_C::ReturnClampCurve_Cart' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, SteerCurve_Cart) == 0x000768, "Member 'ABP_Motorbike_03_C::SteerCurve_Cart' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, YawCurve_Cart) == 0x000770, "Member 'ABP_Motorbike_03_C::YawCurve_Cart' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, TorqueStabilizeCurve_Cart) == 0x000778, "Member 'ABP_Motorbike_03_C::TorqueStabilizeCurve_Cart' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, EngineAudioCurve) == 0x000780, "Member 'ABP_Motorbike_03_C::EngineAudioCurve' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, TslMovementRef) == 0x000788, "Member 'ABP_Motorbike_03_C::TslMovementRef' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_03_C, FuelEfficiency) == 0x000790, "Member 'ABP_Motorbike_03_C::FuelEfficiency' has a wrong offset!");

}

