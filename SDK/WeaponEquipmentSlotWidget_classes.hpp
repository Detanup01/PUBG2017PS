#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponEquipmentSlotWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "InventorySlotBaseWidget_classes.hpp"
#include "TslGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WeaponEquipmentSlotWidget.WeaponEquipmentSlotWidget_C
// 0x0188 (0x0478 - 0x02F0)
class UWeaponEquipmentSlotWidget_C final : public UInventorySlotBaseWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WeaponEquipmentSlotWidget_C;        // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 AmmoIcon;                                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             AmmoName;                                          // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                BackgroundSlot;                                    // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                FocusColorBG;                                      // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_0;                                           // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             KeyName;                                           // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponAttachmentSlotWidget_C*          LowerRail;                                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponAttachmentSlotWidget_C*          Magazine;                                          // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponAttachmentSlotWidget_C*          Muzzle;                                            // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCanvasPanel*                           SlotPanel;                                         // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponAttachmentSlotWidget_C*          Stock;                                             // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponAttachmentSlotWidget_C*          UpperRail;                                         // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           Vertical;                                          // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 WeaponCaptureImage;                                // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             WeaponHandsOnLoadedAmmoCount;                      // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             WeaponHandsOnUnloadedAmmoCount;                    // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 WeaponIconImage;                                   // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             WeaponName;                                        // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetSwitcher*                        WidgetSwitcher_0;                                  // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	int32                                         SlotIndex;                                         // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnReleased;                                        // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         IconSize_0;                                        // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AItemStudio*                            WeaponStudio;                                      // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTextureRenderTarget2D*                 RenderTargetTexture;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               WeaponCaptureMaterial;                             // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	UMulticastDelegateProperty_                   OnDragEnterWeaponSlot;                             // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnDragLeaveWeaponSlot;                             // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AEquipment*                             Equipment_0;                                       // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UEquipableItem*                         EquipableItem;                                     // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UWeaponItem*                            WeaponItem;                                        // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UThrowableItem*                         ThrowableItem;                                     // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ATslWeapon*                             ShooterWeapon;                                     // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ATslWeapon_Gun*                         Weapon_Gun;                                        // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ATslWeapon*                             Weapon_Melee;                                      // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ATslWeapon*                             Weapon_Throwable;                                  // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UEquipableItem*                         DragDroppingEquipableItem;                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UWeaponItem*                            DragDroppingWeaponItem;                            // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAttachableItem*                        DragDroppingAttachableItem;                        // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UWeaponAttachmentSlotWidget_C*>  AttachmentSlotList;                                // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class AInventory*                             Inventory;                                         // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 ItemStudioClass;                                   // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bWantFocus;                                        // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ChildFocusWidget;                                  // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PressedBTime;                                      // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPressedB;                                         // 0x0474(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WeaponEquipmentSlotWidget(int32 EntryPoint);
	void OnInputWidgetInputB();
	void CustomEvent_1();
	void OnWidgetInputX();
	void CustomEvent_0();
	void OnSlotMoveRight();
	void SlotMoveLeft();
	void OnSlotMoveDown();
	void OnSlotMoveUp();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnWidgetInputBReleased();
	void WidgetInputBPressed();
	void BndEvt__Stock_K2Node_ComponentBoundEvent_28_RefreshFocus__DelegateSignature();
	void BndEvt__Magazine_K2Node_ComponentBoundEvent_23_RefreshFocus__DelegateSignature();
	void BndEvt__LowerRail_K2Node_ComponentBoundEvent_19_RefreshFocus__DelegateSignature();
	void BndEvt__Muzzle_K2Node_ComponentBoundEvent_16_RefreshFocus__DelegateSignature();
	void BndEvt__UpperRail_K2Node_ComponentBoundEvent_14_RefreshFocus__DelegateSignature();
	void SetInventory(class UInventoryWidget_C* InventoryWidget_0);
	void UpdateDragDropObject(class UTslItemDragDropOperation_C* DragDropObject);
	void OnUpdateItem(class UItem* Item_0);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnDragSlotLeave();
	void OnDragSlotEnter(int32 SlotIndex_0);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnUpdateEquip();
	void Construct();
	class FText GetWeaponInfoText();
	struct FSlateBrush GetWeaponIcon();
	ESlateVisibility GetSlotVisibility();
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void RefreshAttachmentSlot();
	void InitializeWeaponEquipSlot();
	void MainPrepass_0(class UWidget* BoundWidget);
	void GetWeaponSlotEquipId(EEquipSlotID* EquipSlotID_0);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void IsSlotOn_Bp(bool* IsOn);
	void IsSlotSubOn_Bp(bool* SubOn);
	void IsSlotMouseOver_Bp(bool* IsMouseOver);
	void IsAttachmentSlotMouseOver(bool* MouseOver);
	void GetItem_Bp(class UItem** Item_0);
	void On_WeaponCaptureImage_Prepass_0(class UWidget* BoundWidget);
	void OnUpdateWeapon();
	void On_KeyName_Prepass_0(class UWidget* BoundWidget);
	void On_WeaponName_Prepass_0(class UWidget* BoundWidget);
	void On_WeaponHandsOnLoadedAmmoCount_Prepass_0(class UWidget* BoundWidget);
	void On_WeaponHandsOnUnloadedAmmoCount_Prepass_0(class UWidget* BoundWidget);
	void On_AmmoInfoLayer_Prepass_0(class UWidget* BoundWidget);
	void On_AmmoName_Prepass_0(class UWidget* BoundWidget);
	void GetHandOnLoadedAmmoCount(int32* Count);
	void GetHandOnUnLoadedAmmoCount(int32* Count);
	struct FSlateBrush GetAmmoIcon();
	void GetAmmoName(class FText* ItemName);
	void On_AmmoIcon_Prepass_0(class UWidget* BoundWidget);
	void UpdateWeaponGunInfo(class UWidget* BoundWidget);
	void FindEquipableWeaponPosition(struct FEquipPosition* WeaponPosition);
	void GetDragDroppingEquipableItem(class UEquipableItem** EquipableItem_0);
	void OnSpawnActorInSceneCaptureWorld(class AActor* SpawnedActor);
	bool InputA();
	void On_FocusColorBG_Prepass_0(class UWidget* BoundWidget);
	bool SetFocus(bool NewFocus);
	bool Left();
	bool Down();
	bool Right();
	bool Up();
	void OnChildSlotRefreshFocus();
	bool InputB();
	void SetGamepadSelfPutAttachmentFocus(bool bFocus);
	void GetSlotContainer(TScriptInterface<class ISlotContainerInterface>* SlotContainer);
	void GetSlotItem(TScriptInterface<class ISlotInterface>* SlotItem);

	bool IsFocus() const;
	void FindFirstFocusableWidget(class UUserWidget** FocusableWidget) const;
	bool IsFocusable() const;
	void GetChildUpFocusableWidget(class UUserWidget** UpWidget) const;
	void GetChildDownFocusableWidget(class UUserWidget** DownWidget) const;
	void GetChildLeftFocusableWidget(class UUserWidget** LeftWidget) const;
	void GetChildRightFocusableWidget(class UUserWidget** RightWidget) const;
	class UUserWidget* GetFocusingChildWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WeaponEquipmentSlotWidget_C">();
	}
	static class UWeaponEquipmentSlotWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponEquipmentSlotWidget_C>();
	}
};
static_assert(alignof(UWeaponEquipmentSlotWidget_C) == 0x000008, "Wrong alignment on UWeaponEquipmentSlotWidget_C");
static_assert(sizeof(UWeaponEquipmentSlotWidget_C) == 0x000478, "Wrong size on UWeaponEquipmentSlotWidget_C");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, UberGraphFrame_WeaponEquipmentSlotWidget_C) == 0x0002F0, "Member 'UWeaponEquipmentSlotWidget_C::UberGraphFrame_WeaponEquipmentSlotWidget_C' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, AmmoIcon) == 0x0002F8, "Member 'UWeaponEquipmentSlotWidget_C::AmmoIcon' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, AmmoName) == 0x000300, "Member 'UWeaponEquipmentSlotWidget_C::AmmoName' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, BackgroundSlot) == 0x000308, "Member 'UWeaponEquipmentSlotWidget_C::BackgroundSlot' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, FocusColorBG) == 0x000310, "Member 'UWeaponEquipmentSlotWidget_C::FocusColorBG' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, Image_0) == 0x000318, "Member 'UWeaponEquipmentSlotWidget_C::Image_0' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, KeyName) == 0x000320, "Member 'UWeaponEquipmentSlotWidget_C::KeyName' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, LowerRail) == 0x000328, "Member 'UWeaponEquipmentSlotWidget_C::LowerRail' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, Magazine) == 0x000330, "Member 'UWeaponEquipmentSlotWidget_C::Magazine' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, Muzzle) == 0x000338, "Member 'UWeaponEquipmentSlotWidget_C::Muzzle' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, SlotPanel) == 0x000340, "Member 'UWeaponEquipmentSlotWidget_C::SlotPanel' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, Stock) == 0x000348, "Member 'UWeaponEquipmentSlotWidget_C::Stock' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, UpperRail) == 0x000350, "Member 'UWeaponEquipmentSlotWidget_C::UpperRail' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, Vertical) == 0x000358, "Member 'UWeaponEquipmentSlotWidget_C::Vertical' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, WeaponCaptureImage) == 0x000360, "Member 'UWeaponEquipmentSlotWidget_C::WeaponCaptureImage' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, WeaponHandsOnLoadedAmmoCount) == 0x000368, "Member 'UWeaponEquipmentSlotWidget_C::WeaponHandsOnLoadedAmmoCount' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, WeaponHandsOnUnloadedAmmoCount) == 0x000370, "Member 'UWeaponEquipmentSlotWidget_C::WeaponHandsOnUnloadedAmmoCount' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, WeaponIconImage) == 0x000378, "Member 'UWeaponEquipmentSlotWidget_C::WeaponIconImage' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, WeaponName) == 0x000380, "Member 'UWeaponEquipmentSlotWidget_C::WeaponName' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, WidgetSwitcher_0) == 0x000388, "Member 'UWeaponEquipmentSlotWidget_C::WidgetSwitcher_0' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, SlotIndex) == 0x000390, "Member 'UWeaponEquipmentSlotWidget_C::SlotIndex' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, OnReleased) == 0x000398, "Member 'UWeaponEquipmentSlotWidget_C::OnReleased' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, IconSize_0) == 0x0003A8, "Member 'UWeaponEquipmentSlotWidget_C::IconSize_0' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, WeaponStudio) == 0x0003B0, "Member 'UWeaponEquipmentSlotWidget_C::WeaponStudio' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, RenderTargetTexture) == 0x0003B8, "Member 'UWeaponEquipmentSlotWidget_C::RenderTargetTexture' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, WeaponCaptureMaterial) == 0x0003C0, "Member 'UWeaponEquipmentSlotWidget_C::WeaponCaptureMaterial' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, OnDragEnterWeaponSlot) == 0x0003C8, "Member 'UWeaponEquipmentSlotWidget_C::OnDragEnterWeaponSlot' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, OnDragLeaveWeaponSlot) == 0x0003D8, "Member 'UWeaponEquipmentSlotWidget_C::OnDragLeaveWeaponSlot' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, Equipment_0) == 0x0003E8, "Member 'UWeaponEquipmentSlotWidget_C::Equipment_0' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, EquipableItem) == 0x0003F0, "Member 'UWeaponEquipmentSlotWidget_C::EquipableItem' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, WeaponItem) == 0x0003F8, "Member 'UWeaponEquipmentSlotWidget_C::WeaponItem' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, ThrowableItem) == 0x000400, "Member 'UWeaponEquipmentSlotWidget_C::ThrowableItem' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, ShooterWeapon) == 0x000408, "Member 'UWeaponEquipmentSlotWidget_C::ShooterWeapon' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, Weapon_Gun) == 0x000410, "Member 'UWeaponEquipmentSlotWidget_C::Weapon_Gun' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, Weapon_Melee) == 0x000418, "Member 'UWeaponEquipmentSlotWidget_C::Weapon_Melee' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, Weapon_Throwable) == 0x000420, "Member 'UWeaponEquipmentSlotWidget_C::Weapon_Throwable' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, DragDroppingEquipableItem) == 0x000428, "Member 'UWeaponEquipmentSlotWidget_C::DragDroppingEquipableItem' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, DragDroppingWeaponItem) == 0x000430, "Member 'UWeaponEquipmentSlotWidget_C::DragDroppingWeaponItem' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, DragDroppingAttachableItem) == 0x000438, "Member 'UWeaponEquipmentSlotWidget_C::DragDroppingAttachableItem' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, AttachmentSlotList) == 0x000440, "Member 'UWeaponEquipmentSlotWidget_C::AttachmentSlotList' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, Inventory) == 0x000450, "Member 'UWeaponEquipmentSlotWidget_C::Inventory' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, ItemStudioClass) == 0x000458, "Member 'UWeaponEquipmentSlotWidget_C::ItemStudioClass' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, bWantFocus) == 0x000460, "Member 'UWeaponEquipmentSlotWidget_C::bWantFocus' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, ChildFocusWidget) == 0x000468, "Member 'UWeaponEquipmentSlotWidget_C::ChildFocusWidget' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, PressedBTime) == 0x000470, "Member 'UWeaponEquipmentSlotWidget_C::PressedBTime' has a wrong offset!");
static_assert(offsetof(UWeaponEquipmentSlotWidget_C, bPressedB) == 0x000474, "Member 'UWeaponEquipmentSlotWidget_C::bPressedB' has a wrong offset!");

}

