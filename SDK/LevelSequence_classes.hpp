#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelSequence

#include "Basic.hpp"

#include "LevelSequence_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MovieScene_classes.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class LevelSequence.LevelSequence
// 0x00A8 (0x00D0 - 0x0028)
class ULevelSequence final : public UMovieSceneSequence
{
public:
	class UMovieScene*                            MovieScene;                                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelSequenceObjectReferenceMap       ObjectReferences;                                  // 0x0030(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FString, struct FLevelSequenceObject> PossessedObjects;                                  // 0x0080(0x0050)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequence">();
	}
	static class ULevelSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequence>();
	}
};
static_assert(alignof(ULevelSequence) == 0x000008, "Wrong alignment on ULevelSequence");
static_assert(sizeof(ULevelSequence) == 0x0000D0, "Wrong size on ULevelSequence");
static_assert(offsetof(ULevelSequence, MovieScene) == 0x000028, "Member 'ULevelSequence::MovieScene' has a wrong offset!");
static_assert(offsetof(ULevelSequence, ObjectReferences) == 0x000030, "Member 'ULevelSequence::ObjectReferences' has a wrong offset!");
static_assert(offsetof(ULevelSequence, PossessedObjects) == 0x000080, "Member 'ULevelSequence::PossessedObjects' has a wrong offset!");

// Class LevelSequence.LevelSequencePlayer
// 0x0138 (0x0160 - 0x0028)
class ULevelSequencePlayer final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         LevelSequence;                                     // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelSequencePlayer*                   CurrentPlayer;                                     // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsPlaying;                                        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bReversePlayback;                                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeCursorPosition;                                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0xC];                                       // 0x0060(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelSequencePlaybackSettings         PlaybackSettings;                                  // 0x006C(0x0008)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x44];                                      // 0x0074(0x0044)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnPlay;                                            // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStop;                                            // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPause;                                           // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x78];                                      // 0x00E8(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULevelSequencePlayer* CreateLevelSequencePlayer(class UObject* WorldContextObject, class ULevelSequence* LevelSequence_0, const struct FLevelSequencePlaybackSettings& Settings);

	void ChangePlaybackDirection();
	void Pause();
	void Play();
	void PlayLooping(int32 NumLoops);
	void PlayReverse();
	void SetPlaybackPosition(float NewPlaybackPosition);
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);
	void SetPlayRate(float PlayRate);
	void StartPlayingNextTick();
	void Stop();

	float GetLength() const;
	float GetPlaybackEnd() const;
	float GetPlaybackPosition() const;
	float GetPlaybackStart() const;
	float GetPlayRate() const;
	bool IsPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequencePlayer">();
	}
	static class ULevelSequencePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequencePlayer>();
	}
};
static_assert(alignof(ULevelSequencePlayer) == 0x000008, "Wrong alignment on ULevelSequencePlayer");
static_assert(sizeof(ULevelSequencePlayer) == 0x000160, "Wrong size on ULevelSequencePlayer");
static_assert(offsetof(ULevelSequencePlayer, LevelSequence) == 0x000048, "Member 'ULevelSequencePlayer::LevelSequence' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, CurrentPlayer) == 0x000050, "Member 'ULevelSequencePlayer::CurrentPlayer' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, bIsPlaying) == 0x000058, "Member 'ULevelSequencePlayer::bIsPlaying' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, bReversePlayback) == 0x000059, "Member 'ULevelSequencePlayer::bReversePlayback' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, TimeCursorPosition) == 0x00005C, "Member 'ULevelSequencePlayer::TimeCursorPosition' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, PlaybackSettings) == 0x00006C, "Member 'ULevelSequencePlayer::PlaybackSettings' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, OnPlay) == 0x0000B8, "Member 'ULevelSequencePlayer::OnPlay' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, OnStop) == 0x0000C8, "Member 'ULevelSequencePlayer::OnStop' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, OnPause) == 0x0000D8, "Member 'ULevelSequencePlayer::OnPause' has a wrong offset!");

// Class LevelSequence.LevelSequenceBurnInInitSettings
// 0x0000 (0x0028 - 0x0028)
class ULevelSequenceBurnInInitSettings final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceBurnInInitSettings">();
	}
	static class ULevelSequenceBurnInInitSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceBurnInInitSettings>();
	}
};
static_assert(alignof(ULevelSequenceBurnInInitSettings) == 0x000008, "Wrong alignment on ULevelSequenceBurnInInitSettings");
static_assert(sizeof(ULevelSequenceBurnInInitSettings) == 0x000028, "Wrong size on ULevelSequenceBurnInInitSettings");

// Class LevelSequence.LevelSequenceBurnInOptions
// 0x0020 (0x0048 - 0x0028)
class ULevelSequenceBurnInOptions final : public UObject
{
public:
	bool                                          bUseBurnIn;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStringClassReference                  BurnInClass;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class ULevelSequenceBurnInInitSettings*       Settings;                                          // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceBurnInOptions">();
	}
	static class ULevelSequenceBurnInOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceBurnInOptions>();
	}
};
static_assert(alignof(ULevelSequenceBurnInOptions) == 0x000008, "Wrong alignment on ULevelSequenceBurnInOptions");
static_assert(sizeof(ULevelSequenceBurnInOptions) == 0x000048, "Wrong size on ULevelSequenceBurnInOptions");
static_assert(offsetof(ULevelSequenceBurnInOptions, bUseBurnIn) == 0x000028, "Member 'ULevelSequenceBurnInOptions::bUseBurnIn' has a wrong offset!");
static_assert(offsetof(ULevelSequenceBurnInOptions, BurnInClass) == 0x000030, "Member 'ULevelSequenceBurnInOptions::BurnInClass' has a wrong offset!");
static_assert(offsetof(ULevelSequenceBurnInOptions, Settings) == 0x000040, "Member 'ULevelSequenceBurnInOptions::Settings' has a wrong offset!");

// Class LevelSequence.LevelSequenceActor
// 0x0038 (0x03D8 - 0x03A0)
class ALevelSequenceActor final : public AActor
{
public:
	bool                                          bAutoPlay;                                         // 0x03A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelSequencePlaybackSettings         PlaybackSettings;                                  // 0x03A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                  LevelSequence;                                     // 0x03B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ULevelSequenceBurnInOptions*            BurnInOptions;                                     // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequenceBurnIn*                   BurnInInstance;                                    // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetSequence(class ULevelSequence* InSequence);

	class ULevelSequence* GetSequence(bool Load) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceActor">();
	}
	static class ALevelSequenceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelSequenceActor>();
	}
};
static_assert(alignof(ALevelSequenceActor) == 0x000008, "Wrong alignment on ALevelSequenceActor");
static_assert(sizeof(ALevelSequenceActor) == 0x0003D8, "Wrong size on ALevelSequenceActor");
static_assert(offsetof(ALevelSequenceActor, bAutoPlay) == 0x0003A0, "Member 'ALevelSequenceActor::bAutoPlay' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, PlaybackSettings) == 0x0003A4, "Member 'ALevelSequenceActor::PlaybackSettings' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, SequencePlayer) == 0x0003B0, "Member 'ALevelSequenceActor::SequencePlayer' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, LevelSequence) == 0x0003B8, "Member 'ALevelSequenceActor::LevelSequence' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, BurnInOptions) == 0x0003C8, "Member 'ALevelSequenceActor::BurnInOptions' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, BurnInInstance) == 0x0003D0, "Member 'ALevelSequenceActor::BurnInInstance' has a wrong offset!");

// Class LevelSequence.LevelSequenceBurnIn
// 0x0050 (0x0290 - 0x0240)
class ULevelSequenceBurnIn final : public UUserWidget
{
public:
	struct FLevelSequencePlayerSnapshot           FrameInformation;                                  // 0x0240(0x0048)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetSettings(class UObject* InSettings);

	TSubclassOf<class ULevelSequenceBurnInInitSettings> GetSettingsClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceBurnIn">();
	}
	static class ULevelSequenceBurnIn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceBurnIn>();
	}
};
static_assert(alignof(ULevelSequenceBurnIn) == 0x000008, "Wrong alignment on ULevelSequenceBurnIn");
static_assert(sizeof(ULevelSequenceBurnIn) == 0x000290, "Wrong size on ULevelSequenceBurnIn");
static_assert(offsetof(ULevelSequenceBurnIn, FrameInformation) == 0x000240, "Member 'ULevelSequenceBurnIn::FrameInformation' has a wrong offset!");
static_assert(offsetof(ULevelSequenceBurnIn, LevelSequenceActor) == 0x000288, "Member 'ULevelSequenceBurnIn::LevelSequenceActor' has a wrong offset!");

}

