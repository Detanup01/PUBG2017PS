#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TeamMarkWidget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "TslGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_TeamMarkWidget.BP_TeamMarkWidget_C.Get_PlayerName_Text_0
// 0x0048 (0x0048 - 0x0000)
struct BP_TeamMarkWidget_C_Get_PlayerName_Text_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
};
static_assert(alignof(BP_TeamMarkWidget_C_Get_PlayerName_Text_0) == 0x000008, "Wrong alignment on BP_TeamMarkWidget_C_Get_PlayerName_Text_0");
static_assert(sizeof(BP_TeamMarkWidget_C_Get_PlayerName_Text_0) == 0x000048, "Wrong size on BP_TeamMarkWidget_C_Get_PlayerName_Text_0");
static_assert(offsetof(BP_TeamMarkWidget_C_Get_PlayerName_Text_0, ReturnValue) == 0x000000, "Member 'BP_TeamMarkWidget_C_Get_PlayerName_Text_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_Get_PlayerName_Text_0, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_TeamMarkWidget_C_Get_PlayerName_Text_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_Get_PlayerName_Text_0, CallFunc_GetPlayerName_ReturnValue) == 0x000020, "Member 'BP_TeamMarkWidget_C_Get_PlayerName_Text_0::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_Get_PlayerName_Text_0, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'BP_TeamMarkWidget_C_Get_PlayerName_Text_0::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function BP_TeamMarkWidget.BP_TeamMarkWidget_C.OnPrepass_0
// 0x0028 (0x0028 - 0x0000)
struct BP_TeamMarkWidget_C_OnPrepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable3;                                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable4;                                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFreeCam_ReturnValue;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable2;                                 // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslHUD*                                TslHUD;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TeamMarkWidget_C_OnPrepass_0) == 0x000008, "Wrong alignment on BP_TeamMarkWidget_C_OnPrepass_0");
static_assert(sizeof(BP_TeamMarkWidget_C_OnPrepass_0) == 0x000028, "Wrong size on BP_TeamMarkWidget_C_OnPrepass_0");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, BoundWidget) == 0x000000, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, m__byte_Variable) == 0x000008, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, m__byte_Variable2) == 0x000009, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, m__bool_Variable) == 0x00000A, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, m__byte_Variable3) == 0x00000B, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::m__byte_Variable3' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, m__byte_Variable4) == 0x00000C, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::m__byte_Variable4' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, CallFunc_IsFreeCam_ReturnValue) == 0x00000D, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::CallFunc_IsFreeCam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, CallFunc_IsValid_ReturnValue) == 0x00000E, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, m__bool_Variable2) == 0x00000F, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::m__bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, K2Node_Select_Default) == 0x000010, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, K2Node_Select2_Default) == 0x000011, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, CallFunc_GetTslHUD_ReturnValue) == 0x000018, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_OnPrepass_0, TslHUD) == 0x000020, "Member 'BP_TeamMarkWidget_C_OnPrepass_0::TslHUD' has a wrong offset!");

// Function BP_TeamMarkWidget.BP_TeamMarkWidget_C.GetPlayerNameTextAddLocation
// 0x000C (0x000C - 0x0000)
struct BP_TeamMarkWidget_C_GetPlayerNameTextAddLocation final
{
public:
	struct FVector2D                              AddLocation;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TeamMarkWidget_C_GetPlayerNameTextAddLocation) == 0x000004, "Wrong alignment on BP_TeamMarkWidget_C_GetPlayerNameTextAddLocation");
static_assert(sizeof(BP_TeamMarkWidget_C_GetPlayerNameTextAddLocation) == 0x00000C, "Wrong size on BP_TeamMarkWidget_C_GetPlayerNameTextAddLocation");
static_assert(offsetof(BP_TeamMarkWidget_C_GetPlayerNameTextAddLocation, AddLocation) == 0x000000, "Member 'BP_TeamMarkWidget_C_GetPlayerNameTextAddLocation::AddLocation' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_GetPlayerNameTextAddLocation, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'BP_TeamMarkWidget_C_GetPlayerNameTextAddLocation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_TeamMarkWidget.BP_TeamMarkWidget_C.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct BP_TeamMarkWidget_C_SetJustification final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TeamMarkWidget_C_SetJustification) == 0x000001, "Wrong alignment on BP_TeamMarkWidget_C_SetJustification");
static_assert(sizeof(BP_TeamMarkWidget_C_SetJustification) == 0x000001, "Wrong size on BP_TeamMarkWidget_C_SetJustification");
static_assert(offsetof(BP_TeamMarkWidget_C_SetJustification, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_TeamMarkWidget_C_SetJustification::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_TeamMarkWidget.BP_TeamMarkWidget_C.IsFreeCam
// 0x0038 (0x0038 - 0x0000)
struct BP_TeamMarkWidget_C_IsFreeCam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   K2Node_DynamicCast_AsTsl_Player_Controller;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsObserving_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASpectatorPawn*                         CallFunc_GetSpectatorPawn_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslSpectatorPawn*                      K2Node_DynamicCast_AsTsl_Spectator_Pawn;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EObserverCameraMode                           CallFunc_GetCameraMode_ReturnValue;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TeamMarkWidget_C_IsFreeCam) == 0x000008, "Wrong alignment on BP_TeamMarkWidget_C_IsFreeCam");
static_assert(sizeof(BP_TeamMarkWidget_C_IsFreeCam) == 0x000038, "Wrong size on BP_TeamMarkWidget_C_IsFreeCam");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, ReturnValue) == 0x000000, "Member 'BP_TeamMarkWidget_C_IsFreeCam::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'BP_TeamMarkWidget_C_IsFreeCam::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, K2Node_DynamicCast_AsTsl_Player_Controller) == 0x000010, "Member 'BP_TeamMarkWidget_C_IsFreeCam::K2Node_DynamicCast_AsTsl_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_TeamMarkWidget_C_IsFreeCam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, CallFunc_IsObserving_ReturnValue) == 0x000019, "Member 'BP_TeamMarkWidget_C_IsFreeCam::CallFunc_IsObserving_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, CallFunc_GetSpectatorPawn_ReturnValue) == 0x000020, "Member 'BP_TeamMarkWidget_C_IsFreeCam::CallFunc_GetSpectatorPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, K2Node_DynamicCast_AsTsl_Spectator_Pawn) == 0x000028, "Member 'BP_TeamMarkWidget_C_IsFreeCam::K2Node_DynamicCast_AsTsl_Spectator_Pawn' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, K2Node_DynamicCast_bSuccess2) == 0x000030, "Member 'BP_TeamMarkWidget_C_IsFreeCam::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, CallFunc_GetCameraMode_ReturnValue) == 0x000031, "Member 'BP_TeamMarkWidget_C_IsFreeCam::CallFunc_GetCameraMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000032, "Member 'BP_TeamMarkWidget_C_IsFreeCam::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_IsFreeCam, CallFunc_BooleanAND_ReturnValue) == 0x000033, "Member 'BP_TeamMarkWidget_C_IsFreeCam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_TeamMarkWidget.BP_TeamMarkWidget_C.DecideWidgetColors
// 0x00A0 (0x00A0 - 0x0000)
struct BP_TeamMarkWidget_C_DecideWidgetColors final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EColorBlindType                               CallFunc_GetCurrentColorBlindKey_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColorBlindColorData                   CallFunc_Array_Get_Item;                           // 0x0018(0x0014)()
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0030(0x0028)()
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor2;                     // 0x0068(0x0028)()
	struct FLinearColor                           CurrColor;                                         // 0x0090(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TeamMarkWidget_C_DecideWidgetColors) == 0x000008, "Wrong alignment on BP_TeamMarkWidget_C_DecideWidgetColors");
static_assert(sizeof(BP_TeamMarkWidget_C_DecideWidgetColors) == 0x0000A0, "Wrong size on BP_TeamMarkWidget_C_DecideWidgetColors");
static_assert(offsetof(BP_TeamMarkWidget_C_DecideWidgetColors, Condition) == 0x000000, "Member 'BP_TeamMarkWidget_C_DecideWidgetColors::Condition' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_DecideWidgetColors, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BP_TeamMarkWidget_C_DecideWidgetColors::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_DecideWidgetColors, CallFunc_GetCurrentColorBlindKey_ReturnValue) == 0x000010, "Member 'BP_TeamMarkWidget_C_DecideWidgetColors::CallFunc_GetCurrentColorBlindKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_DecideWidgetColors, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'BP_TeamMarkWidget_C_DecideWidgetColors::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_DecideWidgetColors, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_TeamMarkWidget_C_DecideWidgetColors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_DecideWidgetColors, K2Node_MakeStruct_SlateColor) == 0x000030, "Member 'BP_TeamMarkWidget_C_DecideWidgetColors::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_DecideWidgetColors, K2Node_MakeStruct_LinearColor) == 0x000058, "Member 'BP_TeamMarkWidget_C_DecideWidgetColors::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_DecideWidgetColors, K2Node_MakeStruct_SlateColor2) == 0x000068, "Member 'BP_TeamMarkWidget_C_DecideWidgetColors::K2Node_MakeStruct_SlateColor2' has a wrong offset!");
static_assert(offsetof(BP_TeamMarkWidget_C_DecideWidgetColors, CurrColor) == 0x000090, "Member 'BP_TeamMarkWidget_C_DecideWidgetColors::CurrColor' has a wrong offset!");

}

