#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RoadRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RoadRuntime.CrossActor.PushSideActor
// 0x0028 (0x0028 - 0x0000)
struct CrossActor_PushSideActor final
{
public:
	TSubclassOf<class AActor>                     InPrototype;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorRelativeLocation;                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ActorRelativeRotation;                             // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SocketIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNormalized;                                      // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrossActor_PushSideActor) == 0x000008, "Wrong alignment on CrossActor_PushSideActor");
static_assert(sizeof(CrossActor_PushSideActor) == 0x000028, "Wrong size on CrossActor_PushSideActor");
static_assert(offsetof(CrossActor_PushSideActor, InPrototype) == 0x000000, "Member 'CrossActor_PushSideActor::InPrototype' has a wrong offset!");
static_assert(offsetof(CrossActor_PushSideActor, ActorRelativeLocation) == 0x000008, "Member 'CrossActor_PushSideActor::ActorRelativeLocation' has a wrong offset!");
static_assert(offsetof(CrossActor_PushSideActor, ActorRelativeRotation) == 0x000014, "Member 'CrossActor_PushSideActor::ActorRelativeRotation' has a wrong offset!");
static_assert(offsetof(CrossActor_PushSideActor, SocketIndex) == 0x000020, "Member 'CrossActor_PushSideActor::SocketIndex' has a wrong offset!");
static_assert(offsetof(CrossActor_PushSideActor, IsEnable) == 0x000024, "Member 'CrossActor_PushSideActor::IsEnable' has a wrong offset!");
static_assert(offsetof(CrossActor_PushSideActor, IsNormalized) == 0x000025, "Member 'CrossActor_PushSideActor::IsNormalized' has a wrong offset!");

// Function RoadRuntime.CrossActor.PushSideMesh
// 0x0028 (0x0028 - 0x0000)
struct CrossActor_PushSideMesh final
{
public:
	class UStaticMesh*                            InPrototype;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshRelativeLocation;                              // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MeshRelativeRotation;                              // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SocketIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNormalized;                                      // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrossActor_PushSideMesh) == 0x000008, "Wrong alignment on CrossActor_PushSideMesh");
static_assert(sizeof(CrossActor_PushSideMesh) == 0x000028, "Wrong size on CrossActor_PushSideMesh");
static_assert(offsetof(CrossActor_PushSideMesh, InPrototype) == 0x000000, "Member 'CrossActor_PushSideMesh::InPrototype' has a wrong offset!");
static_assert(offsetof(CrossActor_PushSideMesh, MeshRelativeLocation) == 0x000008, "Member 'CrossActor_PushSideMesh::MeshRelativeLocation' has a wrong offset!");
static_assert(offsetof(CrossActor_PushSideMesh, MeshRelativeRotation) == 0x000014, "Member 'CrossActor_PushSideMesh::MeshRelativeRotation' has a wrong offset!");
static_assert(offsetof(CrossActor_PushSideMesh, SocketIndex) == 0x000020, "Member 'CrossActor_PushSideMesh::SocketIndex' has a wrong offset!");
static_assert(offsetof(CrossActor_PushSideMesh, IsEnable) == 0x000024, "Member 'CrossActor_PushSideMesh::IsEnable' has a wrong offset!");
static_assert(offsetof(CrossActor_PushSideMesh, IsNormalized) == 0x000025, "Member 'CrossActor_PushSideMesh::IsNormalized' has a wrong offset!");

// Function RoadRuntime.CrossActor.UpdateSideActor
// 0x0028 (0x0028 - 0x0000)
struct CrossActor_UpdateSideActor final
{
public:
	TSubclassOf<class AActor>                     InPrototype;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorRelativeLocation;                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ActorRelativeRotation;                             // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SocketIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNormalized;                                      // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrossActor_UpdateSideActor) == 0x000008, "Wrong alignment on CrossActor_UpdateSideActor");
static_assert(sizeof(CrossActor_UpdateSideActor) == 0x000028, "Wrong size on CrossActor_UpdateSideActor");
static_assert(offsetof(CrossActor_UpdateSideActor, InPrototype) == 0x000000, "Member 'CrossActor_UpdateSideActor::InPrototype' has a wrong offset!");
static_assert(offsetof(CrossActor_UpdateSideActor, ActorRelativeLocation) == 0x000008, "Member 'CrossActor_UpdateSideActor::ActorRelativeLocation' has a wrong offset!");
static_assert(offsetof(CrossActor_UpdateSideActor, ActorRelativeRotation) == 0x000014, "Member 'CrossActor_UpdateSideActor::ActorRelativeRotation' has a wrong offset!");
static_assert(offsetof(CrossActor_UpdateSideActor, SocketIndex) == 0x000020, "Member 'CrossActor_UpdateSideActor::SocketIndex' has a wrong offset!");
static_assert(offsetof(CrossActor_UpdateSideActor, IsEnable) == 0x000024, "Member 'CrossActor_UpdateSideActor::IsEnable' has a wrong offset!");
static_assert(offsetof(CrossActor_UpdateSideActor, IsNormalized) == 0x000025, "Member 'CrossActor_UpdateSideActor::IsNormalized' has a wrong offset!");

// Function RoadRuntime.CrossActor.UpdateSideMesh
// 0x0028 (0x0028 - 0x0000)
struct CrossActor_UpdateSideMesh final
{
public:
	class UStaticMesh*                            InPrototype;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshRelativeLocation;                              // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MeshRelativeRotation;                              // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SocketIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNormalized;                                      // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrossActor_UpdateSideMesh) == 0x000008, "Wrong alignment on CrossActor_UpdateSideMesh");
static_assert(sizeof(CrossActor_UpdateSideMesh) == 0x000028, "Wrong size on CrossActor_UpdateSideMesh");
static_assert(offsetof(CrossActor_UpdateSideMesh, InPrototype) == 0x000000, "Member 'CrossActor_UpdateSideMesh::InPrototype' has a wrong offset!");
static_assert(offsetof(CrossActor_UpdateSideMesh, MeshRelativeLocation) == 0x000008, "Member 'CrossActor_UpdateSideMesh::MeshRelativeLocation' has a wrong offset!");
static_assert(offsetof(CrossActor_UpdateSideMesh, MeshRelativeRotation) == 0x000014, "Member 'CrossActor_UpdateSideMesh::MeshRelativeRotation' has a wrong offset!");
static_assert(offsetof(CrossActor_UpdateSideMesh, SocketIndex) == 0x000020, "Member 'CrossActor_UpdateSideMesh::SocketIndex' has a wrong offset!");
static_assert(offsetof(CrossActor_UpdateSideMesh, IsEnable) == 0x000024, "Member 'CrossActor_UpdateSideMesh::IsEnable' has a wrong offset!");
static_assert(offsetof(CrossActor_UpdateSideMesh, IsNormalized) == 0x000025, "Member 'CrossActor_UpdateSideMesh::IsNormalized' has a wrong offset!");

// Function RoadRuntime.RoadActor.ApproxLength
// 0x0028 (0x0028 - 0x0000)
struct RoadActor_ApproxLength final
{
public:
	struct FInterpCurveVector                     SplineInfo;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Start;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApproxSections;                                    // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoadActor_ApproxLength) == 0x000008, "Wrong alignment on RoadActor_ApproxLength");
static_assert(sizeof(RoadActor_ApproxLength) == 0x000028, "Wrong size on RoadActor_ApproxLength");
static_assert(offsetof(RoadActor_ApproxLength, SplineInfo) == 0x000000, "Member 'RoadActor_ApproxLength::SplineInfo' has a wrong offset!");
static_assert(offsetof(RoadActor_ApproxLength, Start) == 0x000018, "Member 'RoadActor_ApproxLength::Start' has a wrong offset!");
static_assert(offsetof(RoadActor_ApproxLength, End) == 0x00001C, "Member 'RoadActor_ApproxLength::End' has a wrong offset!");
static_assert(offsetof(RoadActor_ApproxLength, ApproxSections) == 0x000020, "Member 'RoadActor_ApproxLength::ApproxSections' has a wrong offset!");
static_assert(offsetof(RoadActor_ApproxLength, ReturnValue) == 0x000024, "Member 'RoadActor_ApproxLength::ReturnValue' has a wrong offset!");

// Function RoadRuntime.RoadActor.AddSplineMesh
// 0x0004 (0x0004 - 0x0000)
struct RoadActor_AddSplineMesh final
{
public:
	int32                                         MeshIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoadActor_AddSplineMesh) == 0x000004, "Wrong alignment on RoadActor_AddSplineMesh");
static_assert(sizeof(RoadActor_AddSplineMesh) == 0x000004, "Wrong size on RoadActor_AddSplineMesh");
static_assert(offsetof(RoadActor_AddSplineMesh, MeshIndex) == 0x000000, "Member 'RoadActor_AddSplineMesh::MeshIndex' has a wrong offset!");

// Function RoadRuntime.RoadActor.PushSideActor
// 0x0030 (0x0030 - 0x0000)
struct RoadActor_PushSideActor final
{
public:
	TSubclassOf<class AActor>                     InPrototype;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorRelativeLocation;                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ActorRelativeRotation;                             // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SocketIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InShift;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSpacing;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNormalized;                                      // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RoadActor_PushSideActor) == 0x000008, "Wrong alignment on RoadActor_PushSideActor");
static_assert(sizeof(RoadActor_PushSideActor) == 0x000030, "Wrong size on RoadActor_PushSideActor");
static_assert(offsetof(RoadActor_PushSideActor, InPrototype) == 0x000000, "Member 'RoadActor_PushSideActor::InPrototype' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideActor, ActorRelativeLocation) == 0x000008, "Member 'RoadActor_PushSideActor::ActorRelativeLocation' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideActor, ActorRelativeRotation) == 0x000014, "Member 'RoadActor_PushSideActor::ActorRelativeRotation' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideActor, SocketIndex) == 0x000020, "Member 'RoadActor_PushSideActor::SocketIndex' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideActor, InShift) == 0x000024, "Member 'RoadActor_PushSideActor::InShift' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideActor, InSpacing) == 0x000028, "Member 'RoadActor_PushSideActor::InSpacing' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideActor, IsEnable) == 0x00002C, "Member 'RoadActor_PushSideActor::IsEnable' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideActor, IsNormalized) == 0x00002D, "Member 'RoadActor_PushSideActor::IsNormalized' has a wrong offset!");

// Function RoadRuntime.RoadActor.PushSideMesh
// 0x0030 (0x0030 - 0x0000)
struct RoadActor_PushSideMesh final
{
public:
	class UStaticMesh*                            InPrototype;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshRelativeLocation;                              // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MeshRelativeRotation;                              // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SocketIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InShift;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSpacing;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNormalized;                                      // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RoadActor_PushSideMesh) == 0x000008, "Wrong alignment on RoadActor_PushSideMesh");
static_assert(sizeof(RoadActor_PushSideMesh) == 0x000030, "Wrong size on RoadActor_PushSideMesh");
static_assert(offsetof(RoadActor_PushSideMesh, InPrototype) == 0x000000, "Member 'RoadActor_PushSideMesh::InPrototype' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideMesh, MeshRelativeLocation) == 0x000008, "Member 'RoadActor_PushSideMesh::MeshRelativeLocation' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideMesh, MeshRelativeRotation) == 0x000014, "Member 'RoadActor_PushSideMesh::MeshRelativeRotation' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideMesh, SocketIndex) == 0x000020, "Member 'RoadActor_PushSideMesh::SocketIndex' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideMesh, InShift) == 0x000024, "Member 'RoadActor_PushSideMesh::InShift' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideMesh, InSpacing) == 0x000028, "Member 'RoadActor_PushSideMesh::InSpacing' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideMesh, IsEnable) == 0x00002C, "Member 'RoadActor_PushSideMesh::IsEnable' has a wrong offset!");
static_assert(offsetof(RoadActor_PushSideMesh, IsNormalized) == 0x00002D, "Member 'RoadActor_PushSideMesh::IsNormalized' has a wrong offset!");

// Function RoadRuntime.RoadActor.UpdateSegment
// 0x0020 (0x0020 - 0x0000)
struct RoadActor_UpdateSegment final
{
public:
	int32                                         SegmentIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       SplineComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineMeshAxis                               InAxis;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RoadActor_UpdateSegment) == 0x000008, "Wrong alignment on RoadActor_UpdateSegment");
static_assert(sizeof(RoadActor_UpdateSegment) == 0x000020, "Wrong size on RoadActor_UpdateSegment");
static_assert(offsetof(RoadActor_UpdateSegment, SegmentIndex) == 0x000000, "Member 'RoadActor_UpdateSegment::SegmentIndex' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSegment, SplineComponent) == 0x000008, "Member 'RoadActor_UpdateSegment::SplineComponent' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSegment, StaticMesh) == 0x000010, "Member 'RoadActor_UpdateSegment::StaticMesh' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSegment, InAxis) == 0x000018, "Member 'RoadActor_UpdateSegment::InAxis' has a wrong offset!");

// Function RoadRuntime.RoadActor.UpdateSideActor
// 0x0030 (0x0030 - 0x0000)
struct RoadActor_UpdateSideActor final
{
public:
	TSubclassOf<class AActor>                     InPrototype;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorRelativeLocation;                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ActorRelativeRotation;                             // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SocketIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InShift;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSpacing;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNormalized;                                      // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RoadActor_UpdateSideActor) == 0x000008, "Wrong alignment on RoadActor_UpdateSideActor");
static_assert(sizeof(RoadActor_UpdateSideActor) == 0x000030, "Wrong size on RoadActor_UpdateSideActor");
static_assert(offsetof(RoadActor_UpdateSideActor, InPrototype) == 0x000000, "Member 'RoadActor_UpdateSideActor::InPrototype' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideActor, ActorRelativeLocation) == 0x000008, "Member 'RoadActor_UpdateSideActor::ActorRelativeLocation' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideActor, ActorRelativeRotation) == 0x000014, "Member 'RoadActor_UpdateSideActor::ActorRelativeRotation' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideActor, SocketIndex) == 0x000020, "Member 'RoadActor_UpdateSideActor::SocketIndex' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideActor, InShift) == 0x000024, "Member 'RoadActor_UpdateSideActor::InShift' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideActor, InSpacing) == 0x000028, "Member 'RoadActor_UpdateSideActor::InSpacing' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideActor, IsEnable) == 0x00002C, "Member 'RoadActor_UpdateSideActor::IsEnable' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideActor, IsNormalized) == 0x00002D, "Member 'RoadActor_UpdateSideActor::IsNormalized' has a wrong offset!");

// Function RoadRuntime.RoadActor.UpdateSideMeshes
// 0x0030 (0x0030 - 0x0000)
struct RoadActor_UpdateSideMeshes final
{
public:
	class UStaticMesh*                            InPrototype;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshRelativeLocation;                              // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MeshRelativeRotation;                              // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SocketIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InShift;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSpacing;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNormalized;                                      // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RoadActor_UpdateSideMeshes) == 0x000008, "Wrong alignment on RoadActor_UpdateSideMeshes");
static_assert(sizeof(RoadActor_UpdateSideMeshes) == 0x000030, "Wrong size on RoadActor_UpdateSideMeshes");
static_assert(offsetof(RoadActor_UpdateSideMeshes, InPrototype) == 0x000000, "Member 'RoadActor_UpdateSideMeshes::InPrototype' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideMeshes, MeshRelativeLocation) == 0x000008, "Member 'RoadActor_UpdateSideMeshes::MeshRelativeLocation' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideMeshes, MeshRelativeRotation) == 0x000014, "Member 'RoadActor_UpdateSideMeshes::MeshRelativeRotation' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideMeshes, SocketIndex) == 0x000020, "Member 'RoadActor_UpdateSideMeshes::SocketIndex' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideMeshes, InShift) == 0x000024, "Member 'RoadActor_UpdateSideMeshes::InShift' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideMeshes, InSpacing) == 0x000028, "Member 'RoadActor_UpdateSideMeshes::InSpacing' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideMeshes, IsEnable) == 0x00002C, "Member 'RoadActor_UpdateSideMeshes::IsEnable' has a wrong offset!");
static_assert(offsetof(RoadActor_UpdateSideMeshes, IsNormalized) == 0x00002D, "Member 'RoadActor_UpdateSideMeshes::IsNormalized' has a wrong offset!");

// Function RoadRuntime.RoadActor.UpdateSplineMesh
// 0x0004 (0x0004 - 0x0000)
struct RoadActor_UpdateSplineMesh final
{
public:
	int32                                         MeshIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoadActor_UpdateSplineMesh) == 0x000004, "Wrong alignment on RoadActor_UpdateSplineMesh");
static_assert(sizeof(RoadActor_UpdateSplineMesh) == 0x000004, "Wrong size on RoadActor_UpdateSplineMesh");
static_assert(offsetof(RoadActor_UpdateSplineMesh, MeshIndex) == 0x000000, "Member 'RoadActor_UpdateSplineMesh::MeshIndex' has a wrong offset!");

}

