#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueZoneGpsWidget_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "TslGame_structs.hpp"


namespace SDK::Params
{

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.ExecuteUbergraph_BlueZoneGpsWidget_Base
// 0x0020 (0x0020 - 0x0000)
struct BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_CustomEvent_BoundWidget;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_CustomEvent_Gauge3;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_CustomEvent_Gauge2;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_CustomEvent_Gauge;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base) == 0x000020, "Wrong size on BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base, EntryPoint) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base, K2Node_CustomEvent_BoundWidget) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base::K2Node_CustomEvent_BoundWidget' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base, K2Node_CustomEvent_Gauge3) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base::K2Node_CustomEvent_Gauge3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base, K2Node_CustomEvent_Gauge2) == 0x000014, "Member 'BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base::K2Node_CustomEvent_Gauge2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base, K2Node_CustomEvent_Gauge) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_ExecuteUbergraph_BlueZoneGpsWidget_Base::K2Node_CustomEvent_Gauge' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.ChildUpdateGauge
// 0x0004 (0x0004 - 0x0000)
struct BlueZoneGpsWidget_Base_C_ChildUpdateGauge final
{
public:
	float                                         Gauge;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_ChildUpdateGauge) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Base_C_ChildUpdateGauge");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_ChildUpdateGauge) == 0x000004, "Wrong size on BlueZoneGpsWidget_Base_C_ChildUpdateGauge");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_ChildUpdateGauge, Gauge) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_ChildUpdateGauge::Gauge' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.ChildResetPlayzone
// 0x0004 (0x0004 - 0x0000)
struct BlueZoneGpsWidget_Base_C_ChildResetPlayzone final
{
public:
	float                                         Gauge;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_ChildResetPlayzone) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Base_C_ChildResetPlayzone");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_ChildResetPlayzone) == 0x000004, "Wrong size on BlueZoneGpsWidget_Base_C_ChildResetPlayzone");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_ChildResetPlayzone, Gauge) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_ChildResetPlayzone::Gauge' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.ChildResetBluezone
// 0x0004 (0x0004 - 0x0000)
struct BlueZoneGpsWidget_Base_C_ChildResetBluezone final
{
public:
	float                                         Gauge;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_ChildResetBluezone) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Base_C_ChildResetBluezone");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_ChildResetBluezone) == 0x000004, "Wrong size on BlueZoneGpsWidget_Base_C_ChildResetBluezone");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_ChildResetBluezone, Gauge) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_ChildResetBluezone::Gauge' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.MainPrepassWidgetVisibilitySetting
// 0x0008 (0x0008 - 0x0000)
struct BlueZoneGpsWidget_Base_C_MainPrepassWidgetVisibilitySetting final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_MainPrepassWidgetVisibilitySetting) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_MainPrepassWidgetVisibilitySetting");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_MainPrepassWidgetVisibilitySetting) == 0x000008, "Wrong size on BlueZoneGpsWidget_Base_C_MainPrepassWidgetVisibilitySetting");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_MainPrepassWidgetVisibilitySetting, BoundWidget) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_MainPrepassWidgetVisibilitySetting::BoundWidget' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetDangerLength
// 0x00A8 (0x00A8 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetDangerLength final
{
public:
	float                                         DangerLength_0;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                A;                                                 // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                B;                                                 // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetNextPlayzonePosition_BluezoneGPS_ReturnValue; // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetBluezoneRadius_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetBluezonePosition_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCurrentPlayzonePosition_BluezoneGPS_ReturnValue; // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LineSphereIntersection_Intersection1;     // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LineSphereIntersection_Intersection2;     // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LineSphereIntersection_ReturnValue;       // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentPlayzoneRadius_BluezoneGPS_ReturnValue; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LineSphereIntersection_Intersection12;    // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LineSphereIntersection_Intersection22;    // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LineSphereIntersection_ReturnValue2;      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                NextPlayzonePosition;                              // 0x0090(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslCharacter*                          Character;                                         // 0x00A0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetDangerLength) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetDangerLength");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetDangerLength) == 0x0000A8, "Wrong size on BlueZoneGpsWidget_Base_C_GetDangerLength");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, DangerLength_0) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::DangerLength_0' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, A) == 0x000004, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::A' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, B) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::B' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_GetNextPlayzonePosition_BluezoneGPS_ReturnValue) == 0x00001C, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_GetNextPlayzonePosition_BluezoneGPS_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_GetBluezoneRadius_ReturnValue) == 0x000028, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_GetBluezoneRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_GetBluezonePosition_ReturnValue) == 0x00002C, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_GetBluezonePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_GetCurrentPlayzonePosition_BluezoneGPS_ReturnValue) == 0x000038, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_GetCurrentPlayzonePosition_BluezoneGPS_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_LineSphereIntersection_Intersection1) == 0x000044, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_LineSphereIntersection_Intersection1' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_LineSphereIntersection_Intersection2) == 0x000050, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_LineSphereIntersection_Intersection2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_LineSphereIntersection_ReturnValue) == 0x00005C, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_LineSphereIntersection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_GetCurrentPlayzoneRadius_BluezoneGPS_ReturnValue) == 0x000060, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_GetCurrentPlayzoneRadius_BluezoneGPS_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_LineSphereIntersection_Intersection12) == 0x000064, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_LineSphereIntersection_Intersection12' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_LineSphereIntersection_Intersection22) == 0x000070, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_LineSphereIntersection_Intersection22' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_LineSphereIntersection_ReturnValue2) == 0x00007C, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_LineSphereIntersection_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000080, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, CallFunc_VSize_ReturnValue) == 0x00008C, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, NextPlayzonePosition) == 0x000090, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::NextPlayzonePosition' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetDangerLength, Character) == 0x0000A0, "Member 'BlueZoneGpsWidget_Base_C_GetDangerLength::Character' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetNextPlayzonePositionAndRadius
// 0x0038 (0x0038 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius final
{
public:
	struct FVector                                NextPlayzonePosition;                              // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslGameState*                          CallFunc_GetTslGameState_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius) == 0x000038, "Wrong size on BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius, NextPlayzonePosition) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius::NextPlayzonePosition' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius, Radius) == 0x00000C, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius::Radius' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius, CallFunc_GetTslGameState_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius::CallFunc_GetTslGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius, CallFunc_BreakVector_X) == 0x00001C, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius, CallFunc_BreakVector_Y) == 0x000020, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius, CallFunc_BreakVector_Z) == 0x000024, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius, CallFunc_MakeVector_ReturnValue) == 0x000028, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionAndRadius::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetCurrentPlayzonePositionAndRadius
// 0x0038 (0x0038 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius final
{
public:
	struct FVector                                CurrentPlayzonePosition;                           // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CurrentPlayzoneRadius;                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCurrentPlayZonePosition_CurrentPlayZonePosition; // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCurrentPlayZoneRadius_CurrentPlayZoneRadius; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius) == 0x000038, "Wrong size on BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius, CurrentPlayzonePosition) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius::CurrentPlayzonePosition' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius, CurrentPlayzoneRadius) == 0x00000C, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius::CurrentPlayzoneRadius' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius, CallFunc_GetCurrentPlayZonePosition_CurrentPlayZonePosition) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius::CallFunc_GetCurrentPlayZonePosition_CurrentPlayZonePosition' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius, CallFunc_GetCurrentPlayZoneRadius_CurrentPlayZoneRadius) == 0x00001C, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius::CallFunc_GetCurrentPlayZoneRadius_CurrentPlayZoneRadius' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius, CallFunc_BreakVector_X) == 0x000020, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius, CallFunc_BreakVector_Y) == 0x000024, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius, CallFunc_BreakVector_Z) == 0x000028, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius, CallFunc_MakeVector_ReturnValue) == 0x00002C, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayzonePositionAndRadius::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetBluezonePositionAndRadius
// 0x0038 (0x0038 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius final
{
public:
	struct FVector                                BluezonePosition;                                  // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         BluezoneRadius;                                    // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslGameState*                          CallFunc_GetTslGameState_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius) == 0x000038, "Wrong size on BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius, BluezonePosition) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius::BluezonePosition' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius, BluezoneRadius) == 0x00000C, "Member 'BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius::BluezoneRadius' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius, CallFunc_GetTslGameState_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius::CallFunc_GetTslGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius, CallFunc_BreakVector_X) == 0x00001C, "Member 'BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius, CallFunc_BreakVector_Y) == 0x000020, "Member 'BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius, CallFunc_BreakVector_Z) == 0x000024, "Member 'BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius, CallFunc_MakeVector_ReturnValue) == 0x000028, "Member 'BlueZoneGpsWidget_Base_C_GetBluezonePositionAndRadius::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetSafeLength
// 0x0090 (0x0090 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetSafeLength final
{
public:
	float                                         SafeLength_0;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                A;                                                 // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                B;                                                 // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetNextPlayzonePosition_BluezoneGPS_ReturnValue; // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetNextPlayzoneRadius_BluezoneGPS_ReturnValue; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetBluezoneRadius_ReturnValue;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetBluezonePosition_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LineSphereIntersection_Intersection1;     // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LineSphereIntersection_Intersection2;     // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LineSphereIntersection_ReturnValue;       // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_LineSphereIntersection_Intersection12;    // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LineSphereIntersection_Intersection22;    // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LineSphereIntersection_ReturnValue2;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                NextPlayzonePositoin;                              // 0x0084(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetSafeLength) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetSafeLength");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetSafeLength) == 0x000090, "Wrong size on BlueZoneGpsWidget_Base_C_GetSafeLength");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, SafeLength_0) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::SafeLength_0' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, A) == 0x000004, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::A' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, B) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::B' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_GetNextPlayzonePosition_BluezoneGPS_ReturnValue) == 0x00001C, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_GetNextPlayzonePosition_BluezoneGPS_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_GetNextPlayzoneRadius_BluezoneGPS_ReturnValue) == 0x000028, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_GetNextPlayzoneRadius_BluezoneGPS_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_GetBluezoneRadius_ReturnValue) == 0x00002C, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_GetBluezoneRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_GetBluezonePosition_ReturnValue) == 0x000030, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_GetBluezonePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_LineSphereIntersection_Intersection1) == 0x00003C, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_LineSphereIntersection_Intersection1' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_LineSphereIntersection_Intersection2) == 0x000048, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_LineSphereIntersection_Intersection2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_LineSphereIntersection_ReturnValue) == 0x000054, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_LineSphereIntersection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_LineSphereIntersection_Intersection12) == 0x000058, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_LineSphereIntersection_Intersection12' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_LineSphereIntersection_Intersection22) == 0x000064, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_LineSphereIntersection_Intersection22' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_LineSphereIntersection_ReturnValue2) == 0x000070, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_LineSphereIntersection_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000074, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, CallFunc_VSize_ReturnValue) == 0x000080, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetSafeLength, NextPlayzonePositoin) == 0x000084, "Member 'BlueZoneGpsWidget_Base_C_GetSafeLength::NextPlayzonePositoin' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetNextPlayerzoneToCharacterDirection
// 0x0088 (0x0088 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Direction;                                         // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ACharacter*                             CallFunc_GetTslCharacter_Character;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetNextPlayzonePositionBp_NextPlayzonePosition; // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LocalPositionToServer_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslCharacter*                          Character;                                         // 0x0080(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection) == 0x000088, "Wrong size on BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, Scale) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::Scale' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, Direction) == 0x000004, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::Direction' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_GetTslCharacter_Character) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_GetTslCharacter_Character' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_GetNextPlayzonePositionBp_NextPlayzonePosition) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_GetNextPlayzonePositionBp_NextPlayzonePosition' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_LocalPositionToServer_ReturnValue) == 0x000034, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_LocalPositionToServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_BreakVector_X) == 0x00004C, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_BreakVector_Y) == 0x000050, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_BreakVector_Z) == 0x000054, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_Normal_ReturnValue) == 0x000064, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000070, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection, Character) == 0x000080, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCharacterDirection::Character' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetPlayerLength
// 0x0058 (0x0058 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetPlayerLength final
{
public:
	float                                         PlayerLength_0;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetTslCharacter_Character;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LocalPositionToServer_ReturnValue;        // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetPlayerLength) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetPlayerLength");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetPlayerLength) == 0x000058, "Wrong size on BlueZoneGpsWidget_Base_C_GetPlayerLength");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, PlayerLength_0) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::PlayerLength_0' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, CallFunc_GetTslCharacter_Character) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::CallFunc_GetTslCharacter_Character' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, CallFunc_LocalPositionToServer_ReturnValue) == 0x000020, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::CallFunc_LocalPositionToServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00002C, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, CallFunc_BreakVector_X) == 0x000038, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, CallFunc_BreakVector_Y) == 0x00003C, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, CallFunc_BreakVector_Z) == 0x000040, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetPlayerLength, CallFunc_VSize_ReturnValue) == 0x000050, "Member 'BlueZoneGpsWidget_Base_C_GetPlayerLength::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetNextPlayerzoneToCurrentBlueZoneLength
// 0x0040 (0x0040 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetDangerLength_DangerLength;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetDangerLength_A;                        // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetDangerLength_B;                        // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetSafeLength_SafeLength;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSafeLength_A;                          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSafeLength_B;                          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength) == 0x000040, "Wrong size on BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength, Length) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength::Length' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength, CallFunc_GetDangerLength_DangerLength) == 0x000004, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength::CallFunc_GetDangerLength_DangerLength' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength, CallFunc_GetDangerLength_A) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength::CallFunc_GetDangerLength_A' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength, CallFunc_GetDangerLength_B) == 0x000014, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength::CallFunc_GetDangerLength_B' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength, CallFunc_GetSafeLength_SafeLength) == 0x000020, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength::CallFunc_GetSafeLength_SafeLength' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength, CallFunc_GetSafeLength_A) == 0x000024, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength::CallFunc_GetSafeLength_A' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength, CallFunc_GetSafeLength_B) == 0x000030, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength::CallFunc_GetSafeLength_B' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayerzoneToCurrentBlueZoneLength::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.IsInNextPlayzoneBp
// 0x0050 (0x0050 - 0x0000)
struct BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp final
{
public:
	bool                                          bIsIn;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetNextPlayzonePositionBp_NextPlayzonePosition; // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ACharacter*                             CallFunc_GetTslCharacter_Character;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetNextplayzoneRadiusBp_NextplayzoneRadius; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LocalPositionToServer_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp) == 0x000050, "Wrong size on BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp, bIsIn) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp::bIsIn' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp, CallFunc_GetNextPlayzonePositionBp_NextPlayzonePosition) == 0x000004, "Member 'BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp::CallFunc_GetNextPlayzonePositionBp_NextPlayzonePosition' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp, CallFunc_GetTslCharacter_Character) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp::CallFunc_GetTslCharacter_Character' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp, CallFunc_GetNextplayzoneRadiusBp_NextplayzoneRadius) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp::CallFunc_GetNextplayzoneRadiusBp_NextplayzoneRadius' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp, CallFunc_LocalPositionToServer_ReturnValue) == 0x00002C, "Member 'BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp::CallFunc_LocalPositionToServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000038, "Member 'BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp, CallFunc_VSize_ReturnValue) == 0x000044, "Member 'BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000048, "Member 'BlueZoneGpsWidget_Base_C_IsInNextPlayzoneBp::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetIsInNextPlayzone
// 0x0048 (0x0048 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           m__struct_Variable;                                // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           m__struct_Variable2;                               // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInNextPlayzone_ReturnValue;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone) == 0x000048, "Wrong size on BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone, ReturnValue) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone::ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone, m__bool_Variable) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone, m__struct_Variable) == 0x000014, "Member 'BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone::m__struct_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone, m__struct_Variable2) == 0x000024, "Member 'BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone::m__struct_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone, CallFunc_IsInNextPlayzone_ReturnValue) == 0x000034, "Member 'BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone::CallFunc_IsInNextPlayzone_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone, K2Node_Select_Default) == 0x000038, "Member 'BlueZoneGpsWidget_Base_C_GetIsInNextPlayzone::K2Node_Select_Default' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.BluezoneGpsMainPrepass
// 0x00A0 (0x00A0 - 0x0000)
struct BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInNextPlayzone_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWarning_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBluezoneGpsState_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue2;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBluezoneGpsReset_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslSpectatorPawn*                      CallFunc_GetTslSpectatorPawn_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EObserverCameraMode                           CallFunc_GetCameraMode_ReturnValue;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerLength_PlayerLength;             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSafeLength_SafeLength;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSafeLength_A;                          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSafeLength_B;                          // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDangerLength_DangerLength;             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetDangerLength_A;                        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetDangerLength_B;                        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCurrentPlayzonePositionAndRadius_CurrentPlayzonePosition; // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCurrentPlayzonePositionAndRadius_CurrentPlayzoneRadius; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetNextPlayerzoneToCharacterDirection_Direction; // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass) == 0x0000A0, "Wrong size on BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, BoundWidget) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::BoundWidget' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_IsInNextPlayzone_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_IsInNextPlayzone_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000009, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, m__bool_Variable) == 0x00000A, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_IsWarning_ReturnValue) == 0x00000B, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_IsWarning_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, m__byte_Variable) == 0x00000C, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetBluezoneGpsState_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetBluezoneGpsState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x000014, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_EqualEqual_IntInt_ReturnValue2) == 0x000019, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_EqualEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_IsBluezoneGpsReset_ReturnValue) == 0x00001A, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_IsBluezoneGpsReset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_BooleanOR_ReturnValue) == 0x00001B, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_SelectFloat_ReturnValue) == 0x00001C, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, m__byte_Variable2) == 0x000020, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetTslSpectatorPawn_ReturnValue) == 0x000028, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetTslSpectatorPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetCameraMode_ReturnValue) == 0x000038, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetCameraMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetPlayerLength_PlayerLength) == 0x00003C, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetPlayerLength_PlayerLength' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000040, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetSafeLength_SafeLength) == 0x000044, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetSafeLength_SafeLength' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetSafeLength_A) == 0x000048, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetSafeLength_A' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetSafeLength_B) == 0x000054, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetSafeLength_B' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, K2Node_Select_Default) == 0x000060, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetDangerLength_DangerLength) == 0x000064, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetDangerLength_DangerLength' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetDangerLength_A) == 0x000068, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetDangerLength_A' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetDangerLength_B) == 0x000074, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetDangerLength_B' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetCurrentPlayzonePositionAndRadius_CurrentPlayzonePosition) == 0x000080, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetCurrentPlayzonePositionAndRadius_CurrentPlayzonePosition' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetCurrentPlayzonePositionAndRadius_CurrentPlayzoneRadius) == 0x00008C, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetCurrentPlayzonePositionAndRadius_CurrentPlayzoneRadius' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000090, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass, CallFunc_GetNextPlayerzoneToCharacterDirection_Direction) == 0x000094, "Member 'BlueZoneGpsWidget_Base_C_BluezoneGpsMainPrepass::CallFunc_GetNextPlayerzoneToCharacterDirection_Direction' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.UpdateGauge
// 0x0014 (0x0014 - 0x0000)
struct BlueZoneGpsWidget_Base_C_UpdateGauge final
{
public:
	bool                                          CallFunc_IsBluezoneGpsReset_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBluezoneGpsState_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue2;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_UpdateGauge) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Base_C_UpdateGauge");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_UpdateGauge) == 0x000014, "Wrong size on BlueZoneGpsWidget_Base_C_UpdateGauge");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_UpdateGauge, CallFunc_IsBluezoneGpsReset_ReturnValue) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_UpdateGauge::CallFunc_IsBluezoneGpsReset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_UpdateGauge, CallFunc_GetBluezoneGpsState_ReturnValue) == 0x000004, "Member 'BlueZoneGpsWidget_Base_C_UpdateGauge::CallFunc_GetBluezoneGpsState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_UpdateGauge, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_UpdateGauge::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_UpdateGauge, CallFunc_EqualEqual_IntInt_ReturnValue2) == 0x000009, "Member 'BlueZoneGpsWidget_Base_C_UpdateGauge::CallFunc_EqualEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_UpdateGauge, CallFunc_BooleanOR_ReturnValue) == 0x00000A, "Member 'BlueZoneGpsWidget_Base_C_UpdateGauge::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_UpdateGauge, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x00000C, "Member 'BlueZoneGpsWidget_Base_C_UpdateGauge::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_UpdateGauge, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_UpdateGauge::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.SetBluezoneReset
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_SetBluezoneReset final
{
public:
	bool                                          bNewBluezoneReset;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_SetBluezoneReset) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_SetBluezoneReset");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_SetBluezoneReset) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_SetBluezoneReset");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetBluezoneReset, bNewBluezoneReset) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_SetBluezoneReset::bNewBluezoneReset' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetBluezoneReset, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_SetBluezoneReset::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetBluezoneReset, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_SetBluezoneReset::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.SetPlayzoneReset
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_SetPlayzoneReset final
{
public:
	bool                                          bNewPlayzoneReset;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_SetPlayzoneReset) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_SetPlayzoneReset");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_SetPlayzoneReset) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_SetPlayzoneReset");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetPlayzoneReset, bNewPlayzoneReset) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_SetPlayzoneReset::bNewPlayzoneReset' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetPlayzoneReset, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_SetPlayzoneReset::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetPlayzoneReset, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_SetPlayzoneReset::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.SetResetTimeCheck
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_SetResetTimeCheck final
{
public:
	float                                         ResetTimeCheck;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_SetResetTimeCheck) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_SetResetTimeCheck");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_SetResetTimeCheck) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_SetResetTimeCheck");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetResetTimeCheck, ResetTimeCheck) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_SetResetTimeCheck::ResetTimeCheck' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetResetTimeCheck, Result) == 0x000004, "Member 'BlueZoneGpsWidget_Base_C_SetResetTimeCheck::Result' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetResetTimeCheck, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_SetResetTimeCheck::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetResetTimeCheck, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_SetResetTimeCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.SetReset
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_SetReset final
{
public:
	bool                                          bReset;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_SetReset) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_SetReset");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_SetReset) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_SetReset");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetReset, bReset) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_SetReset::bReset' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetReset, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_SetReset::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_SetReset, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_SetReset::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.TickWaning
// 0x0001 (0x0001 - 0x0000)
struct BlueZoneGpsWidget_Base_C_TickWaning final
{
public:
	bool                                          CallFunc_IsWarning_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_TickWaning) == 0x000001, "Wrong alignment on BlueZoneGpsWidget_Base_C_TickWaning");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_TickWaning) == 0x000001, "Wrong size on BlueZoneGpsWidget_Base_C_TickWaning");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_TickWaning, CallFunc_IsWarning_ReturnValue) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_TickWaning::CallFunc_IsWarning_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetTslCharacter
// 0x0020 (0x0020 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetTslCharacter final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslCharacter*                          CallFunc_GetViewTargetTslCharacter_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetTslCharacter) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetTslCharacter");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetTslCharacter) == 0x000020, "Wrong size on BlueZoneGpsWidget_Base_C_GetTslCharacter");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetTslCharacter, Character) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetTslCharacter::Character' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetTslCharacter, CallFunc_GetOwningTslPlayerController_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_GetTslCharacter::CallFunc_GetOwningTslPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetTslCharacter, CallFunc_GetViewTargetTslCharacter_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetTslCharacter::CallFunc_GetViewTargetTslCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetTslCharacter, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_GetTslCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetBluezoneTimeText
// 0x0180 (0x0180 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetBluezoneTimeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	bool                                          m__bool_Variable;                                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBluezoneGpsState_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetBluezoneWarningTime_ReturnValue;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue2;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0040(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue2;              // 0x0058(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0070(0x0040)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Percent_IntInt_ReturnValue2;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue3;              // 0x00B8(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue4;              // 0x00D0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData2;             // 0x00E8(0x0040)()
	int32                                         CallFunc_Divide_IntInt_ReturnValue2;               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0130(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_Greater_IntInt_ReturnValue2;              // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0148(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0160(0x0018)()
	int32                                         BluezoneWarningTime;                               // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetBluezoneTimeText");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText) == 0x000180, "Wrong size on BlueZoneGpsWidget_Base_C_GetBluezoneTimeText");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, ReturnValue) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, m__bool_Variable) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_GetBluezoneGpsState_ReturnValue) == 0x00001C, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_GetBluezoneGpsState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_GetBluezoneWarningTime_ReturnValue) == 0x000020, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_GetBluezoneWarningTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Subtract_IntInt_ReturnValue) == 0x000024, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_FFloor_ReturnValue) == 0x000030, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_EqualEqual_IntInt_ReturnValue2) == 0x000034, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_EqualEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Divide_IntInt_ReturnValue) == 0x000038, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Percent_IntInt_ReturnValue) == 0x00003C, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Conv_IntToText_ReturnValue) == 0x000040, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Conv_IntToText_ReturnValue2) == 0x000058, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Conv_IntToText_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, K2Node_MakeStruct_FormatArgumentData) == 0x000070, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Greater_IntInt_ReturnValue) == 0x0000B0, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Percent_IntInt_ReturnValue2) == 0x0000B4, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Percent_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Conv_IntToText_ReturnValue3) == 0x0000B8, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Conv_IntToText_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Conv_IntToText_ReturnValue4) == 0x0000D0, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Conv_IntToText_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, K2Node_MakeStruct_FormatArgumentData2) == 0x0000E8, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::K2Node_MakeStruct_FormatArgumentData2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Divide_IntInt_ReturnValue2) == 0x000128, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Divide_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, K2Node_MakeArray_Array) == 0x000130, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Greater_IntInt_ReturnValue2) == 0x000140, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Greater_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, CallFunc_Format_ReturnValue) == 0x000148, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, K2Node_Select_Default) == 0x000160, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneTimeText, BluezoneWarningTime) == 0x000178, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneTimeText::BluezoneWarningTime' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.IsStateBluezoneReady
// 0x000C (0x000C - 0x0000)
struct BlueZoneGpsWidget_Base_C_IsStateBluezoneReady final
{
public:
	bool                                          IsReady;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBluezoneGpsState_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_IsStateBluezoneReady) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Base_C_IsStateBluezoneReady");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_IsStateBluezoneReady) == 0x00000C, "Wrong size on BlueZoneGpsWidget_Base_C_IsStateBluezoneReady");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsStateBluezoneReady, IsReady) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_IsStateBluezoneReady::IsReady' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsStateBluezoneReady, CallFunc_GetBluezoneGpsState_ReturnValue) == 0x000004, "Member 'BlueZoneGpsWidget_Base_C_IsStateBluezoneReady::CallFunc_GetBluezoneGpsState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsStateBluezoneReady, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_IsStateBluezoneReady::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetBluezoneStateBp
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetBluezoneStateBp final
{
public:
	int32                                         Stae;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetBluezoneStateBp) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetBluezoneStateBp");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetBluezoneStateBp) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_GetBluezoneStateBp");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneStateBp, Stae) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneStateBp::Stae' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneStateBp, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneStateBp::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetBluezoneStateBp, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetBluezoneStateBp::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetNextPlayzonePositionBp
// 0x0020 (0x0020 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp final
{
public:
	struct FVector                                NextPlayzonePosition;                              // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp) == 0x000020, "Wrong size on BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp, NextPlayzonePosition) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp::NextPlayzonePosition' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp, CallFunc_GetTslHUD_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_GetNextPlayzonePositionBp::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetNextplayzoneRadiusBp
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp final
{
public:
	float                                         NextPlayzoneRadius;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp, NextPlayzoneRadius) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp::NextPlayzoneRadius' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetNextplayzoneRadiusBp::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.IsResetBp
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_IsResetBp final
{
public:
	bool                                          bReset;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_IsResetBp) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_IsResetBp");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_IsResetBp) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_IsResetBp");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsResetBp, bReset) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_IsResetBp::bReset' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsResetBp, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_IsResetBp::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsResetBp, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_IsResetBp::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetCurrentPlayZonePosition
// 0x0020 (0x0020 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition final
{
public:
	struct FVector                                CurrentPlayzonePosition;                           // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition) == 0x000020, "Wrong size on BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition, CurrentPlayzonePosition) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition::CurrentPlayzonePosition' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition, CallFunc_GetTslHUD_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayZonePosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetCurrentPlayZoneRadius
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius final
{
public:
	float                                         CurrentPlayzoneRadius;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius, CurrentPlayzoneRadius) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius::CurrentPlayzoneRadius' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetCurrentPlayZoneRadius::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.IsBluezoneReset
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_IsBluezoneReset final
{
public:
	bool                                          bBluezoneReset;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_IsBluezoneReset) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_IsBluezoneReset");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_IsBluezoneReset) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_IsBluezoneReset");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsBluezoneReset, bBluezoneReset) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_IsBluezoneReset::bBluezoneReset' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsBluezoneReset, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_IsBluezoneReset::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsBluezoneReset, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_IsBluezoneReset::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.IsPlayzoneReset
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_IsPlayzoneReset final
{
public:
	bool                                          bReset;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_IsPlayzoneReset) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_IsPlayzoneReset");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_IsPlayzoneReset) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_IsPlayzoneReset");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsPlayzoneReset, bReset) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_IsPlayzoneReset::bReset' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsPlayzoneReset, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_IsPlayzoneReset::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsPlayzoneReset, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_IsPlayzoneReset::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.GetResetTimeCheck
// 0x0018 (0x0018 - 0x0000)
struct BlueZoneGpsWidget_Base_C_GetResetTimeCheck final
{
public:
	float                                         ResetTimeCheck;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_GetResetTimeCheck) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_GetResetTimeCheck");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_GetResetTimeCheck) == 0x000018, "Wrong size on BlueZoneGpsWidget_Base_C_GetResetTimeCheck");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetResetTimeCheck, ResetTimeCheck) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_GetResetTimeCheck::ResetTimeCheck' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetResetTimeCheck, CallFunc_GetTslHUD_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_GetResetTimeCheck::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_GetResetTimeCheck, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_GetResetTimeCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Base.BlueZoneGpsWidget_Base_C.IsWarningBp
// 0x0050 (0x0050 - 0x0000)
struct BlueZoneGpsWidget_Base_C_IsWarningBp final
{
public:
	bool                                          bIsWarning;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetTslCharacter_Character;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetBluezoneRadius_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LocalPositionToServer_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetBluezonePosition_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Base_C_IsWarningBp) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Base_C_IsWarningBp");
static_assert(sizeof(BlueZoneGpsWidget_Base_C_IsWarningBp) == 0x000050, "Wrong size on BlueZoneGpsWidget_Base_C_IsWarningBp");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsWarningBp, bIsWarning) == 0x000000, "Member 'BlueZoneGpsWidget_Base_C_IsWarningBp::bIsWarning' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsWarningBp, CallFunc_GetTslCharacter_Character) == 0x000008, "Member 'BlueZoneGpsWidget_Base_C_IsWarningBp::CallFunc_GetTslCharacter_Character' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsWarningBp, CallFunc_GetBluezoneRadius_ReturnValue) == 0x000010, "Member 'BlueZoneGpsWidget_Base_C_IsWarningBp::CallFunc_GetBluezoneRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsWarningBp, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BlueZoneGpsWidget_Base_C_IsWarningBp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsWarningBp, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Base_C_IsWarningBp::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsWarningBp, CallFunc_LocalPositionToServer_ReturnValue) == 0x000024, "Member 'BlueZoneGpsWidget_Base_C_IsWarningBp::CallFunc_LocalPositionToServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsWarningBp, CallFunc_GetBluezonePosition_ReturnValue) == 0x000030, "Member 'BlueZoneGpsWidget_Base_C_IsWarningBp::CallFunc_GetBluezonePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsWarningBp, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00003C, "Member 'BlueZoneGpsWidget_Base_C_IsWarningBp::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsWarningBp, CallFunc_VSize_ReturnValue) == 0x000048, "Member 'BlueZoneGpsWidget_Base_C_IsWarningBp::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Base_C_IsWarningBp, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'BlueZoneGpsWidget_Base_C_IsWarningBp::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

