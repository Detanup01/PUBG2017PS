#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventoryWidget

#include "Basic.hpp"

#include "InputHookingWidget_classes.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass InventoryWidget.InventoryWidget_C
// 0x0200 (0x0490 - 0x0290)
class UInventoryWidget_C final : public UInputHookingWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       XBoxHelpTextBlinking;                              // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       InventoryFadeOut;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       InventoryFadeIn;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       VicinityTitleOnBlinking;                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       VicinityTitleOffBlinking;                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       VicinityTitleOn;                                   // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       VicinityTitleOff;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             A_ButtonHelpText;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             B_ButtonHelpText;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UInventoryListBaseWidget_C*             Backpack;                                          // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USizeBox*                               Backpack_SizeBox;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                Border_1;                                          // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButton*                                btn_time;                                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButton*                                btn_type;                                          // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UHorizontalBox*                         ButonAHelpBox;                                     // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButton*                                Button_0;                                          // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButton*                                Button_1;                                          // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UHorizontalBox*                         ButtonBHelpBox;                                    // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UEquipmentWidget_C*                     Character;                                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USizeBox*                               CharacterSizeBox;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UConsolGuideWidget_C*                   GamepadGuide;                                      // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_0;                                           // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_1;                                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 OptionalImage;                                     // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                SortingButtonListBorder;                           // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             TextTime;                                          // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             TextType;                                          // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             UserIDText;                                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 VerticalLine;                                      // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UInventoryListBaseWidget_C*             Vicinity;                                          // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USizeBox*                               Vicinity_SizeBox;                                  // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWeaponEquipmentWidget_C*               Weapon;                                            // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USizeBox*                               Weapon_SizeBox;                                    // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class AItemExplorer*                          ItemExplorer;                                      // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UDragDropOperation*                     DragDroppingContent;                               // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UItem*                                  DragDroppingItem;                                  // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          wasVicinityEmpty;                                  // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          willDropToVicinity;                                // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA[0x6];                                      // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISlotInterface>        MouseOverSlot;                                     // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class ISlotContainerInterface> SlotContainer;                                     // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UItem*                                  MouseOverItem;                                     // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UEquipableItem*                         MouseOverEquipableItem;                            // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAttachableItem*                        MouseOverAttachmentItem;                           // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateColor                            SelectColor;                                       // 0x03F8(0x0028)(Edit, BlueprintVisible)
	struct FSlateColor                            DefaultColor;                                      // 0x0420(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SelectIndex;                                       // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUserWidget*>                    FocusableWidgetLis;                                // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bLeft;                                             // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bright;                                            // 0x0461(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUp;                                               // 0x0462(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDown;                                             // 0x0463(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         MoveState;                                         // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LeftMoveTimeCheck;                                 // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RightMoveTimeCheck;                                // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         UpMoveTimeCheck;                                   // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DownMoveTimeCheck;                                 // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LeftTimeInterval;                                  // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RightTimeInterval;                                 // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         UpTimeInterval;                                    // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DownTimeInterval;                                  // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAttachableItem*                        GamepadadSelectedAttachableItem;                   // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_InventoryWidget(int32 EntryPoint);
	void CustomEvent_0();
	void OnWidgetInputRT();
	void OnWidgetInputLT();
	void OnInventoryUpdated();
	void OnInteract();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void BndEvt__VicinityTitleOn_K2Node_ComponentBoundEvent_0_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature();
	void BndEvt__VicinityTitleOff_K2Node_ComponentBoundEvent_1_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature();
	void OnEquipmentUpdated();
	void OnItemExplorerProxyUpdated();
	void MoveTick(float DeltaTime);
	void OnDownRelease();
	void OnUpRelease();
	void OnRightRelease();
	void OnLeftRelease();
	void BndEvt__Vicinity_K2Node_ComponentBoundEvent_115_RefreshFocus__DelegateSignature();
	void BndEvt__Weapon_K2Node_ComponentBoundEvent_105_RefreshFocus__DelegateSignature();
	void BndEvt__Backpack_K2Node_ComponentBoundEvent_72_RefreshFocus__DelegateSignature();
	void BndEvt__Character_K2Node_ComponentBoundEvent_88_RefreshFocus__DelegateSignature();
	void OnInputRT();
	void OnInputRB();
	void Destruct();
	void OnWidgetInputY();
	void OnWidgetInputX();
	void OnWidgetInputB();
	void OnWidgetInputA();
	void OnDown();
	void OnUp();
	void OnRight();
	void OnLeft();
	void BndEvt__btn_type_K2Node_ComponentBoundEvent_34_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__btn_time_K2Node_ComponentBoundEvent_12_OnButtonClickedEvent__DelegateSignature();
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnItemSlotFocus(TScriptInterface<class ISlotInterface> Slot_0, TScriptInterface<class ISlotContainerInterface> SlotContainer_0);
	void OnReleased();
	void OnPressed();
	void Construct();
	void BndEvt__Backpack_K2Node_ComponentBoundEvent_40_OnChildSlotFocus__DelegateSignature(TScriptInterface<class ISlotInterface> Slot_0, TScriptInterface<class ISlotContainerInterface> SlotContainer_0);
	void BndEvt__Vicinity_K2Node_ComponentBoundEvent_36_OnChildSlotFocus__DelegateSignature(TScriptInterface<class ISlotInterface> Slot_0, TScriptInterface<class ISlotContainerInterface> SlotContainer_0);
	void InitializeWidget(const TDelegate<void()>& OnInventoryUpdated, const TDelegate<void()>& OnEquipmentUpdated, TDelegate<void()> OnUpdateItemList, const TDelegate<void(TScriptInterface<class ISlotInterface> Slot, TScriptInterface<class ISlotContainerInterface> SlotContainer)>& OnItemSlotFocus);
	void FinalizeWidget(const TDelegate<void()>& OnInventoryUpdated, const TDelegate<void()>& OnEquipmentUpdated);
	void UpdateDragDroppingObject(class UWidget* BoundWidget);
	void NewFunction_0();
	void On_VicinityInfoBlock_Prepass_0(class UWidget* BoundWidget);
	void PlayFadeInAnim(float Playback_Speed);
	void GetMouseOverItem(TScriptInterface<class ISlotInterface>* Slot_0, TScriptInterface<class ISlotContainerInterface>* Container, class UItem** Item, class UEquipableItem** EquipableItem, class UAttachableItem** AttachableItem);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void On_TextType_Prepass_0(class UWidget* BoundWidget);
	void On_TextTime_Prepass_0(class UWidget* BoundWidget);
	void On_SortingButtonListBorder_Prepass_0(class UWidget* BoundWidget);
	void OnPrepass_0(class UWidget* BoundWidget);
	void OnChildWidgetRefresh();
	void On_XBoxHelpTextBorder_Prepass_0(class UWidget* BoundWidget);
	void OnPrepass_1(class UWidget* BoundWidget);
	bool Up();
	bool Right();
	bool Left();
	bool Down();
	bool SetFocus(bool NewFocus);
	bool InputY();
	bool InputX();
	bool InputB();
	bool InputA();
	bool InputRT();
	bool InputRB();
	bool InputLT();
	bool InputLB();

	void GetLeftFocusableIndex(int32* Index_0) const;
	void GeRightFocusableIndex(int32* Index_0) const;
	void GetFirstFocusableChildWidgetIndex(int32* Index_0) const;
	bool IsFocus() const;
	class UUserWidget* GetUpWidget() const;
	class UUserWidget* GetRightWidget() const;
	class UUserWidget* GetLeftWidget() const;
	class UUserWidget* GetDownWidget() const;
	class UUserWidget* GetFocusingChildWidget() const;
	bool IsFocusable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"InventoryWidget_C">();
	}
	static class UInventoryWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventoryWidget_C>();
	}
};
static_assert(alignof(UInventoryWidget_C) == 0x000008, "Wrong alignment on UInventoryWidget_C");
static_assert(sizeof(UInventoryWidget_C) == 0x000490, "Wrong size on UInventoryWidget_C");
static_assert(offsetof(UInventoryWidget_C, UberGraphFrame) == 0x000290, "Member 'UInventoryWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, XBoxHelpTextBlinking) == 0x000298, "Member 'UInventoryWidget_C::XBoxHelpTextBlinking' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, InventoryFadeOut) == 0x0002A0, "Member 'UInventoryWidget_C::InventoryFadeOut' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, InventoryFadeIn) == 0x0002A8, "Member 'UInventoryWidget_C::InventoryFadeIn' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, VicinityTitleOnBlinking) == 0x0002B0, "Member 'UInventoryWidget_C::VicinityTitleOnBlinking' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, VicinityTitleOffBlinking) == 0x0002B8, "Member 'UInventoryWidget_C::VicinityTitleOffBlinking' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, VicinityTitleOn) == 0x0002C0, "Member 'UInventoryWidget_C::VicinityTitleOn' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, VicinityTitleOff) == 0x0002C8, "Member 'UInventoryWidget_C::VicinityTitleOff' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, A_ButtonHelpText) == 0x0002D0, "Member 'UInventoryWidget_C::A_ButtonHelpText' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, B_ButtonHelpText) == 0x0002D8, "Member 'UInventoryWidget_C::B_ButtonHelpText' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Backpack) == 0x0002E0, "Member 'UInventoryWidget_C::Backpack' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Backpack_SizeBox) == 0x0002E8, "Member 'UInventoryWidget_C::Backpack_SizeBox' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Border_1) == 0x0002F0, "Member 'UInventoryWidget_C::Border_1' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, btn_time) == 0x0002F8, "Member 'UInventoryWidget_C::btn_time' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, btn_type) == 0x000300, "Member 'UInventoryWidget_C::btn_type' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, ButonAHelpBox) == 0x000308, "Member 'UInventoryWidget_C::ButonAHelpBox' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Button_0) == 0x000310, "Member 'UInventoryWidget_C::Button_0' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Button_1) == 0x000318, "Member 'UInventoryWidget_C::Button_1' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, ButtonBHelpBox) == 0x000320, "Member 'UInventoryWidget_C::ButtonBHelpBox' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Character) == 0x000328, "Member 'UInventoryWidget_C::Character' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, CharacterSizeBox) == 0x000330, "Member 'UInventoryWidget_C::CharacterSizeBox' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, GamepadGuide) == 0x000338, "Member 'UInventoryWidget_C::GamepadGuide' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Image_0) == 0x000340, "Member 'UInventoryWidget_C::Image_0' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Image_1) == 0x000348, "Member 'UInventoryWidget_C::Image_1' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, OptionalImage) == 0x000350, "Member 'UInventoryWidget_C::OptionalImage' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, SortingButtonListBorder) == 0x000358, "Member 'UInventoryWidget_C::SortingButtonListBorder' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, TextTime) == 0x000360, "Member 'UInventoryWidget_C::TextTime' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, TextType) == 0x000368, "Member 'UInventoryWidget_C::TextType' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, UserIDText) == 0x000370, "Member 'UInventoryWidget_C::UserIDText' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, VerticalLine) == 0x000378, "Member 'UInventoryWidget_C::VerticalLine' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Vicinity) == 0x000380, "Member 'UInventoryWidget_C::Vicinity' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Vicinity_SizeBox) == 0x000388, "Member 'UInventoryWidget_C::Vicinity_SizeBox' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Weapon) == 0x000390, "Member 'UInventoryWidget_C::Weapon' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, Weapon_SizeBox) == 0x000398, "Member 'UInventoryWidget_C::Weapon_SizeBox' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, ItemExplorer) == 0x0003A0, "Member 'UInventoryWidget_C::ItemExplorer' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, DragDroppingContent) == 0x0003A8, "Member 'UInventoryWidget_C::DragDroppingContent' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, DragDroppingItem) == 0x0003B0, "Member 'UInventoryWidget_C::DragDroppingItem' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, wasVicinityEmpty) == 0x0003B8, "Member 'UInventoryWidget_C::wasVicinityEmpty' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, willDropToVicinity) == 0x0003B9, "Member 'UInventoryWidget_C::willDropToVicinity' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, MouseOverSlot) == 0x0003C0, "Member 'UInventoryWidget_C::MouseOverSlot' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, SlotContainer) == 0x0003D0, "Member 'UInventoryWidget_C::SlotContainer' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, MouseOverItem) == 0x0003E0, "Member 'UInventoryWidget_C::MouseOverItem' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, MouseOverEquipableItem) == 0x0003E8, "Member 'UInventoryWidget_C::MouseOverEquipableItem' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, MouseOverAttachmentItem) == 0x0003F0, "Member 'UInventoryWidget_C::MouseOverAttachmentItem' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, SelectColor) == 0x0003F8, "Member 'UInventoryWidget_C::SelectColor' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, DefaultColor) == 0x000420, "Member 'UInventoryWidget_C::DefaultColor' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, SelectIndex) == 0x000448, "Member 'UInventoryWidget_C::SelectIndex' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, FocusableWidgetLis) == 0x000450, "Member 'UInventoryWidget_C::FocusableWidgetLis' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, bLeft) == 0x000460, "Member 'UInventoryWidget_C::bLeft' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, bright) == 0x000461, "Member 'UInventoryWidget_C::bright' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, bUp) == 0x000462, "Member 'UInventoryWidget_C::bUp' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, bDown) == 0x000463, "Member 'UInventoryWidget_C::bDown' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, MoveState) == 0x000464, "Member 'UInventoryWidget_C::MoveState' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, LeftMoveTimeCheck) == 0x000468, "Member 'UInventoryWidget_C::LeftMoveTimeCheck' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, RightMoveTimeCheck) == 0x00046C, "Member 'UInventoryWidget_C::RightMoveTimeCheck' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, UpMoveTimeCheck) == 0x000470, "Member 'UInventoryWidget_C::UpMoveTimeCheck' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, DownMoveTimeCheck) == 0x000474, "Member 'UInventoryWidget_C::DownMoveTimeCheck' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, LeftTimeInterval) == 0x000478, "Member 'UInventoryWidget_C::LeftTimeInterval' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, RightTimeInterval) == 0x00047C, "Member 'UInventoryWidget_C::RightTimeInterval' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, UpTimeInterval) == 0x000480, "Member 'UInventoryWidget_C::UpTimeInterval' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, DownTimeInterval) == 0x000484, "Member 'UInventoryWidget_C::DownTimeInterval' has a wrong offset!");
static_assert(offsetof(UInventoryWidget_C, GamepadadSelectedAttachableItem) == 0x000488, "Member 'UInventoryWidget_C::GamepadadSelectedAttachableItem' has a wrong offset!");

}

