#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueZoneGpsWidget_Circle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BlueZoneGpsWidget_Base_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BlueZoneGpsWidget_Circle.BlueZoneGpsWidget_Circle_C
// 0x0068 (0x02F0 - 0x0288)
class UBlueZoneGpsWidget_Circle_C final : public UBlueZoneGpsWidget_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BlueZoneGpsWidget_Circle_C;         // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       SafezoneDirectionVanishing;                        // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       SafezoneDirectionEmerging;                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       Bluezone_Out_Light;                                // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Background;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 BluezoneGauge;                                     // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 BluezoneLight;                                     // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_0;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                ImageBorder;                                       // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 WhitezoneGauge;                                    // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UMaterialInstanceDynamic*               WhitezoneGaugeMaterial;                            // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               BluezoneGaugeMaterial;                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LastPlayzoneGauge;                                 // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          isSafezoneDirectionVanishing;                      // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BlueZoneGpsWidget_Circle(int32 EntryPoint);
	void OnLeaveNextPlayzone();
	void OnEnterNextPlayzone();
	void OnWarning();
	void MainPrepassWidgetVisibilitySetting(class UWidget* BoundWidget);
	void ChildUpdateGauge(float Gauge);
	void Construct();
	void TickReset(float Time);
	void On_ImageBorder_Prepass_0(class UWidget* BoundWidget);
	void On_BluezoneLight_Prepass_0(class UWidget* BoundWidget);
	void SubPrepass(class UWidget* BoundWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BlueZoneGpsWidget_Circle_C">();
	}
	static class UBlueZoneGpsWidget_Circle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueZoneGpsWidget_Circle_C>();
	}
};
static_assert(alignof(UBlueZoneGpsWidget_Circle_C) == 0x000008, "Wrong alignment on UBlueZoneGpsWidget_Circle_C");
static_assert(sizeof(UBlueZoneGpsWidget_Circle_C) == 0x0002F0, "Wrong size on UBlueZoneGpsWidget_Circle_C");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, UberGraphFrame_BlueZoneGpsWidget_Circle_C) == 0x000288, "Member 'UBlueZoneGpsWidget_Circle_C::UberGraphFrame_BlueZoneGpsWidget_Circle_C' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, SafezoneDirectionVanishing) == 0x000290, "Member 'UBlueZoneGpsWidget_Circle_C::SafezoneDirectionVanishing' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, SafezoneDirectionEmerging) == 0x000298, "Member 'UBlueZoneGpsWidget_Circle_C::SafezoneDirectionEmerging' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, Bluezone_Out_Light) == 0x0002A0, "Member 'UBlueZoneGpsWidget_Circle_C::Bluezone_Out_Light' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, Background) == 0x0002A8, "Member 'UBlueZoneGpsWidget_Circle_C::Background' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, BluezoneGauge) == 0x0002B0, "Member 'UBlueZoneGpsWidget_Circle_C::BluezoneGauge' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, BluezoneLight) == 0x0002B8, "Member 'UBlueZoneGpsWidget_Circle_C::BluezoneLight' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, Image_0) == 0x0002C0, "Member 'UBlueZoneGpsWidget_Circle_C::Image_0' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, ImageBorder) == 0x0002C8, "Member 'UBlueZoneGpsWidget_Circle_C::ImageBorder' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, WhitezoneGauge) == 0x0002D0, "Member 'UBlueZoneGpsWidget_Circle_C::WhitezoneGauge' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, WhitezoneGaugeMaterial) == 0x0002D8, "Member 'UBlueZoneGpsWidget_Circle_C::WhitezoneGaugeMaterial' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, BluezoneGaugeMaterial) == 0x0002E0, "Member 'UBlueZoneGpsWidget_Circle_C::BluezoneGaugeMaterial' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, LastPlayzoneGauge) == 0x0002E8, "Member 'UBlueZoneGpsWidget_Circle_C::LastPlayzoneGauge' has a wrong offset!");
static_assert(offsetof(UBlueZoneGpsWidget_Circle_C, isSafezoneDirectionVanishing) == 0x0002EC, "Member 'UBlueZoneGpsWidget_Circle_C::isSafezoneDirectionVanishing' has a wrong offset!");

}

