#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerHeadWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function PlayerHeadWidget.PlayerHeadWidget_C.ExecuteUbergraph_PlayerHeadWidget
// 0x0078 (0x0078 - 0x0000)
struct PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0034)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Event_Pos_UC;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsHidden;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget");
static_assert(sizeof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget) == 0x000078, "Wrong size on PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, EntryPoint) == 0x000000, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, m__bool_Variable) == 0x000004, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, m__byte_Variable) == 0x000005, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, m__byte_Variable2) == 0x000006, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, K2Node_Event_MyGeometry) == 0x000008, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, K2Node_Event_Pos_UC) == 0x000040, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::K2Node_Event_Pos_UC' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, K2Node_Event_IsHidden) == 0x000048, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::K2Node_Event_IsHidden' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, CallFunc_BreakVector2D_X) == 0x00004C, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, K2Node_Select_Default) == 0x000054, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, CallFunc_Add_FloatFloat_ReturnValue) == 0x000058, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, CallFunc_MakeVector2D_ReturnValue) == 0x00005C, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000068, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget, CallFunc_MapRangeClamped_ReturnValue) == 0x000070, "Member 'PlayerHeadWidget_C_ExecuteUbergraph_PlayerHeadWidget::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.SetCharacterIconPosition_UC
// 0x000C (0x000C - 0x0000)
struct PlayerHeadWidget_C_SetCharacterIconPosition_UC final
{
public:
	struct FVector2D                              Pos_UC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHidden;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_SetCharacterIconPosition_UC) == 0x000004, "Wrong alignment on PlayerHeadWidget_C_SetCharacterIconPosition_UC");
static_assert(sizeof(PlayerHeadWidget_C_SetCharacterIconPosition_UC) == 0x00000C, "Wrong size on PlayerHeadWidget_C_SetCharacterIconPosition_UC");
static_assert(offsetof(PlayerHeadWidget_C_SetCharacterIconPosition_UC, Pos_UC) == 0x000000, "Member 'PlayerHeadWidget_C_SetCharacterIconPosition_UC::Pos_UC' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_SetCharacterIconPosition_UC, IsHidden) == 0x000008, "Member 'PlayerHeadWidget_C_SetCharacterIconPosition_UC::IsHidden' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.Tick
// 0x0038 (0x0038 - 0x0000)
struct PlayerHeadWidget_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0034)(Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_Tick) == 0x000004, "Wrong alignment on PlayerHeadWidget_C_Tick");
static_assert(sizeof(PlayerHeadWidget_C_Tick) == 0x000038, "Wrong size on PlayerHeadWidget_C_Tick");
static_assert(offsetof(PlayerHeadWidget_C_Tick, MyGeometry) == 0x000000, "Member 'PlayerHeadWidget_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_Tick, InDeltaTime) == 0x000034, "Member 'PlayerHeadWidget_C_Tick::InDeltaTime' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.UpdateHealthGauge
// 0x0010 (0x0010 - 0x0000)
struct PlayerHeadWidget_C_UpdateHealthGauge final
{
public:
	bool                                          CallFunc_IsGroggy_IsGroggy;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGroggy_IsGroggy2;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHealthPercent_Health;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetGroggyHealthPercent_GroggyHealth;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_UpdateHealthGauge) == 0x000004, "Wrong alignment on PlayerHeadWidget_C_UpdateHealthGauge");
static_assert(sizeof(PlayerHeadWidget_C_UpdateHealthGauge) == 0x000010, "Wrong size on PlayerHeadWidget_C_UpdateHealthGauge");
static_assert(offsetof(PlayerHeadWidget_C_UpdateHealthGauge, CallFunc_IsGroggy_IsGroggy) == 0x000000, "Member 'PlayerHeadWidget_C_UpdateHealthGauge::CallFunc_IsGroggy_IsGroggy' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_UpdateHealthGauge, CallFunc_IsGroggy_IsGroggy2) == 0x000001, "Member 'PlayerHeadWidget_C_UpdateHealthGauge::CallFunc_IsGroggy_IsGroggy2' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_UpdateHealthGauge, CallFunc_GetHealthPercent_Health) == 0x000004, "Member 'PlayerHeadWidget_C_UpdateHealthGauge::CallFunc_GetHealthPercent_Health' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_UpdateHealthGauge, CallFunc_GetGroggyHealthPercent_GroggyHealth) == 0x000008, "Member 'PlayerHeadWidget_C_UpdateHealthGauge::CallFunc_GetGroggyHealthPercent_GroggyHealth' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_UpdateHealthGauge, CallFunc_SelectFloat_ReturnValue) == 0x00000C, "Member 'PlayerHeadWidget_C_UpdateHealthGauge::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.GetGroggyHealthPercent
// 0x0010 (0x0010 - 0x0000)
struct PlayerHeadWidget_C_GetGroggyHealthPercent final
{
public:
	float                                         GroggyHealth;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_GetGroggyHealthPercent) == 0x000004, "Wrong alignment on PlayerHeadWidget_C_GetGroggyHealthPercent");
static_assert(sizeof(PlayerHeadWidget_C_GetGroggyHealthPercent) == 0x000010, "Wrong size on PlayerHeadWidget_C_GetGroggyHealthPercent");
static_assert(offsetof(PlayerHeadWidget_C_GetGroggyHealthPercent, GroggyHealth) == 0x000000, "Member 'PlayerHeadWidget_C_GetGroggyHealthPercent::GroggyHealth' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetGroggyHealthPercent, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'PlayerHeadWidget_C_GetGroggyHealthPercent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetGroggyHealthPercent, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x000008, "Member 'PlayerHeadWidget_C_GetGroggyHealthPercent::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetGroggyHealthPercent, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'PlayerHeadWidget_C_GetGroggyHealthPercent::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.GetHealthPercent
// 0x0010 (0x0010 - 0x0000)
struct PlayerHeadWidget_C_GetHealthPercent final
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_GetHealthPercent) == 0x000004, "Wrong alignment on PlayerHeadWidget_C_GetHealthPercent");
static_assert(sizeof(PlayerHeadWidget_C_GetHealthPercent) == 0x000010, "Wrong size on PlayerHeadWidget_C_GetHealthPercent");
static_assert(offsetof(PlayerHeadWidget_C_GetHealthPercent, Health) == 0x000000, "Member 'PlayerHeadWidget_C_GetHealthPercent::Health' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetHealthPercent, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'PlayerHeadWidget_C_GetHealthPercent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetHealthPercent, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x000008, "Member 'PlayerHeadWidget_C_GetHealthPercent::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetHealthPercent, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'PlayerHeadWidget_C_GetHealthPercent::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.IsGroggy
// 0x0003 (0x0003 - 0x0000)
struct PlayerHeadWidget_C_IsGroggy final
{
public:
	bool                                          IsGroggy_0;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGroggying_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_IsGroggy) == 0x000001, "Wrong alignment on PlayerHeadWidget_C_IsGroggy");
static_assert(sizeof(PlayerHeadWidget_C_IsGroggy) == 0x000003, "Wrong size on PlayerHeadWidget_C_IsGroggy");
static_assert(offsetof(PlayerHeadWidget_C_IsGroggy, IsGroggy_0) == 0x000000, "Member 'PlayerHeadWidget_C_IsGroggy::IsGroggy_0' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_IsGroggy, CallFunc_IsGroggying_ReturnValue) == 0x000001, "Member 'PlayerHeadWidget_C_IsGroggy::CallFunc_IsGroggying_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_IsGroggy, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'PlayerHeadWidget_C_IsGroggy::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.InitBoostGauge
// 0x0008 (0x0008 - 0x0000)
struct PlayerHeadWidget_C_InitBoostGauge final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_InitBoostGauge) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_InitBoostGauge");
static_assert(sizeof(PlayerHeadWidget_C_InitBoostGauge) == 0x000008, "Wrong size on PlayerHeadWidget_C_InitBoostGauge");
static_assert(offsetof(PlayerHeadWidget_C_InitBoostGauge, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'PlayerHeadWidget_C_InitBoostGauge::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.SetBoostGauge
// 0x0008 (0x0008 - 0x0000)
struct PlayerHeadWidget_C_SetBoostGauge final
{
public:
	float                                         BoostGauge;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_SetBoostGauge) == 0x000004, "Wrong alignment on PlayerHeadWidget_C_SetBoostGauge");
static_assert(sizeof(PlayerHeadWidget_C_SetBoostGauge) == 0x000008, "Wrong size on PlayerHeadWidget_C_SetBoostGauge");
static_assert(offsetof(PlayerHeadWidget_C_SetBoostGauge, BoostGauge) == 0x000000, "Member 'PlayerHeadWidget_C_SetBoostGauge::BoostGauge' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_SetBoostGauge, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x000004, "Member 'PlayerHeadWidget_C_SetBoostGauge::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.UpdateBoostGauge
// 0x0004 (0x0004 - 0x0000)
struct PlayerHeadWidget_C_UpdateBoostGauge final
{
public:
	float                                         CallFunc_GetBoostGauge_BoostGauge;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_UpdateBoostGauge) == 0x000004, "Wrong alignment on PlayerHeadWidget_C_UpdateBoostGauge");
static_assert(sizeof(PlayerHeadWidget_C_UpdateBoostGauge) == 0x000004, "Wrong size on PlayerHeadWidget_C_UpdateBoostGauge");
static_assert(offsetof(PlayerHeadWidget_C_UpdateBoostGauge, CallFunc_GetBoostGauge_BoostGauge) == 0x000000, "Member 'PlayerHeadWidget_C_UpdateBoostGauge::CallFunc_GetBoostGauge_BoostGauge' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.GetBoostGauge
// 0x0010 (0x0010 - 0x0000)
struct PlayerHeadWidget_C_GetBoostGauge final
{
public:
	float                                         BoostGauge;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_GetBoostGauge) == 0x000004, "Wrong alignment on PlayerHeadWidget_C_GetBoostGauge");
static_assert(sizeof(PlayerHeadWidget_C_GetBoostGauge) == 0x000010, "Wrong size on PlayerHeadWidget_C_GetBoostGauge");
static_assert(offsetof(PlayerHeadWidget_C_GetBoostGauge, BoostGauge) == 0x000000, "Member 'PlayerHeadWidget_C_GetBoostGauge::BoostGauge' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetBoostGauge, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'PlayerHeadWidget_C_GetBoostGauge::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetBoostGauge, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x000008, "Member 'PlayerHeadWidget_C_GetBoostGauge::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetBoostGauge, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'PlayerHeadWidget_C_GetBoostGauge::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.GetTslWeaponVisibility
// 0x0006 (0x0006 - 0x0000)
struct PlayerHeadWidget_C_GetTslWeaponVisibility final
{
public:
	ESlateVisibility                              Visible;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCurrentWeapon_bCurrentWeapon;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_GetTslWeaponVisibility) == 0x000001, "Wrong alignment on PlayerHeadWidget_C_GetTslWeaponVisibility");
static_assert(sizeof(PlayerHeadWidget_C_GetTslWeaponVisibility) == 0x000006, "Wrong size on PlayerHeadWidget_C_GetTslWeaponVisibility");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponVisibility, Visible) == 0x000000, "Member 'PlayerHeadWidget_C_GetTslWeaponVisibility::Visible' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponVisibility, m__bool_Variable) == 0x000001, "Member 'PlayerHeadWidget_C_GetTslWeaponVisibility::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponVisibility, m__byte_Variable) == 0x000002, "Member 'PlayerHeadWidget_C_GetTslWeaponVisibility::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponVisibility, m__byte_Variable2) == 0x000003, "Member 'PlayerHeadWidget_C_GetTslWeaponVisibility::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponVisibility, CallFunc_IsCurrentWeapon_bCurrentWeapon) == 0x000004, "Member 'PlayerHeadWidget_C_GetTslWeaponVisibility::CallFunc_IsCurrentWeapon_bCurrentWeapon' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponVisibility, K2Node_Select_Default) == 0x000005, "Member 'PlayerHeadWidget_C_GetTslWeaponVisibility::K2Node_Select_Default' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.On_WeaponImageSizeBox_Prepass_0
// 0x0010 (0x0010 - 0x0000)
struct PlayerHeadWidget_C_On_WeaponImageSizeBox_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetTslWeaponVisibility_Visible;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_On_WeaponImageSizeBox_Prepass_0) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_On_WeaponImageSizeBox_Prepass_0");
static_assert(sizeof(PlayerHeadWidget_C_On_WeaponImageSizeBox_Prepass_0) == 0x000010, "Wrong size on PlayerHeadWidget_C_On_WeaponImageSizeBox_Prepass_0");
static_assert(offsetof(PlayerHeadWidget_C_On_WeaponImageSizeBox_Prepass_0, BoundWidget) == 0x000000, "Member 'PlayerHeadWidget_C_On_WeaponImageSizeBox_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_WeaponImageSizeBox_Prepass_0, CallFunc_GetTslWeaponVisibility_Visible) == 0x000008, "Member 'PlayerHeadWidget_C_On_WeaponImageSizeBox_Prepass_0::CallFunc_GetTslWeaponVisibility_Visible' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.On_weaponImage_Prepass_0
// 0x0028 (0x0028 - 0x0000)
struct PlayerHeadWidget_C_On_weaponImage_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UImage*                                 K2Node_DynamicCast_AsImage;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_On_weaponImage_Prepass_0) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_On_weaponImage_Prepass_0");
static_assert(sizeof(PlayerHeadWidget_C_On_weaponImage_Prepass_0) == 0x000028, "Wrong size on PlayerHeadWidget_C_On_weaponImage_Prepass_0");
static_assert(offsetof(PlayerHeadWidget_C_On_weaponImage_Prepass_0, BoundWidget) == 0x000000, "Member 'PlayerHeadWidget_C_On_weaponImage_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_weaponImage_Prepass_0, K2Node_DynamicCast_AsImage) == 0x000008, "Member 'PlayerHeadWidget_C_On_weaponImage_Prepass_0::K2Node_DynamicCast_AsImage' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_weaponImage_Prepass_0, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'PlayerHeadWidget_C_On_weaponImage_Prepass_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_weaponImage_Prepass_0, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000018, "Member 'PlayerHeadWidget_C_On_weaponImage_Prepass_0::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_weaponImage_Prepass_0, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'PlayerHeadWidget_C_On_weaponImage_Prepass_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.UpdateIcon
// 0x0028 (0x0028 - 0x0000)
struct PlayerHeadWidget_C_UpdateIcon final
{
public:
	class ATslWeapon*                             CallFunc_GetCurrentWeapon_CurrentWeapon;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslWeapon*                             CallFunc_GetCurrentWeapon_CurrentWeapon2;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           CallFunc_GetTslWeaponColor_ReturnValue;            // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_UpdateIcon) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_UpdateIcon");
static_assert(sizeof(PlayerHeadWidget_C_UpdateIcon) == 0x000028, "Wrong size on PlayerHeadWidget_C_UpdateIcon");
static_assert(offsetof(PlayerHeadWidget_C_UpdateIcon, CallFunc_GetCurrentWeapon_CurrentWeapon) == 0x000000, "Member 'PlayerHeadWidget_C_UpdateIcon::CallFunc_GetCurrentWeapon_CurrentWeapon' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_UpdateIcon, CallFunc_GetCurrentWeapon_CurrentWeapon2) == 0x000008, "Member 'PlayerHeadWidget_C_UpdateIcon::CallFunc_GetCurrentWeapon_CurrentWeapon2' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_UpdateIcon, CallFunc_GetTslWeaponColor_ReturnValue) == 0x000010, "Member 'PlayerHeadWidget_C_UpdateIcon::CallFunc_GetTslWeaponColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_UpdateIcon, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'PlayerHeadWidget_C_UpdateIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_UpdateIcon, CallFunc_IsValid_ReturnValue2) == 0x000021, "Member 'PlayerHeadWidget_C_UpdateIcon::CallFunc_IsValid_ReturnValue2' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.GetTslWeaponColor
// 0x0028 (0x0028 - 0x0000)
struct PlayerHeadWidget_C_GetTslWeaponColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCurrentWeapon_bCurrentWeapon;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAmmoWeapon_Ammo;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslWeapon_Gun*                         CallFunc_GetCurrentWeaponGun_WeaponGun;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_GetTslWeaponColor) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_GetTslWeaponColor");
static_assert(sizeof(PlayerHeadWidget_C_GetTslWeaponColor) == 0x000028, "Wrong size on PlayerHeadWidget_C_GetTslWeaponColor");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponColor, ReturnValue) == 0x000000, "Member 'PlayerHeadWidget_C_GetTslWeaponColor::ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponColor, CallFunc_IsCurrentWeapon_bCurrentWeapon) == 0x000010, "Member 'PlayerHeadWidget_C_GetTslWeaponColor::CallFunc_IsCurrentWeapon_bCurrentWeapon' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponColor, CallFunc_GetAmmoWeapon_Ammo) == 0x000014, "Member 'PlayerHeadWidget_C_GetTslWeaponColor::CallFunc_GetAmmoWeapon_Ammo' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponColor, CallFunc_GetCurrentWeaponGun_WeaponGun) == 0x000018, "Member 'PlayerHeadWidget_C_GetTslWeaponColor::CallFunc_GetCurrentWeaponGun_WeaponGun' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponColor, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'PlayerHeadWidget_C_GetTslWeaponColor::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetTslWeaponColor, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000021, "Member 'PlayerHeadWidget_C_GetTslWeaponColor::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.GetWeaponProcessor
// 0x0018 (0x0018 - 0x0000)
struct PlayerHeadWidget_C_GetWeaponProcessor final
{
public:
	class AWeaponProcessor*                       WeaponProcessor;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AWeaponProcessor*                       CallFunc_GetWeaponProcessor_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_GetWeaponProcessor) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_GetWeaponProcessor");
static_assert(sizeof(PlayerHeadWidget_C_GetWeaponProcessor) == 0x000018, "Wrong size on PlayerHeadWidget_C_GetWeaponProcessor");
static_assert(offsetof(PlayerHeadWidget_C_GetWeaponProcessor, WeaponProcessor) == 0x000000, "Member 'PlayerHeadWidget_C_GetWeaponProcessor::WeaponProcessor' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetWeaponProcessor, CallFunc_GetWeaponProcessor_ReturnValue) == 0x000008, "Member 'PlayerHeadWidget_C_GetWeaponProcessor::CallFunc_GetWeaponProcessor_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetWeaponProcessor, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'PlayerHeadWidget_C_GetWeaponProcessor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.IsCurrentWeapon
// 0x0028 (0x0028 - 0x0000)
struct PlayerHeadWidget_C_IsCurrentWeapon final
{
public:
	bool                                          bCurrentWeapon;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeaponProcessor*                       CallFunc_GetWeaponProcessor_WeaponProcessor;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslWeapon*                             CallFunc_GetCurrentWeapon_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_IsCurrentWeapon) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_IsCurrentWeapon");
static_assert(sizeof(PlayerHeadWidget_C_IsCurrentWeapon) == 0x000028, "Wrong size on PlayerHeadWidget_C_IsCurrentWeapon");
static_assert(offsetof(PlayerHeadWidget_C_IsCurrentWeapon, bCurrentWeapon) == 0x000000, "Member 'PlayerHeadWidget_C_IsCurrentWeapon::bCurrentWeapon' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_IsCurrentWeapon, CallFunc_GetWeaponProcessor_WeaponProcessor) == 0x000008, "Member 'PlayerHeadWidget_C_IsCurrentWeapon::CallFunc_GetWeaponProcessor_WeaponProcessor' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_IsCurrentWeapon, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'PlayerHeadWidget_C_IsCurrentWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_IsCurrentWeapon, CallFunc_GetCurrentWeapon_ReturnValue) == 0x000018, "Member 'PlayerHeadWidget_C_IsCurrentWeapon::CallFunc_GetCurrentWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_IsCurrentWeapon, CallFunc_IsValid_ReturnValue2) == 0x000020, "Member 'PlayerHeadWidget_C_IsCurrentWeapon::CallFunc_IsValid_ReturnValue2' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.GetWeaponIndex
// 0x0020 (0x0020 - 0x0000)
struct PlayerHeadWidget_C_GetWeaponIndex final
{
public:
	int32                                         SlotIndex_0;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeaponProcessor*                       CallFunc_GetWeaponProcessor_WeaponProcessor;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUnarmedWeaponIndex_ReturnValue;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetWeaponIndex_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUnarmed_ReturnValue;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_GetWeaponIndex) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_GetWeaponIndex");
static_assert(sizeof(PlayerHeadWidget_C_GetWeaponIndex) == 0x000020, "Wrong size on PlayerHeadWidget_C_GetWeaponIndex");
static_assert(offsetof(PlayerHeadWidget_C_GetWeaponIndex, SlotIndex_0) == 0x000000, "Member 'PlayerHeadWidget_C_GetWeaponIndex::SlotIndex_0' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetWeaponIndex, CallFunc_GetWeaponProcessor_WeaponProcessor) == 0x000008, "Member 'PlayerHeadWidget_C_GetWeaponIndex::CallFunc_GetWeaponProcessor_WeaponProcessor' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetWeaponIndex, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'PlayerHeadWidget_C_GetWeaponIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetWeaponIndex, CallFunc_GetUnarmedWeaponIndex_ReturnValue) == 0x000014, "Member 'PlayerHeadWidget_C_GetWeaponIndex::CallFunc_GetUnarmedWeaponIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetWeaponIndex, CallFunc_GetWeaponIndex_ReturnValue) == 0x000018, "Member 'PlayerHeadWidget_C_GetWeaponIndex::CallFunc_GetWeaponIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetWeaponIndex, CallFunc_IsUnarmed_ReturnValue) == 0x00001C, "Member 'PlayerHeadWidget_C_GetWeaponIndex::CallFunc_IsUnarmed_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetWeaponIndex, CallFunc_Not_PreBool_ReturnValue) == 0x00001D, "Member 'PlayerHeadWidget_C_GetWeaponIndex::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.GetAmmoWeapon
// 0x0020 (0x0020 - 0x0000)
struct PlayerHeadWidget_C_GetAmmoWeapon final
{
public:
	int32                                         Ammo;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeaponProcessor*                       CallFunc_GetWeaponProcessor_WeaponProcessor;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslWeapon_Gun*                         CallFunc_GetWeaponGun_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentAmmoInClip_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_GetAmmoWeapon) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_GetAmmoWeapon");
static_assert(sizeof(PlayerHeadWidget_C_GetAmmoWeapon) == 0x000020, "Wrong size on PlayerHeadWidget_C_GetAmmoWeapon");
static_assert(offsetof(PlayerHeadWidget_C_GetAmmoWeapon, Ammo) == 0x000000, "Member 'PlayerHeadWidget_C_GetAmmoWeapon::Ammo' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetAmmoWeapon, CallFunc_GetWeaponProcessor_WeaponProcessor) == 0x000008, "Member 'PlayerHeadWidget_C_GetAmmoWeapon::CallFunc_GetWeaponProcessor_WeaponProcessor' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetAmmoWeapon, CallFunc_GetWeaponGun_ReturnValue) == 0x000010, "Member 'PlayerHeadWidget_C_GetAmmoWeapon::CallFunc_GetWeaponGun_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetAmmoWeapon, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'PlayerHeadWidget_C_GetAmmoWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetAmmoWeapon, CallFunc_IsValid_ReturnValue2) == 0x000019, "Member 'PlayerHeadWidget_C_GetAmmoWeapon::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetAmmoWeapon, CallFunc_GetCurrentAmmoInClip_ReturnValue) == 0x00001C, "Member 'PlayerHeadWidget_C_GetAmmoWeapon::CallFunc_GetCurrentAmmoInClip_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.GetCurrentWeapon
// 0x0020 (0x0020 - 0x0000)
struct PlayerHeadWidget_C_GetCurrentWeapon final
{
public:
	class ATslWeapon*                             CurrentWeapon;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AWeaponProcessor*                       CallFunc_GetWeaponProcessor_WeaponProcessor;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslWeapon*                             CallFunc_GetCurrentWeapon_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_GetCurrentWeapon) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_GetCurrentWeapon");
static_assert(sizeof(PlayerHeadWidget_C_GetCurrentWeapon) == 0x000020, "Wrong size on PlayerHeadWidget_C_GetCurrentWeapon");
static_assert(offsetof(PlayerHeadWidget_C_GetCurrentWeapon, CurrentWeapon) == 0x000000, "Member 'PlayerHeadWidget_C_GetCurrentWeapon::CurrentWeapon' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetCurrentWeapon, CallFunc_GetWeaponProcessor_WeaponProcessor) == 0x000008, "Member 'PlayerHeadWidget_C_GetCurrentWeapon::CallFunc_GetWeaponProcessor_WeaponProcessor' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetCurrentWeapon, CallFunc_GetCurrentWeapon_ReturnValue) == 0x000010, "Member 'PlayerHeadWidget_C_GetCurrentWeapon::CallFunc_GetCurrentWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetCurrentWeapon, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'PlayerHeadWidget_C_GetCurrentWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetCurrentWeapon, CallFunc_IsValid_ReturnValue2) == 0x000019, "Member 'PlayerHeadWidget_C_GetCurrentWeapon::CallFunc_IsValid_ReturnValue2' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.On_WeaponHandsOnLoadedAmmoCount_Prepass_0
// 0x0088 (0x0088 - 0x0000)
struct PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor2;                     // 0x0030(0x0028)()
	class ATslWeapon_Gun*                         CallFunc_GetCurrentWeaponGun_WeaponGun;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentAmmoInClip_ReturnValue;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0068(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0");
static_assert(sizeof(PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0) == 0x000088, "Wrong size on PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0");
static_assert(offsetof(PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0, BoundWidget) == 0x000000, "Member 'PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0, K2Node_MakeStruct_SlateColor2) == 0x000030, "Member 'PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0::K2Node_MakeStruct_SlateColor2' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0, CallFunc_GetCurrentWeaponGun_WeaponGun) == 0x000058, "Member 'PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0::CallFunc_GetCurrentWeaponGun_WeaponGun' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0, CallFunc_GetCurrentAmmoInClip_ReturnValue) == 0x000064, "Member 'PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0::CallFunc_GetCurrentAmmoInClip_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0, CallFunc_Conv_IntToText_ReturnValue) == 0x000068, "Member 'PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000080, "Member 'PlayerHeadWidget_C_On_WeaponHandsOnLoadedAmmoCount_Prepass_0::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.GetCurrentWeaponGun
// 0x0020 (0x0020 - 0x0000)
struct PlayerHeadWidget_C_GetCurrentWeaponGun final
{
public:
	class ATslWeapon_Gun*                         WeaponGun;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AWeaponProcessor*                       CallFunc_GetWeaponProcessor_WeaponProcessor;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslWeapon_Gun*                         CallFunc_GetWeaponGun_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_GetCurrentWeaponGun) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_GetCurrentWeaponGun");
static_assert(sizeof(PlayerHeadWidget_C_GetCurrentWeaponGun) == 0x000020, "Wrong size on PlayerHeadWidget_C_GetCurrentWeaponGun");
static_assert(offsetof(PlayerHeadWidget_C_GetCurrentWeaponGun, WeaponGun) == 0x000000, "Member 'PlayerHeadWidget_C_GetCurrentWeaponGun::WeaponGun' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetCurrentWeaponGun, CallFunc_GetWeaponProcessor_WeaponProcessor) == 0x000008, "Member 'PlayerHeadWidget_C_GetCurrentWeaponGun::CallFunc_GetWeaponProcessor_WeaponProcessor' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetCurrentWeaponGun, CallFunc_GetWeaponGun_ReturnValue) == 0x000010, "Member 'PlayerHeadWidget_C_GetCurrentWeaponGun::CallFunc_GetWeaponGun_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetCurrentWeaponGun, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'PlayerHeadWidget_C_GetCurrentWeaponGun::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_GetCurrentWeaponGun, CallFunc_IsValid_ReturnValue2) == 0x000019, "Member 'PlayerHeadWidget_C_GetCurrentWeaponGun::CallFunc_IsValid_ReturnValue2' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.Get_PlayerName_Text_0
// 0x0040 (0x0040 - 0x0000)
struct PlayerHeadWidget_C_Get_PlayerName_Text_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0028(0x0018)()
};
static_assert(alignof(PlayerHeadWidget_C_Get_PlayerName_Text_0) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_Get_PlayerName_Text_0");
static_assert(sizeof(PlayerHeadWidget_C_Get_PlayerName_Text_0) == 0x000040, "Wrong size on PlayerHeadWidget_C_Get_PlayerName_Text_0");
static_assert(offsetof(PlayerHeadWidget_C_Get_PlayerName_Text_0, ReturnValue) == 0x000000, "Member 'PlayerHeadWidget_C_Get_PlayerName_Text_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_Get_PlayerName_Text_0, CallFunc_GetPlayerName_ReturnValue) == 0x000018, "Member 'PlayerHeadWidget_C_Get_PlayerName_Text_0::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_Get_PlayerName_Text_0, CallFunc_Conv_StringToText_ReturnValue) == 0x000028, "Member 'PlayerHeadWidget_C_Get_PlayerName_Text_0::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.UpdateTextColor
// 0x0002 (0x0002 - 0x0000)
struct PlayerHeadWidget_C_UpdateTextColor final
{
public:
	bool                                          CallFunc_IsLastSpectatedCharacter_ReturnValue;     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTeamMember_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_UpdateTextColor) == 0x000001, "Wrong alignment on PlayerHeadWidget_C_UpdateTextColor");
static_assert(sizeof(PlayerHeadWidget_C_UpdateTextColor) == 0x000002, "Wrong size on PlayerHeadWidget_C_UpdateTextColor");
static_assert(offsetof(PlayerHeadWidget_C_UpdateTextColor, CallFunc_IsLastSpectatedCharacter_ReturnValue) == 0x000000, "Member 'PlayerHeadWidget_C_UpdateTextColor::CallFunc_IsLastSpectatedCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_UpdateTextColor, CallFunc_IsTeamMember_ReturnValue) == 0x000001, "Member 'PlayerHeadWidget_C_UpdateTextColor::CallFunc_IsTeamMember_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.OnPrepass_0
// 0x0040 (0x0040 - 0x0000)
struct PlayerHeadWidget_C_OnPrepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable2;                                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable3;                                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable4;                                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEmptyPlayerName_EmptyPlayerName;        // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   K2Node_DynamicCast_AsTsl_Player_Controller;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASpectatorPawn*                         CallFunc_GetSpectatorPawn_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslSpectatorPawn*                      K2Node_DynamicCast_AsTsl_Spectator_Pawn;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsObserving_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetObserverTagShow_ReturnValue;           // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_OnPrepass_0) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_OnPrepass_0");
static_assert(sizeof(PlayerHeadWidget_C_OnPrepass_0) == 0x000040, "Wrong size on PlayerHeadWidget_C_OnPrepass_0");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, BoundWidget) == 0x000000, "Member 'PlayerHeadWidget_C_OnPrepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, m__bool_Variable) == 0x000008, "Member 'PlayerHeadWidget_C_OnPrepass_0::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, m__byte_Variable) == 0x000009, "Member 'PlayerHeadWidget_C_OnPrepass_0::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, m__byte_Variable2) == 0x00000A, "Member 'PlayerHeadWidget_C_OnPrepass_0::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, m__bool_Variable2) == 0x00000B, "Member 'PlayerHeadWidget_C_OnPrepass_0::m__bool_Variable2' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, m__byte_Variable3) == 0x00000C, "Member 'PlayerHeadWidget_C_OnPrepass_0::m__byte_Variable3' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, m__byte_Variable4) == 0x00000D, "Member 'PlayerHeadWidget_C_OnPrepass_0::m__byte_Variable4' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, CallFunc_IsEmptyPlayerName_EmptyPlayerName) == 0x00000E, "Member 'PlayerHeadWidget_C_OnPrepass_0::CallFunc_IsEmptyPlayerName_EmptyPlayerName' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'PlayerHeadWidget_C_OnPrepass_0::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, K2Node_DynamicCast_AsTsl_Player_Controller) == 0x000018, "Member 'PlayerHeadWidget_C_OnPrepass_0::K2Node_DynamicCast_AsTsl_Player_Controller' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'PlayerHeadWidget_C_OnPrepass_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, K2Node_Select_Default) == 0x000021, "Member 'PlayerHeadWidget_C_OnPrepass_0::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, CallFunc_GetSpectatorPawn_ReturnValue) == 0x000028, "Member 'PlayerHeadWidget_C_OnPrepass_0::CallFunc_GetSpectatorPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, K2Node_DynamicCast_AsTsl_Spectator_Pawn) == 0x000030, "Member 'PlayerHeadWidget_C_OnPrepass_0::K2Node_DynamicCast_AsTsl_Spectator_Pawn' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, K2Node_DynamicCast_bSuccess2) == 0x000038, "Member 'PlayerHeadWidget_C_OnPrepass_0::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, CallFunc_IsObserving_ReturnValue) == 0x000039, "Member 'PlayerHeadWidget_C_OnPrepass_0::CallFunc_IsObserving_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, CallFunc_GetObserverTagShow_ReturnValue) == 0x00003A, "Member 'PlayerHeadWidget_C_OnPrepass_0::CallFunc_GetObserverTagShow_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_0, K2Node_Select2_Default) == 0x00003B, "Member 'PlayerHeadWidget_C_OnPrepass_0::K2Node_Select2_Default' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.OnPrepass_1
// 0x0020 (0x0020 - 0x0000)
struct PlayerHeadWidget_C_OnPrepass_1 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCurrentWeapon_bCurrentWeapon;           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslSpectatorPawn*                      CallFunc_GetTslSpectatorPawn_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsObserverTagWeaponShow_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_OnPrepass_1) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_OnPrepass_1");
static_assert(sizeof(PlayerHeadWidget_C_OnPrepass_1) == 0x000020, "Wrong size on PlayerHeadWidget_C_OnPrepass_1");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_1, BoundWidget) == 0x000000, "Member 'PlayerHeadWidget_C_OnPrepass_1::BoundWidget' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_1, m__bool_Variable) == 0x000008, "Member 'PlayerHeadWidget_C_OnPrepass_1::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_1, m__byte_Variable) == 0x000009, "Member 'PlayerHeadWidget_C_OnPrepass_1::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_1, m__byte_Variable2) == 0x00000A, "Member 'PlayerHeadWidget_C_OnPrepass_1::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_1, CallFunc_IsCurrentWeapon_bCurrentWeapon) == 0x00000B, "Member 'PlayerHeadWidget_C_OnPrepass_1::CallFunc_IsCurrentWeapon_bCurrentWeapon' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_1, CallFunc_GetTslSpectatorPawn_ReturnValue) == 0x000010, "Member 'PlayerHeadWidget_C_OnPrepass_1::CallFunc_GetTslSpectatorPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_1, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'PlayerHeadWidget_C_OnPrepass_1::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_1, CallFunc_IsObserverTagWeaponShow_ReturnValue) == 0x000019, "Member 'PlayerHeadWidget_C_OnPrepass_1::CallFunc_IsObserverTagWeaponShow_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_OnPrepass_1, K2Node_Select_Default) == 0x00001A, "Member 'PlayerHeadWidget_C_OnPrepass_1::K2Node_Select_Default' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.IsEmptyPlayerName
// 0x0020 (0x0020 - 0x0000)
struct PlayerHeadWidget_C_IsEmptyPlayerName final
{
public:
	bool                                          EmptyPlayerName;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0008(0x0010)(ZeroConstructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_IsEmptyPlayerName) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_IsEmptyPlayerName");
static_assert(sizeof(PlayerHeadWidget_C_IsEmptyPlayerName) == 0x000020, "Wrong size on PlayerHeadWidget_C_IsEmptyPlayerName");
static_assert(offsetof(PlayerHeadWidget_C_IsEmptyPlayerName, EmptyPlayerName) == 0x000000, "Member 'PlayerHeadWidget_C_IsEmptyPlayerName::EmptyPlayerName' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_IsEmptyPlayerName, CallFunc_GetPlayerName_ReturnValue) == 0x000008, "Member 'PlayerHeadWidget_C_IsEmptyPlayerName::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_IsEmptyPlayerName, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000018, "Member 'PlayerHeadWidget_C_IsEmptyPlayerName::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.On_HeadBorder_Prepass_0
// 0x0040 (0x0040 - 0x0000)
struct PlayerHeadWidget_C_On_HeadBorder_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslGameState*                          CallFunc_GetTslGameState_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTeamId_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   CallFunc_GetTeamColors_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	struct FLinearColor                           CallFunc_Array_Get_Item;                           // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_On_HeadBorder_Prepass_0) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_On_HeadBorder_Prepass_0");
static_assert(sizeof(PlayerHeadWidget_C_On_HeadBorder_Prepass_0) == 0x000040, "Wrong size on PlayerHeadWidget_C_On_HeadBorder_Prepass_0");
static_assert(offsetof(PlayerHeadWidget_C_On_HeadBorder_Prepass_0, BoundWidget) == 0x000000, "Member 'PlayerHeadWidget_C_On_HeadBorder_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_HeadBorder_Prepass_0, CallFunc_GetTslGameState_ReturnValue) == 0x000008, "Member 'PlayerHeadWidget_C_On_HeadBorder_Prepass_0::CallFunc_GetTslGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_HeadBorder_Prepass_0, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'PlayerHeadWidget_C_On_HeadBorder_Prepass_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_HeadBorder_Prepass_0, CallFunc_GetTeamId_ReturnValue) == 0x000014, "Member 'PlayerHeadWidget_C_On_HeadBorder_Prepass_0::CallFunc_GetTeamId_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_HeadBorder_Prepass_0, CallFunc_Percent_IntInt_ReturnValue) == 0x000018, "Member 'PlayerHeadWidget_C_On_HeadBorder_Prepass_0::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_HeadBorder_Prepass_0, CallFunc_GetTeamColors_ReturnValue) == 0x000020, "Member 'PlayerHeadWidget_C_On_HeadBorder_Prepass_0::CallFunc_GetTeamColors_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_On_HeadBorder_Prepass_0, CallFunc_Array_Get_Item) == 0x000030, "Member 'PlayerHeadWidget_C_On_HeadBorder_Prepass_0::CallFunc_Array_Get_Item' has a wrong offset!");

// Function PlayerHeadWidget.PlayerHeadWidget_C.AddAlphaWhenADS
// 0x0030 (0x0030 - 0x0000)
struct PlayerHeadWidget_C_AddAlphaWhenADS final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   K2Node_DynamicCast_AsTsl_Player_Controller;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslCharacter*                          CallFunc_GetViewTargetTslCharacter_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSameObservingCameraMode_ReturnValue;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsScoping_ReturnValue;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerHeadWidget_C_AddAlphaWhenADS) == 0x000008, "Wrong alignment on PlayerHeadWidget_C_AddAlphaWhenADS");
static_assert(sizeof(PlayerHeadWidget_C_AddAlphaWhenADS) == 0x000030, "Wrong size on PlayerHeadWidget_C_AddAlphaWhenADS");
static_assert(offsetof(PlayerHeadWidget_C_AddAlphaWhenADS, BoundWidget) == 0x000000, "Member 'PlayerHeadWidget_C_AddAlphaWhenADS::BoundWidget' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_AddAlphaWhenADS, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'PlayerHeadWidget_C_AddAlphaWhenADS::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_AddAlphaWhenADS, K2Node_DynamicCast_AsTsl_Player_Controller) == 0x000010, "Member 'PlayerHeadWidget_C_AddAlphaWhenADS::K2Node_DynamicCast_AsTsl_Player_Controller' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_AddAlphaWhenADS, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'PlayerHeadWidget_C_AddAlphaWhenADS::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_AddAlphaWhenADS, CallFunc_GetViewTargetTslCharacter_ReturnValue) == 0x000020, "Member 'PlayerHeadWidget_C_AddAlphaWhenADS::CallFunc_GetViewTargetTslCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_AddAlphaWhenADS, CallFunc_IsSameObservingCameraMode_ReturnValue) == 0x000028, "Member 'PlayerHeadWidget_C_AddAlphaWhenADS::CallFunc_IsSameObservingCameraMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerHeadWidget_C_AddAlphaWhenADS, CallFunc_IsScoping_ReturnValue) == 0x000029, "Member 'PlayerHeadWidget_C_AddAlphaWhenADS::CallFunc_IsScoping_ReturnValue' has a wrong offset!");

}

