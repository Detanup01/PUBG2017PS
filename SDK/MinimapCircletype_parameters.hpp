#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinimapCircletype

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function MinimapCircletype.MinimapCircletype_C.OnPrepass_0
// 0x0020 (0x0020 - 0x0000)
struct MinimapCircletype_C_OnPrepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslGameState*                          CallFunc_GetTslGameState_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinimapCircletype_C_OnPrepass_0) == 0x000008, "Wrong alignment on MinimapCircletype_C_OnPrepass_0");
static_assert(sizeof(MinimapCircletype_C_OnPrepass_0) == 0x000020, "Wrong size on MinimapCircletype_C_OnPrepass_0");
static_assert(offsetof(MinimapCircletype_C_OnPrepass_0, BoundWidget) == 0x000000, "Member 'MinimapCircletype_C_OnPrepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(MinimapCircletype_C_OnPrepass_0, m__bool_Variable) == 0x000008, "Member 'MinimapCircletype_C_OnPrepass_0::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(MinimapCircletype_C_OnPrepass_0, m__byte_Variable) == 0x000009, "Member 'MinimapCircletype_C_OnPrepass_0::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(MinimapCircletype_C_OnPrepass_0, m__byte_Variable2) == 0x00000A, "Member 'MinimapCircletype_C_OnPrepass_0::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(MinimapCircletype_C_OnPrepass_0, CallFunc_GetTslGameState_ReturnValue) == 0x000010, "Member 'MinimapCircletype_C_OnPrepass_0::CallFunc_GetTslGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapCircletype_C_OnPrepass_0, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'MinimapCircletype_C_OnPrepass_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapCircletype_C_OnPrepass_0, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000019, "Member 'MinimapCircletype_C_OnPrepass_0::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinimapCircletype_C_OnPrepass_0, K2Node_Select_Default) == 0x00001A, "Member 'MinimapCircletype_C_OnPrepass_0::K2Node_Select_Default' has a wrong offset!");

}

