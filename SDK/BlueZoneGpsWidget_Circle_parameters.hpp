#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueZoneGpsWidget_Circle

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BlueZoneGpsWidget_Circle.BlueZoneGpsWidget_Circle_C.ExecuteUbergraph_BlueZoneGpsWidget_Circle
// 0x0068 (0x0068 - 0x0000)
struct BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable2;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable2;                                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m__float_Variable3;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Gauge;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue2;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable3;                                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Event_BoundWidget;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInNextPlayzone_ReturnValue;             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select2_Default;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWarning_ReturnValue;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateBluezoneReady_IsReady;             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue2;          // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInNextPlayzone_ReturnValue2;            // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue4;                     // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue3;          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select3_Default;                            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle");
static_assert(sizeof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle) == 0x000068, "Wrong size on BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, EntryPoint) == 0x000000, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::EntryPoint' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, m__float_Variable) == 0x000004, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::m__float_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsVisible_ReturnValue) == 0x000008, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, m__byte_Variable) == 0x000009, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, m__byte_Variable2) == 0x00000A, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, m__bool_Variable) == 0x00000B, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, m__float_Variable2) == 0x00000C, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::m__float_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, m__bool_Variable2) == 0x000010, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::m__bool_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, m__float_Variable3) == 0x000014, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::m__float_Variable3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, K2Node_Event_Gauge) == 0x00001C, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::K2Node_Event_Gauge' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000020, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_GetDynamicMaterial_ReturnValue2) == 0x000028, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_GetDynamicMaterial_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, m__bool_Variable3) == 0x000030, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::m__bool_Variable3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, K2Node_Select_Default) == 0x000034, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsValid_ReturnValue2) == 0x000038, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, K2Node_Event_BoundWidget) == 0x000040, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::K2Node_Event_BoundWidget' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x000048, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsInNextPlayzone_ReturnValue) == 0x00004C, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsInNextPlayzone_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsAnimationPlaying_ReturnValue) == 0x00004D, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, K2Node_Select2_Default) == 0x000050, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000054, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsWarning_ReturnValue) == 0x000058, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsWarning_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsStateBluezoneReady_IsReady) == 0x000059, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsStateBluezoneReady_IsReady' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsValid_ReturnValue3) == 0x00005A, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsAnimationPlaying_ReturnValue2) == 0x00005B, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsAnimationPlaying_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_Not_PreBool_ReturnValue) == 0x00005C, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_BooleanAND_ReturnValue) == 0x00005D, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsInNextPlayzone_ReturnValue2) == 0x00005E, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsInNextPlayzone_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsValid_ReturnValue4) == 0x00005F, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsValid_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_Not_PreBool_ReturnValue2) == 0x000060, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_BooleanAND_ReturnValue2) == 0x000061, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_IsAnimationPlaying_ReturnValue3) == 0x000062, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_IsAnimationPlaying_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_Not_PreBool_ReturnValue3) == 0x000063, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, K2Node_Select3_Default) == 0x000064, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, CallFunc_BooleanAND_ReturnValue3) == 0x000065, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle, K2Node_SwitchEnum_CmpSuccess) == 0x000066, "Member 'BlueZoneGpsWidget_Circle_C_ExecuteUbergraph_BlueZoneGpsWidget_Circle::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BlueZoneGpsWidget_Circle.BlueZoneGpsWidget_Circle_C.MainPrepassWidgetVisibilitySetting
// 0x0008 (0x0008 - 0x0000)
struct BlueZoneGpsWidget_Circle_C_MainPrepassWidgetVisibilitySetting final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Circle_C_MainPrepassWidgetVisibilitySetting) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Circle_C_MainPrepassWidgetVisibilitySetting");
static_assert(sizeof(BlueZoneGpsWidget_Circle_C_MainPrepassWidgetVisibilitySetting) == 0x000008, "Wrong size on BlueZoneGpsWidget_Circle_C_MainPrepassWidgetVisibilitySetting");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_MainPrepassWidgetVisibilitySetting, BoundWidget) == 0x000000, "Member 'BlueZoneGpsWidget_Circle_C_MainPrepassWidgetVisibilitySetting::BoundWidget' has a wrong offset!");

// Function BlueZoneGpsWidget_Circle.BlueZoneGpsWidget_Circle_C.ChildUpdateGauge
// 0x0004 (0x0004 - 0x0000)
struct BlueZoneGpsWidget_Circle_C_ChildUpdateGauge final
{
public:
	float                                         Gauge;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Circle_C_ChildUpdateGauge) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Circle_C_ChildUpdateGauge");
static_assert(sizeof(BlueZoneGpsWidget_Circle_C_ChildUpdateGauge) == 0x000004, "Wrong size on BlueZoneGpsWidget_Circle_C_ChildUpdateGauge");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_ChildUpdateGauge, Gauge) == 0x000000, "Member 'BlueZoneGpsWidget_Circle_C_ChildUpdateGauge::Gauge' has a wrong offset!");

// Function BlueZoneGpsWidget_Circle.BlueZoneGpsWidget_Circle_C.TickReset
// 0x0058 (0x0058 - 0x0000)
struct BlueZoneGpsWidget_Circle_C_TickReset final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SetResetTimeCheck_Result;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SetResetTimeCheck_Result2;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SetResetTimeCheck_Result3;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetResetTimeCheck_ResetTimeCheck;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetResetTimeCheck_ResetTimeCheck2;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SetResetTimeCheck_Result4;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SetResetTimeCheck_Result5;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayzoneReset_bReset;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBluezoneReset_bBluezoneReset;           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeRange_MinTime2;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeRange_MaxTime2;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue2;             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInNextPlayzone_ReturnValue;             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBluezoneGpsReset_ReturnValue;           // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Circle_C_TickReset) == 0x000004, "Wrong alignment on BlueZoneGpsWidget_Circle_C_TickReset");
static_assert(sizeof(BlueZoneGpsWidget_Circle_C_TickReset) == 0x000058, "Wrong size on BlueZoneGpsWidget_Circle_C_TickReset");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, Time) == 0x000000, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::Time' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_SetResetTimeCheck_Result) == 0x000004, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_SetResetTimeCheck_Result' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_SetResetTimeCheck_Result2) == 0x000008, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_SetResetTimeCheck_Result2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_SetResetTimeCheck_Result3) == 0x00000C, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_SetResetTimeCheck_Result3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_GetResetTimeCheck_ResetTimeCheck) == 0x000010, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_GetResetTimeCheck_ResetTimeCheck' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_GetResetTimeCheck_ResetTimeCheck2) == 0x000014, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_GetResetTimeCheck_ResetTimeCheck2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00001C, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_SetResetTimeCheck_Result4) == 0x000020, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_SetResetTimeCheck_Result4' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_SetResetTimeCheck_Result5) == 0x000024, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_SetResetTimeCheck_Result5' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_IsPlayzoneReset_bReset) == 0x000028, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_IsPlayzoneReset_bReset' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_IsBluezoneReset_bBluezoneReset) == 0x000029, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_IsBluezoneReset_bBluezoneReset' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_GetTimeRange_MinTime) == 0x00002C, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_GetTimeRange_MaxTime) == 0x000030, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000034, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_Less_FloatFloat_ReturnValue) == 0x000038, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x00003C, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_Lerp_ReturnValue) == 0x000040, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_GetFloatValue_ReturnValue) == 0x000044, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_GetTimeRange_MinTime2) == 0x000048, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_GetTimeRange_MinTime2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_GetTimeRange_MaxTime2) == 0x00004C, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_GetTimeRange_MaxTime2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000050, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_Less_FloatFloat_ReturnValue2) == 0x000054, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_Less_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_IsInNextPlayzone_ReturnValue) == 0x000055, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_IsInNextPlayzone_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_IsBluezoneGpsReset_ReturnValue) == 0x000056, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_IsBluezoneGpsReset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_TickReset, CallFunc_Not_PreBool_ReturnValue) == 0x000057, "Member 'BlueZoneGpsWidget_Circle_C_TickReset::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BlueZoneGpsWidget_Circle.BlueZoneGpsWidget_Circle_C.On_ImageBorder_Prepass_0
// 0x0030 (0x0030 - 0x0000)
struct BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable2;                                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m__float_Variable2;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInNextPlayzone_ReturnValue;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue2;          // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateBluezoneReady_IsReady;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0");
static_assert(sizeof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0) == 0x000030, "Wrong size on BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, BoundWidget) == 0x000000, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, m__byte_Variable) == 0x000008, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_IsVisible_ReturnValue) == 0x000009, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, m__byte_Variable2) == 0x00000A, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, m__bool_Variable) == 0x00000B, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, m__float_Variable) == 0x00000C, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::m__float_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, m__bool_Variable2) == 0x000010, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::m__bool_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, m__float_Variable2) == 0x000014, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::m__float_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_IsInNextPlayzone_ReturnValue) == 0x000019, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_IsInNextPlayzone_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, K2Node_Select_Default) == 0x00001C, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_IsValid_ReturnValue2) == 0x000022, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000023, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_Not_PreBool_ReturnValue2) == 0x000024, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_IsAnimationPlaying_ReturnValue2) == 0x000026, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_IsAnimationPlaying_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_Not_PreBool_ReturnValue3) == 0x000027, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_BooleanAND_ReturnValue2) == 0x000028, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_IsStateBluezoneReady_IsReady) == 0x000029, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_IsStateBluezoneReady_IsReady' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, CallFunc_BooleanAND_ReturnValue3) == 0x00002A, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, K2Node_Select2_Default) == 0x00002B, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0, K2Node_SwitchEnum_CmpSuccess) == 0x00002C, "Member 'BlueZoneGpsWidget_Circle_C_On_ImageBorder_Prepass_0::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BlueZoneGpsWidget_Circle.BlueZoneGpsWidget_Circle_C.On_BluezoneLight_Prepass_0
// 0x0010 (0x0010 - 0x0000)
struct BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWarning_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0");
static_assert(sizeof(BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0) == 0x000010, "Wrong size on BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0, BoundWidget) == 0x000000, "Member 'BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0, m__bool_Variable) == 0x000008, "Member 'BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0, m__byte_Variable) == 0x000009, "Member 'BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0, m__byte_Variable2) == 0x00000A, "Member 'BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0, CallFunc_IsWarning_ReturnValue) == 0x00000B, "Member 'BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0::CallFunc_IsWarning_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0, K2Node_Select_Default) == 0x00000C, "Member 'BlueZoneGpsWidget_Circle_C_On_BluezoneLight_Prepass_0::K2Node_Select_Default' has a wrong offset!");

// Function BlueZoneGpsWidget_Circle.BlueZoneGpsWidget_Circle_C.SubPrepass
// 0x0038 (0x0038 - 0x0000)
struct BlueZoneGpsWidget_Circle_C_SubPrepass final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m__float_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable2;                                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m__float_Variable2;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInNextPlayzone_ReturnValue;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue2;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateBluezoneReady_IsReady;             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWarning_ReturnValue;                    // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BlueZoneGpsWidget_Circle_C_SubPrepass) == 0x000008, "Wrong alignment on BlueZoneGpsWidget_Circle_C_SubPrepass");
static_assert(sizeof(BlueZoneGpsWidget_Circle_C_SubPrepass) == 0x000038, "Wrong size on BlueZoneGpsWidget_Circle_C_SubPrepass");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, BoundWidget) == 0x000000, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::BoundWidget' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, m__byte_Variable) == 0x000008, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, m__byte_Variable2) == 0x000009, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, m__bool_Variable) == 0x00000A, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, m__float_Variable) == 0x00000C, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::m__float_Variable' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, m__bool_Variable2) == 0x000010, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::m__bool_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, m__float_Variable2) == 0x000014, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::m__float_Variable2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, K2Node_Select_Default) == 0x00001C, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_IsVisible_ReturnValue) == 0x000020, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_IsInNextPlayzone_ReturnValue) == 0x000021, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_IsInNextPlayzone_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_IsValid_ReturnValue) == 0x000023, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_IsValid_ReturnValue2) == 0x000024, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000025, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_Not_PreBool_ReturnValue2) == 0x000026, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_BooleanAND_ReturnValue) == 0x000027, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_IsAnimationPlaying_ReturnValue2) == 0x000028, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_IsAnimationPlaying_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_Not_PreBool_ReturnValue3) == 0x000029, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_BooleanAND_ReturnValue2) == 0x00002A, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_IsStateBluezoneReady_IsReady) == 0x00002B, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_IsStateBluezoneReady_IsReady' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_BooleanAND_ReturnValue3) == 0x00002C, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, K2Node_Select2_Default) == 0x00002D, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, K2Node_SwitchEnum_CmpSuccess) == 0x00002E, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_IsWarning_ReturnValue) == 0x00002F, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_IsWarning_ReturnValue' has a wrong offset!");
static_assert(offsetof(BlueZoneGpsWidget_Circle_C_SubPrepass, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000030, "Member 'BlueZoneGpsWidget_Circle_C_SubPrepass::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");

}

