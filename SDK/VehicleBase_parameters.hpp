#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function VehicleBase.VehicleBase_C.ExecuteUbergraph_VehicleBase
// 0x0110 (0x0110 - 0x0000)
struct VehicleBase_C_ExecuteUbergraph_VehicleBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)()
	TDelegate<void(float KillingDamage, struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser)> K2Node_CreateDelegate_OutputDelegate2;             // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   m__struct_Variable;                                // 0x0038(0x0018)()
	float                                         K2Node_InputAxisEvent_AxisValue2;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTslWheeledVehicleMovement*             K2Node_DynamicCast_AsTsl_Wheeled_Vehicle_Movement; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBrakeInput_ReturnValue;                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_KillingDamage;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FDamageEvent                           K2Node_CustomEvent_DamageEvent;                    // 0x0070(0x0018)(ConstParm)
	class ATslPlayerState*                        K2Node_CustomEvent_PlayerInstigator;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 K2Node_CustomEvent_DamageCauser;                   // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0098(0x0018)()
	int32                                         m__int_Variable;                                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWheelSuspensionMaxRaise_ReturnValue;   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWheelSuspensionMaxDrop_ReturnValue;    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_GetEngineSoundComponent_ReturnValue;      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key2;                      // 0x00E0(0x0018)()
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeSeconds_ReturnValue2;              // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue2;          // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetVehicleHealth_ReturnValue;             // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue2;                // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnabledOptimizeTick_ReturnValue;        // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_ExecuteUbergraph_VehicleBase) == 0x000008, "Wrong alignment on VehicleBase_C_ExecuteUbergraph_VehicleBase");
static_assert(sizeof(VehicleBase_C_ExecuteUbergraph_VehicleBase) == 0x000110, "Wrong size on VehicleBase_C_ExecuteUbergraph_VehicleBase");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, EntryPoint) == 0x000000, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_CreateDelegate_OutputDelegate2) == 0x000020, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_Event_DeltaSeconds) == 0x000034, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, m__struct_Variable) == 0x000038, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::m__struct_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_InputAxisEvent_AxisValue2) == 0x000050, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_InputAxisEvent_AxisValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_DynamicCast_AsTsl_Wheeled_Vehicle_Movement) == 0x000058, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_DynamicCast_AsTsl_Wheeled_Vehicle_Movement' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_GetBrakeInput_ReturnValue) == 0x000064, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_GetBrakeInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000068, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_HasAuthority_ReturnValue) == 0x000069, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_CustomEvent_KillingDamage) == 0x00006C, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_CustomEvent_KillingDamage' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_CustomEvent_DamageEvent) == 0x000070, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_CustomEvent_DamageEvent' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_CustomEvent_PlayerInstigator) == 0x000088, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_CustomEvent_PlayerInstigator' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_CustomEvent_DamageCauser) == 0x000090, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_CustomEvent_DamageCauser' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_InputActionEvent_Key) == 0x000098, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, m__int_Variable) == 0x0000B0, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::m__int_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_GetWheelSuspensionMaxRaise_ReturnValue) == 0x0000B4, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_GetWheelSuspensionMaxRaise_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_GetWheelSuspensionMaxDrop_ReturnValue) == 0x0000B8, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_GetWheelSuspensionMaxDrop_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000BC, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_Add_IntInt_ReturnValue) == 0x0000C0, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_InputAxisEvent_AxisValue) == 0x0000C4, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x0000C8, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_Not_PreBool_ReturnValue2) == 0x0000C9, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_BooleanAND_ReturnValue) == 0x0000CA, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_GetEngineSoundComponent_ReturnValue) == 0x0000D0, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_GetEngineSoundComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_PostAkEvent_ReturnValue) == 0x0000D8, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, K2Node_InputActionEvent_Key2) == 0x0000E0, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::K2Node_InputActionEvent_Key2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_GetTimeSeconds_ReturnValue) == 0x0000F8, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000FC, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_GetTimeSeconds_ReturnValue2) == 0x000100, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_GetTimeSeconds_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_Greater_FloatFloat_ReturnValue2) == 0x000104, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_Greater_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_GetVehicleHealth_ReturnValue) == 0x000108, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_GetVehicleHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00010C, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_HasAuthority_ReturnValue2) == 0x00010D, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_HasAuthority_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_ExecuteUbergraph_VehicleBase, CallFunc_IsEnabledOptimizeTick_ReturnValue) == 0x00010E, "Member 'VehicleBase_C_ExecuteUbergraph_VehicleBase::CallFunc_IsEnabledOptimizeTick_ReturnValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_15
// 0x0004 (0x0004 - 0x0000)
struct VehicleBase_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_15 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_15) == 0x000004, "Wrong alignment on VehicleBase_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_15");
static_assert(sizeof(VehicleBase_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_15) == 0x000004, "Wrong size on VehicleBase_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_15");
static_assert(offsetof(VehicleBase_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_15, AxisValue) == 0x000000, "Member 'VehicleBase_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_15::AxisValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.TurnOffLight
// 0x0030 (0x0030 - 0x0000)
struct VehicleBase_C_TurnOffLight final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm)
	class ATslPlayerState*                        PlayerInstigator;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 DamageCauser;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_TurnOffLight) == 0x000008, "Wrong alignment on VehicleBase_C_TurnOffLight");
static_assert(sizeof(VehicleBase_C_TurnOffLight) == 0x000030, "Wrong size on VehicleBase_C_TurnOffLight");
static_assert(offsetof(VehicleBase_C_TurnOffLight, KillingDamage) == 0x000000, "Member 'VehicleBase_C_TurnOffLight::KillingDamage' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TurnOffLight, DamageEvent) == 0x000008, "Member 'VehicleBase_C_TurnOffLight::DamageEvent' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TurnOffLight, PlayerInstigator) == 0x000020, "Member 'VehicleBase_C_TurnOffLight::PlayerInstigator' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TurnOffLight, DamageCauser) == 0x000028, "Member 'VehicleBase_C_TurnOffLight::DamageCauser' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_7
// 0x0004 (0x0004 - 0x0000)
struct VehicleBase_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_7 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_7) == 0x000004, "Wrong alignment on VehicleBase_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_7");
static_assert(sizeof(VehicleBase_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_7) == 0x000004, "Wrong size on VehicleBase_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_7");
static_assert(offsetof(VehicleBase_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_7, AxisValue) == 0x000000, "Member 'VehicleBase_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_7::AxisValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct VehicleBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_ReceiveTick) == 0x000004, "Wrong alignment on VehicleBase_C_ReceiveTick");
static_assert(sizeof(VehicleBase_C_ReceiveTick) == 0x000004, "Wrong size on VehicleBase_C_ReceiveTick");
static_assert(offsetof(VehicleBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'VehicleBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.InpActEvt_Handbrake_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_2");
static_assert(sizeof(VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_2");
static_assert(offsetof(VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.InpActEvt_Handbrake_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_3");
static_assert(sizeof(VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_3");
static_assert(offsetof(VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'VehicleBase_C_InpActEvt_Handbrake_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct VehicleBase_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_UserConstructionScript) == 0x000001, "Wrong alignment on VehicleBase_C_UserConstructionScript");
static_assert(sizeof(VehicleBase_C_UserConstructionScript) == 0x000001, "Wrong size on VehicleBase_C_UserConstructionScript");
static_assert(offsetof(VehicleBase_C_UserConstructionScript, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'VehicleBase_C_UserConstructionScript::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.OnRep_isLightsOn
// 0x000C (0x000C - 0x0000)
struct VehicleBase_C_OnRep_isLightsOn final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_OnRep_isLightsOn) == 0x000004, "Wrong alignment on VehicleBase_C_OnRep_isLightsOn");
static_assert(sizeof(VehicleBase_C_OnRep_isLightsOn) == 0x00000C, "Wrong size on VehicleBase_C_OnRep_isLightsOn");
static_assert(offsetof(VehicleBase_C_OnRep_isLightsOn, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'VehicleBase_C_OnRep_isLightsOn::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_OnRep_isLightsOn, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000004, "Member 'VehicleBase_C_OnRep_isLightsOn::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_OnRep_isLightsOn, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'VehicleBase_C_OnRep_isLightsOn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.OnRep_IsBrakeEngaged
// 0x0008 (0x0008 - 0x0000)
struct VehicleBase_C_OnRep_IsBrakeEngaged final
{
public:
	bool                                          m__bool_Variable;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_OnRep_IsBrakeEngaged) == 0x000004, "Wrong alignment on VehicleBase_C_OnRep_IsBrakeEngaged");
static_assert(sizeof(VehicleBase_C_OnRep_IsBrakeEngaged) == 0x000008, "Wrong size on VehicleBase_C_OnRep_IsBrakeEngaged");
static_assert(offsetof(VehicleBase_C_OnRep_IsBrakeEngaged, m__bool_Variable) == 0x000000, "Member 'VehicleBase_C_OnRep_IsBrakeEngaged::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_OnRep_IsBrakeEngaged, CallFunc_HasAuthority_ReturnValue) == 0x000001, "Member 'VehicleBase_C_OnRep_IsBrakeEngaged::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_OnRep_IsBrakeEngaged, K2Node_Select_Default) == 0x000004, "Member 'VehicleBase_C_OnRep_IsBrakeEngaged::K2Node_Select_Default' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.TickWheelSound
// 0x0140 (0x0140 - 0x0000)
struct VehicleBase_C_TickWheelSound final
{
public:
	EPhysicalSurface                              m__byte_Variable;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m__float_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable2;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable3;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable4;                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable5;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable6;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable7;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable8;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable9;                                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable10;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable11;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable12;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MaxOfFloatArray_MaxValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue2;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MaxOfFloatArray_MaxValue2;                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         m__int_Loop_Counter_Variable;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         m__int_Array_Index_Variable;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue3;         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MaxOfFloatArray_MaxValue3;                // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         m__int_Array_Index_Variable2;                      // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item2;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item3;                          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue2;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item4;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item5;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue3;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue4;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item6;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item7;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue5;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue6;                         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item8;                          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue7;                         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue4;              // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item9;                          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         m__int_Loop_Counter_Variable2;                     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue8;                         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMax_ReturnValue2;                        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue3;                        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         m__int_Loop_Counter_Variable3;                     // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue3;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         m__int_Array_Index_Variable3;                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item10;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_Array_Get_Item11;                         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue3;                // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue3;                 // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item12;                         // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Array_Get_Item13;                         // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue2;       // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select2_Default;                            // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         SurfaceValueAir;                                   // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<float>                                 TestSurfaceArrayForSoundLocal;                     // 0x0130(0x0010)(Edit, ZeroConstructor)
};
static_assert(alignof(VehicleBase_C_TickWheelSound) == 0x000008, "Wrong alignment on VehicleBase_C_TickWheelSound");
static_assert(sizeof(VehicleBase_C_TickWheelSound) == 0x000140, "Wrong size on VehicleBase_C_TickWheelSound");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__byte_Variable) == 0x000000, "Member 'VehicleBase_C_TickWheelSound::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable) == 0x000004, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable2) == 0x000008, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable3) == 0x00000C, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable4) == 0x000010, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable4' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable5) == 0x000014, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable5' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable6) == 0x000018, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable6' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable7) == 0x00001C, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable7' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable8) == 0x000020, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable8' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable9) == 0x000024, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable9' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable10) == 0x000028, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable10' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable11) == 0x00002C, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable11' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__float_Variable12) == 0x000030, "Member 'VehicleBase_C_TickWheelSound::m__float_Variable12' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, K2Node_MakeArray_Array) == 0x000038, "Member 'VehicleBase_C_TickWheelSound::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_MaxOfFloatArray_IndexOfMaxValue) == 0x000048, "Member 'VehicleBase_C_TickWheelSound::CallFunc_MaxOfFloatArray_IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_MaxOfFloatArray_MaxValue) == 0x00004C, "Member 'VehicleBase_C_TickWheelSound::CallFunc_MaxOfFloatArray_MaxValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_MaxOfFloatArray_IndexOfMaxValue2) == 0x000054, "Member 'VehicleBase_C_TickWheelSound::CallFunc_MaxOfFloatArray_IndexOfMaxValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_MaxOfFloatArray_MaxValue2) == 0x000058, "Member 'VehicleBase_C_TickWheelSound::CallFunc_MaxOfFloatArray_MaxValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__int_Loop_Counter_Variable) == 0x00005C, "Member 'VehicleBase_C_TickWheelSound::m__int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__int_Array_Index_Variable) == 0x000060, "Member 'VehicleBase_C_TickWheelSound::m__int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item) == 0x000068, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00006C, "Member 'VehicleBase_C_TickWheelSound::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Add_FloatFloat_ReturnValue) == 0x000070, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_MaxOfFloatArray_IndexOfMaxValue3) == 0x000074, "Member 'VehicleBase_C_TickWheelSound::CallFunc_MaxOfFloatArray_IndexOfMaxValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_MaxOfFloatArray_MaxValue3) == 0x000078, "Member 'VehicleBase_C_TickWheelSound::CallFunc_MaxOfFloatArray_MaxValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__int_Array_Index_Variable2) == 0x00007C, "Member 'VehicleBase_C_TickWheelSound::m__int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item2) == 0x000080, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item3) == 0x000084, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Abs_ReturnValue) == 0x000088, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Abs_ReturnValue2) == 0x00008C, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Abs_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item4) == 0x000090, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item4' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item5) == 0x000094, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item5' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Abs_ReturnValue3) == 0x000098, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Abs_ReturnValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Abs_ReturnValue4) == 0x00009C, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Abs_ReturnValue4' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item6) == 0x0000A0, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item6' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item7) == 0x0000A4, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item7' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Abs_ReturnValue5) == 0x0000A8, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Abs_ReturnValue5' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Abs_ReturnValue6) == 0x0000AC, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Abs_ReturnValue6' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Add_FloatFloat_ReturnValue2) == 0x0000B0, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item8) == 0x0000B4, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item8' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Add_FloatFloat_ReturnValue3) == 0x0000B8, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Abs_ReturnValue7) == 0x0000BC, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Abs_ReturnValue7' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Add_FloatFloat_ReturnValue4) == 0x0000C0, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Add_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item9) == 0x0000C4, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item9' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__int_Loop_Counter_Variable2) == 0x0000C8, "Member 'VehicleBase_C_TickWheelSound::m__int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Abs_ReturnValue8) == 0x0000CC, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Abs_ReturnValue8' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_FMax_ReturnValue) == 0x0000D0, "Member 'VehicleBase_C_TickWheelSound::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Less_IntInt_ReturnValue) == 0x0000D4, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_FMax_ReturnValue2) == 0x0000D8, "Member 'VehicleBase_C_TickWheelSound::CallFunc_FMax_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_FMax_ReturnValue3) == 0x0000DC, "Member 'VehicleBase_C_TickWheelSound::CallFunc_FMax_ReturnValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Add_IntInt_ReturnValue2) == 0x0000E0, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__int_Loop_Counter_Variable3) == 0x0000E4, "Member 'VehicleBase_C_TickWheelSound::m__int_Loop_Counter_Variable3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Add_IntInt_ReturnValue3) == 0x0000E8, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Add_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__int_Array_Index_Variable3) == 0x0000EC, "Member 'VehicleBase_C_TickWheelSound::m__int_Array_Index_Variable3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item10) == 0x0000F0, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item10' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000F4, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Length_ReturnValue2) == 0x0000F8, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, m__bool_Variable) == 0x0000FC, "Member 'VehicleBase_C_TickWheelSound::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Less_IntInt_ReturnValue2) == 0x0000FD, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item11) == 0x000100, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item11' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_IsValid_ReturnValue) == 0x000108, "Member 'VehicleBase_C_TickWheelSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, K2Node_Select_Default) == 0x00010C, "Member 'VehicleBase_C_TickWheelSound::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Length_ReturnValue3) == 0x000110, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Length_ReturnValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Less_IntInt_ReturnValue3) == 0x000114, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Less_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item12) == 0x000118, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item12' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x00011C, "Member 'VehicleBase_C_TickWheelSound::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_Array_Get_Item13) == 0x000120, "Member 'VehicleBase_C_TickWheelSound::CallFunc_Array_Get_Item13' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, CallFunc_SafeDivide_FloatFloat_ReturnValue2) == 0x000124, "Member 'VehicleBase_C_TickWheelSound::CallFunc_SafeDivide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, K2Node_Select2_Default) == 0x000128, "Member 'VehicleBase_C_TickWheelSound::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, SurfaceValueAir) == 0x00012C, "Member 'VehicleBase_C_TickWheelSound::SurfaceValueAir' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelSound, TestSurfaceArrayForSoundLocal) == 0x000130, "Member 'VehicleBase_C_TickWheelSound::TestSurfaceArrayForSoundLocal' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.TickWheelCaching
// 0x0158 (0x0158 - 0x0000)
struct VehicleBase_C_TickWheelCaching final
{
public:
	class UAkAudioEvent*                          m__object_Variable;                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable2;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable3;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable4;                               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable5;                               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable6;                               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable7;                               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable8;                               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable9;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable10;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable11;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable12;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPhysicalSurface                              m__byte_Variable;                                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          m__object_Variable13;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable14;                              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable15;                              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable16;                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable17;                              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable18;                              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable19;                              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable20;                              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable21;                              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable22;                              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable23;                              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          m__object_Variable24;                              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         m__int_Array_Index_Variable;                       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         m__int_Loop_Counter_Variable;                      // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPhysicalMaterial*                      CallFunc_Array_Get_Item;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E7[0x1];                                       // 0x00E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          K2Node_Select_Default;                             // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPhysicalMaterial*                      CallFunc_Array_Get_Item2;                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPhysicalSurface                              m__byte_Variable2;                                 // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          K2Node_Select2_Default;                            // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m__int_Array_Index_Variable2;                      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UVehicleWheel*                          CallFunc_Array_Get_Item3;                          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetSuspensionOffset_ReturnValue;          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetLongitudinalSlip_ReturnValue;          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetLateralSlip_ReturnValue;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_GetEngineSoundComponent_ReturnValue;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         m__int_Loop_Counter_Variable2;                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue2;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue3;                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPhysicalMaterial*                      CallFunc_GetWheelContactSurfaceMaterial_ReturnValue; // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWheelWaterDepth_ReturnValue;           // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWheelRotationSpeed_ReturnValue;        // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_TickWheelCaching) == 0x000008, "Wrong alignment on VehicleBase_C_TickWheelCaching");
static_assert(sizeof(VehicleBase_C_TickWheelCaching) == 0x000158, "Wrong size on VehicleBase_C_TickWheelCaching");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable) == 0x000000, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable2) == 0x000008, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable3) == 0x000010, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable4) == 0x000018, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable4' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable5) == 0x000020, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable5' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable6) == 0x000028, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable6' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable7) == 0x000030, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable7' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable8) == 0x000038, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable8' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable9) == 0x000040, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable9' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable10) == 0x000048, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable10' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable11) == 0x000050, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable11' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable12) == 0x000058, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable12' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__byte_Variable) == 0x000060, "Member 'VehicleBase_C_TickWheelCaching::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable13) == 0x000068, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable13' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable14) == 0x000070, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable14' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable15) == 0x000078, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable15' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable16) == 0x000080, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable16' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable17) == 0x000088, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable17' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable18) == 0x000090, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable18' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable19) == 0x000098, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable19' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable20) == 0x0000A0, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable20' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable21) == 0x0000A8, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable21' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable22) == 0x0000B0, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable22' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable23) == 0x0000B8, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable23' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__object_Variable24) == 0x0000C0, "Member 'VehicleBase_C_TickWheelCaching::m__object_Variable24' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__int_Array_Index_Variable) == 0x0000C8, "Member 'VehicleBase_C_TickWheelCaching::m__int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__int_Loop_Counter_Variable) == 0x0000CC, "Member 'VehicleBase_C_TickWheelCaching::m__int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Add_IntInt_ReturnValue) == 0x0000D0, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Array_Length_ReturnValue) == 0x0000D4, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Array_Get_Item) == 0x0000D8, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Array_Length_ReturnValue2) == 0x0000E0, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_IsValid_ReturnValue) == 0x0000E4, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Less_IntInt_ReturnValue) == 0x0000E5, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Not_PreBool_ReturnValue) == 0x0000E6, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, K2Node_Select_Default) == 0x0000E8, "Member 'VehicleBase_C_TickWheelCaching::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Array_Get_Item2) == 0x0000F0, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__byte_Variable2) == 0x0000F8, "Member 'VehicleBase_C_TickWheelCaching::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_IsValid_ReturnValue2) == 0x0000F9, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Not_PreBool_ReturnValue2) == 0x0000FA, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, K2Node_Select2_Default) == 0x000100, "Member 'VehicleBase_C_TickWheelCaching::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000108, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__int_Array_Index_Variable2) == 0x00010C, "Member 'VehicleBase_C_TickWheelCaching::m__int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Array_Get_Item3) == 0x000110, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_GetSuspensionOffset_ReturnValue) == 0x000118, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_GetSuspensionOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_GetLongitudinalSlip_ReturnValue) == 0x00011C, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_GetLongitudinalSlip_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_GetLateralSlip_ReturnValue) == 0x000120, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_GetLateralSlip_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_GetEngineSoundComponent_ReturnValue) == 0x000128, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_GetEngineSoundComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, m__int_Loop_Counter_Variable2) == 0x000130, "Member 'VehicleBase_C_TickWheelCaching::m__int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_PostAkEvent_ReturnValue) == 0x000134, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Less_IntInt_ReturnValue2) == 0x000138, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_Add_IntInt_ReturnValue2) == 0x00013C, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_PostAkEvent_ReturnValue2) == 0x000140, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_PostAkEvent_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_PostAkEvent_ReturnValue3) == 0x000144, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_PostAkEvent_ReturnValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_GetWheelContactSurfaceMaterial_ReturnValue) == 0x000148, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_GetWheelContactSurfaceMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_GetWheelWaterDepth_ReturnValue) == 0x000150, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_GetWheelWaterDepth_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickWheelCaching, CallFunc_GetWheelRotationSpeed_ReturnValue) == 0x000154, "Member 'VehicleBase_C_TickWheelCaching::CallFunc_GetWheelRotationSpeed_ReturnValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.TickBasicInfoCaching
// 0x0018 (0x0018 - 0x0000)
struct VehicleBase_C_TickBasicInfoCaching final
{
public:
	float                                         CallFunc_GetForwardSpeed_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetBrakeInput_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetEngineRotationSpeed_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetThrottleInput_ReturnValue;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_TickBasicInfoCaching) == 0x000004, "Wrong alignment on VehicleBase_C_TickBasicInfoCaching");
static_assert(sizeof(VehicleBase_C_TickBasicInfoCaching) == 0x000018, "Wrong size on VehicleBase_C_TickBasicInfoCaching");
static_assert(offsetof(VehicleBase_C_TickBasicInfoCaching, CallFunc_GetForwardSpeed_ReturnValue) == 0x000000, "Member 'VehicleBase_C_TickBasicInfoCaching::CallFunc_GetForwardSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBasicInfoCaching, CallFunc_GetBrakeInput_ReturnValue) == 0x000004, "Member 'VehicleBase_C_TickBasicInfoCaching::CallFunc_GetBrakeInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBasicInfoCaching, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'VehicleBase_C_TickBasicInfoCaching::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBasicInfoCaching, CallFunc_Abs_ReturnValue) == 0x00000C, "Member 'VehicleBase_C_TickBasicInfoCaching::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBasicInfoCaching, CallFunc_GetEngineRotationSpeed_ReturnValue) == 0x000010, "Member 'VehicleBase_C_TickBasicInfoCaching::CallFunc_GetEngineRotationSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBasicInfoCaching, CallFunc_GetThrottleInput_ReturnValue) == 0x000014, "Member 'VehicleBase_C_TickBasicInfoCaching::CallFunc_GetThrottleInput_ReturnValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.TickFuelConsumption
// 0x003C (0x003C - 0x0000)
struct VehicleBase_C_TickFuelConsumption final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         m__float_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBoosting_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetEngineMaxRotationSpeed_ReturnValue;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetEngineRotationSpeed_ReturnValue;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_TickFuelConsumption) == 0x000004, "Wrong alignment on VehicleBase_C_TickFuelConsumption");
static_assert(sizeof(VehicleBase_C_TickFuelConsumption) == 0x00003C, "Wrong size on VehicleBase_C_TickFuelConsumption");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, DeltaSeconds) == 0x000000, "Member 'VehicleBase_C_TickFuelConsumption::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, m__bool_Variable) == 0x000004, "Member 'VehicleBase_C_TickFuelConsumption::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, m__float_Variable) == 0x00000C, "Member 'VehicleBase_C_TickFuelConsumption::m__float_Variable' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_IsBoosting_ReturnValue) == 0x000010, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_IsBoosting_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_FMax_ReturnValue) == 0x000014, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, K2Node_Select_Default) == 0x000018, "Member 'VehicleBase_C_TickFuelConsumption::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_GetEngineMaxRotationSpeed_ReturnValue) == 0x00001C, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_GetEngineMaxRotationSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_GetEngineRotationSpeed_ReturnValue) == 0x000020, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_GetEngineRotationSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x000024, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_GetFloatValue_ReturnValue) == 0x000028, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x00002C, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000030, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000034, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickFuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x000038, "Member 'VehicleBase_C_TickFuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.TickBoostSoundTest
// 0x0018 (0x0018 - 0x0000)
struct VehicleBase_C_TickBoostSoundTest final
{
public:
	class UAkComponent*                           CallFunc_GetEngineSoundComponent_ReturnValue;      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue2;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBoosting_ReturnValue;                   // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_TickBoostSoundTest) == 0x000008, "Wrong alignment on VehicleBase_C_TickBoostSoundTest");
static_assert(sizeof(VehicleBase_C_TickBoostSoundTest) == 0x000018, "Wrong size on VehicleBase_C_TickBoostSoundTest");
static_assert(offsetof(VehicleBase_C_TickBoostSoundTest, CallFunc_GetEngineSoundComponent_ReturnValue) == 0x000000, "Member 'VehicleBase_C_TickBoostSoundTest::CallFunc_GetEngineSoundComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBoostSoundTest, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'VehicleBase_C_TickBoostSoundTest::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBoostSoundTest, CallFunc_PostAkEvent_ReturnValue) == 0x00000C, "Member 'VehicleBase_C_TickBoostSoundTest::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBoostSoundTest, CallFunc_PostAkEvent_ReturnValue2) == 0x000010, "Member 'VehicleBase_C_TickBoostSoundTest::CallFunc_PostAkEvent_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBoostSoundTest, CallFunc_Not_PreBool_ReturnValue2) == 0x000014, "Member 'VehicleBase_C_TickBoostSoundTest::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBoostSoundTest, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'VehicleBase_C_TickBoostSoundTest::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBoostSoundTest, CallFunc_BooleanAND_ReturnValue2) == 0x000016, "Member 'VehicleBase_C_TickBoostSoundTest::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBoostSoundTest, CallFunc_IsBoosting_ReturnValue) == 0x000017, "Member 'VehicleBase_C_TickBoostSoundTest::CallFunc_IsBoosting_ReturnValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.TickThrottleSoundTest
// 0x0018 (0x0018 - 0x0000)
struct VehicleBase_C_TickThrottleSoundTest final
{
public:
	class UAkComponent*                           CallFunc_GetEngineSoundComponent_ReturnValue;      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_TickThrottleSoundTest) == 0x000008, "Wrong alignment on VehicleBase_C_TickThrottleSoundTest");
static_assert(sizeof(VehicleBase_C_TickThrottleSoundTest) == 0x000018, "Wrong size on VehicleBase_C_TickThrottleSoundTest");
static_assert(offsetof(VehicleBase_C_TickThrottleSoundTest, CallFunc_GetEngineSoundComponent_ReturnValue) == 0x000000, "Member 'VehicleBase_C_TickThrottleSoundTest::CallFunc_GetEngineSoundComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickThrottleSoundTest, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'VehicleBase_C_TickThrottleSoundTest::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickThrottleSoundTest, CallFunc_PostAkEvent_ReturnValue) == 0x00000C, "Member 'VehicleBase_C_TickThrottleSoundTest::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickThrottleSoundTest, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'VehicleBase_C_TickThrottleSoundTest::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickThrottleSoundTest, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'VehicleBase_C_TickThrottleSoundTest::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.TickBrakeSoundTest
// 0x0018 (0x0018 - 0x0000)
struct VehicleBase_C_TickBrakeSoundTest final
{
public:
	class UAkComponent*                           CallFunc_GetEngineSoundComponent_ReturnValue;      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_TickBrakeSoundTest) == 0x000008, "Wrong alignment on VehicleBase_C_TickBrakeSoundTest");
static_assert(sizeof(VehicleBase_C_TickBrakeSoundTest) == 0x000018, "Wrong size on VehicleBase_C_TickBrakeSoundTest");
static_assert(offsetof(VehicleBase_C_TickBrakeSoundTest, CallFunc_GetEngineSoundComponent_ReturnValue) == 0x000000, "Member 'VehicleBase_C_TickBrakeSoundTest::CallFunc_GetEngineSoundComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBrakeSoundTest, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'VehicleBase_C_TickBrakeSoundTest::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBrakeSoundTest, CallFunc_PostAkEvent_ReturnValue) == 0x00000C, "Member 'VehicleBase_C_TickBrakeSoundTest::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBrakeSoundTest, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'VehicleBase_C_TickBrakeSoundTest::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBrakeSoundTest, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'VehicleBase_C_TickBrakeSoundTest::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBrakeSoundTest, CallFunc_BooleanAND_ReturnValue2) == 0x000012, "Member 'VehicleBase_C_TickBrakeSoundTest::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickBrakeSoundTest, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000013, "Member 'VehicleBase_C_TickBrakeSoundTest::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.TickDynamicCamera
// 0x0180 (0x0180 - 0x0000)
struct VehicleBase_C_TickDynamicCamera final
{
public:
	float                                         CallFunc_GetFpsCameraFov_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslCharacter*                          CallFunc_GetDriver_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue;              // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue2;             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0088(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVelocity_ReturnValue2;                 // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVelocity_ReturnValue3;                 // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_TickDynamicCamera) == 0x000008, "Wrong alignment on VehicleBase_C_TickDynamicCamera");
static_assert(sizeof(VehicleBase_C_TickDynamicCamera) == 0x000180, "Wrong size on VehicleBase_C_TickDynamicCamera");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_GetFpsCameraFov_ReturnValue) == 0x000000, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_GetFpsCameraFov_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_GetDriver_ReturnValue) == 0x000008, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_GetDriver_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_GetSocketLocation_ReturnValue) == 0x000018, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_GetVelocity_ReturnValue) == 0x000024, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_VSize_ReturnValue) == 0x000030, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_MapRangeClamped_ReturnValue) == 0x000034, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_ClampVectorSize_ReturnValue) == 0x000044, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_ClampVectorSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000050, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_BreakRotator_Roll) == 0x00005C, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_BreakRotator_Pitch) == 0x000060, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_BreakRotator_Yaw) == 0x000064, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000068, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_MapRangeClamped_ReturnValue2) == 0x000074, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_MapRangeClamped_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000078, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000088, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_Normal_ReturnValue) == 0x000110, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00011C, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x000120, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_IsLocallyControlled_ReturnValue) == 0x00012C, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_Add_VectorVector_ReturnValue) == 0x000130, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_GetVelocity_ReturnValue2) == 0x00013C, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_GetVelocity_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_Add_VectorVector_ReturnValue2) == 0x000148, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000154, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_GetVelocity_ReturnValue3) == 0x000160, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_GetVelocity_ReturnValue3' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_VInterpTo_ReturnValue) == 0x00016C, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickDynamicCamera, CallFunc_BooleanAND_ReturnValue) == 0x000178, "Member 'VehicleBase_C_TickDynamicCamera::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function VehicleBase.VehicleBase_C.TickIndicators
// 0x0020 (0x0020 - 0x0000)
struct VehicleBase_C_TickIndicators final
{
public:
	bool                                          CallFunc_IsBoosting_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetVehicleFuelPercent_ReturnValue;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VehicleBase_C_TickIndicators) == 0x000004, "Wrong alignment on VehicleBase_C_TickIndicators");
static_assert(sizeof(VehicleBase_C_TickIndicators) == 0x000020, "Wrong size on VehicleBase_C_TickIndicators");
static_assert(offsetof(VehicleBase_C_TickIndicators, CallFunc_IsBoosting_ReturnValue) == 0x000000, "Member 'VehicleBase_C_TickIndicators::CallFunc_IsBoosting_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickIndicators, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000004, "Member 'VehicleBase_C_TickIndicators::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickIndicators, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'VehicleBase_C_TickIndicators::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickIndicators, CallFunc_Sin_ReturnValue) == 0x00000C, "Member 'VehicleBase_C_TickIndicators::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickIndicators, CallFunc_GetVehicleFuelPercent_ReturnValue) == 0x000010, "Member 'VehicleBase_C_TickIndicators::CallFunc_GetVehicleFuelPercent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickIndicators, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'VehicleBase_C_TickIndicators::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickIndicators, CallFunc_Less_FloatFloat_ReturnValue) == 0x000018, "Member 'VehicleBase_C_TickIndicators::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleBase_C_TickIndicators, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x00001C, "Member 'VehicleBase_C_TickIndicators::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");

}

