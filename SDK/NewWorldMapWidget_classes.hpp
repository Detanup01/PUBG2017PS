#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NewWorldMapWidget

#include "Basic.hpp"

#include "InputHookingWidget_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass NewWorldMapWidget.NewWorldMapWidget_C
// 0x0180 (0x0410 - 0x0290)
class UNewWorldMapWidget_C final : public UInputHookingWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       MapFadeOut;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       MapFadeIn;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButton*                                Button_1;                                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetSwitcher*                        HelpWidget;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetSwitcher*                        HelpWidgetXboxSwitcher;                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_0;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_1;                                           // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_2;                                           // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_3;                                           // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_4;                                           // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_5;                                           // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_6;                                           // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_7;                                           // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_8;                                           // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_9;                                           // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_10;                                          // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_11;                                          // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_12;                                          // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_13;                                          // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_14;                                          // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_15;                                          // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UMapGridWidget_C*                       MapWidget;                                         // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButton*                                MinimizeHelpButton;                                // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 PadGuideImg;                                       // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButton*                                RestoreHelpButton;                                 // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCurveFloat*                            MapSizeCurve;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            MapSizeChangeTimeCurve;                            // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              MouseCapturePosotion;                              // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMouseDown;                                        // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time_MapSize;                                      // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bChangeMapSize;                                    // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              StartSize;                                         // 0x0384(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              SizeOffset;                                        // 0x038C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PositionMoveTimeCurve;                             // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Time_Position;                                     // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMovePosition;                                     // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              StartPosition;                                     // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              PositionOffset;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              TestMove;                                          // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WheelUp;                                           // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      AlignmentStack;                                    // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         LastZoomLevel;                                     // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              NewVar_0;                                          // 0x03DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              MouseDownPosition;                                 // 0x03E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NewVar_1;                                          // 0x03EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3ED[0x3];                                      // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewVar_2;                                          // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMapMovingReady;                                   // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsReplaying;                                      // 0x03F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F6[0x2];                                      // 0x03F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnHideMyself;                                      // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCurveFloat*                            ZoomMultiplier;                                    // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_NewWorldMapWidget(int32 EntryPoint);
	void OnInputAxis(float Scale);
	void Destruct();
	void Construct();
	void MovePosition();
	void BndEvt__RestoreHelpButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__MinimizeHelpButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__Button_77_K2Node_ComponentBoundEvent_240_OnButtonClickedEvent__DelegateSignature();
	void StartChangeMapSize(bool bIsPad);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnMarkerForReplay();
	void UpdateZoom(float ZoomOffset);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void UpdateMap(const struct FVector2D& MapSize);
	void InitializeWorldMap();
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void GetZoomRange(float* ZoomMin, float* ZoomMax);
	void TickChangeMapSize(float DeltaTime);
	void ClampPosition(const struct FVector2D& Position, struct FVector2D* ConvertedPosition);
	void IsInMapWidget(const struct FVector2D& Position, bool* IsIn);
	void TickMapPositionMove(float DeltaTime);
	void PlayFadeInAnim(float Playback_Speed);
	void UpdateMapAlignment(const struct FVector2D& Aligment, const struct FVector2D& Size);
	void TestClear();
	void GetMapWidgetScreenLocation(const struct FVector2D& Position, struct FVector2D* LeftTop, struct FVector2D* RightBottom);
	void InitNewWorldMapWidget();
	void DestoryNewWorldMapWidget();
	void OnMarker();
	void MoveMapGrid(const struct FVector2D& AdditionalPos);
	void OnMapMove();
	void OffMapMove();
	void MapMoveX(float Value);
	void MapMoveY(float Value);
	void MapZoom(float AdditaionalZoom);
	void MapMoveGamepadX(float Value);
	void MapMoveGamepadY(float Value);
	void OnPrepass_0(class UWidget* BoundWidget);
	void OnMarkerDelete();
	void OnPutMarkerPad();
	void MapZoomPad(float AdditaionalZoom);
	void OnPadGuideMoveingReayPressed();
	void OnPadGuideMoveingReayReleased();
	void PadGuideMoveUp(float Add);
	void PadGuideMoveRight(float Add);
	void CheckReplayStatus();
	void OnHideWorldMap();
	void SetMapGridPositoin(const struct FVector2D& Position);
	void OnMoveMapGridViewCenterToMyIconCenter();

	void GetMapSize(float Zoom, struct FVector2D* MapSize) const;
	void GetWheelUpAlignment(struct FVector2D* Alignment) const;
	struct FVector ComputeServerToLocalPosition(const struct FVector& Server) const;
	struct FVector2D GetPadGuidePos_UC() const;
	struct FVector2D GetPadGuidePos_MC() const;
	void IsInPadGuideInMap(bool* bIsIn) const;
	struct FVector2D GetMoveMapGridViewCenterToMyIconCenterDir() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NewWorldMapWidget_C">();
	}
	static class UNewWorldMapWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNewWorldMapWidget_C>();
	}
};
static_assert(alignof(UNewWorldMapWidget_C) == 0x000008, "Wrong alignment on UNewWorldMapWidget_C");
static_assert(sizeof(UNewWorldMapWidget_C) == 0x000410, "Wrong size on UNewWorldMapWidget_C");
static_assert(offsetof(UNewWorldMapWidget_C, UberGraphFrame) == 0x000290, "Member 'UNewWorldMapWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, MapFadeOut) == 0x000298, "Member 'UNewWorldMapWidget_C::MapFadeOut' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, MapFadeIn) == 0x0002A0, "Member 'UNewWorldMapWidget_C::MapFadeIn' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Button_1) == 0x0002A8, "Member 'UNewWorldMapWidget_C::Button_1' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, HelpWidget) == 0x0002B0, "Member 'UNewWorldMapWidget_C::HelpWidget' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, HelpWidgetXboxSwitcher) == 0x0002B8, "Member 'UNewWorldMapWidget_C::HelpWidgetXboxSwitcher' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_0) == 0x0002C0, "Member 'UNewWorldMapWidget_C::Image_0' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_1) == 0x0002C8, "Member 'UNewWorldMapWidget_C::Image_1' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_2) == 0x0002D0, "Member 'UNewWorldMapWidget_C::Image_2' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_3) == 0x0002D8, "Member 'UNewWorldMapWidget_C::Image_3' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_4) == 0x0002E0, "Member 'UNewWorldMapWidget_C::Image_4' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_5) == 0x0002E8, "Member 'UNewWorldMapWidget_C::Image_5' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_6) == 0x0002F0, "Member 'UNewWorldMapWidget_C::Image_6' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_7) == 0x0002F8, "Member 'UNewWorldMapWidget_C::Image_7' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_8) == 0x000300, "Member 'UNewWorldMapWidget_C::Image_8' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_9) == 0x000308, "Member 'UNewWorldMapWidget_C::Image_9' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_10) == 0x000310, "Member 'UNewWorldMapWidget_C::Image_10' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_11) == 0x000318, "Member 'UNewWorldMapWidget_C::Image_11' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_12) == 0x000320, "Member 'UNewWorldMapWidget_C::Image_12' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_13) == 0x000328, "Member 'UNewWorldMapWidget_C::Image_13' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_14) == 0x000330, "Member 'UNewWorldMapWidget_C::Image_14' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Image_15) == 0x000338, "Member 'UNewWorldMapWidget_C::Image_15' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, MapWidget) == 0x000340, "Member 'UNewWorldMapWidget_C::MapWidget' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, MinimizeHelpButton) == 0x000348, "Member 'UNewWorldMapWidget_C::MinimizeHelpButton' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, PadGuideImg) == 0x000350, "Member 'UNewWorldMapWidget_C::PadGuideImg' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, RestoreHelpButton) == 0x000358, "Member 'UNewWorldMapWidget_C::RestoreHelpButton' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, MapSizeCurve) == 0x000360, "Member 'UNewWorldMapWidget_C::MapSizeCurve' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, MapSizeChangeTimeCurve) == 0x000368, "Member 'UNewWorldMapWidget_C::MapSizeChangeTimeCurve' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, MouseCapturePosotion) == 0x000370, "Member 'UNewWorldMapWidget_C::MouseCapturePosotion' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, bMouseDown) == 0x000378, "Member 'UNewWorldMapWidget_C::bMouseDown' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Time_MapSize) == 0x00037C, "Member 'UNewWorldMapWidget_C::Time_MapSize' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, bChangeMapSize) == 0x000380, "Member 'UNewWorldMapWidget_C::bChangeMapSize' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, StartSize) == 0x000384, "Member 'UNewWorldMapWidget_C::StartSize' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, SizeOffset) == 0x00038C, "Member 'UNewWorldMapWidget_C::SizeOffset' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, PositionMoveTimeCurve) == 0x000398, "Member 'UNewWorldMapWidget_C::PositionMoveTimeCurve' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, Time_Position) == 0x0003A0, "Member 'UNewWorldMapWidget_C::Time_Position' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, bMovePosition) == 0x0003A4, "Member 'UNewWorldMapWidget_C::bMovePosition' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, StartPosition) == 0x0003A8, "Member 'UNewWorldMapWidget_C::StartPosition' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, PositionOffset) == 0x0003B0, "Member 'UNewWorldMapWidget_C::PositionOffset' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, TestMove) == 0x0003B8, "Member 'UNewWorldMapWidget_C::TestMove' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, WheelUp) == 0x0003C0, "Member 'UNewWorldMapWidget_C::WheelUp' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, AlignmentStack) == 0x0003C8, "Member 'UNewWorldMapWidget_C::AlignmentStack' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, LastZoomLevel) == 0x0003D8, "Member 'UNewWorldMapWidget_C::LastZoomLevel' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, NewVar_0) == 0x0003DC, "Member 'UNewWorldMapWidget_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, MouseDownPosition) == 0x0003E4, "Member 'UNewWorldMapWidget_C::MouseDownPosition' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, NewVar_1) == 0x0003EC, "Member 'UNewWorldMapWidget_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, NewVar_2) == 0x0003F0, "Member 'UNewWorldMapWidget_C::NewVar_2' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, bMapMovingReady) == 0x0003F4, "Member 'UNewWorldMapWidget_C::bMapMovingReady' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, bIsReplaying) == 0x0003F5, "Member 'UNewWorldMapWidget_C::bIsReplaying' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, OnHideMyself) == 0x0003F8, "Member 'UNewWorldMapWidget_C::OnHideMyself' has a wrong offset!");
static_assert(offsetof(UNewWorldMapWidget_C, ZoomMultiplier) == 0x000408, "Member 'UNewWorldMapWidget_C::ZoomMultiplier' has a wrong offset!");

}

