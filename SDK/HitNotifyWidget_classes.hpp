#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HitNotifyWidget

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "TslGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass HitNotifyWidget.HitNotifyWidget_C
// 0x0030 (0x0270 - 0x0240)
class UHitNotifyWidget_C final : public UUserWidget
{
public:
	class UWidgetAnimation*                       FadeOut;                                           // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCanvasPanel*                           CanvasPanel_2;                                     // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Image_2;                                           // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UMaterialInstanceDynamic*               MaskMaterialInstance;                              // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          HitNotifyManSoundAk;                               // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAkAudioEvent*                          HitNotifyWomanSoundAk;                             // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void OnHitNotify(float DamagePercent, EDamageTypeCategory DamageTypeCategory);
	void PlayHitNotifySound();
	void SetRTPCValue(const class FString& RTPC, float Value);
	void PostAkEvent(class UAkAudioEvent* AkEvent);

	void GetRandomTranslation(struct FVector2D* Translation) const;
	void GetRandomScale(struct FVector2D* Scale) const;
	void DamagedPercentToDamagePercent(float DamagedPercent, float* DamagePercent) const;
	void GetPlayerHealthPercent(float* HealthPercent) const;
	void DamagedPercentToDamage(float DamagedPercent, float* Damage) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HitNotifyWidget_C">();
	}
	static class UHitNotifyWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitNotifyWidget_C>();
	}
};
static_assert(alignof(UHitNotifyWidget_C) == 0x000008, "Wrong alignment on UHitNotifyWidget_C");
static_assert(sizeof(UHitNotifyWidget_C) == 0x000270, "Wrong size on UHitNotifyWidget_C");
static_assert(offsetof(UHitNotifyWidget_C, FadeOut) == 0x000240, "Member 'UHitNotifyWidget_C::FadeOut' has a wrong offset!");
static_assert(offsetof(UHitNotifyWidget_C, CanvasPanel_2) == 0x000248, "Member 'UHitNotifyWidget_C::CanvasPanel_2' has a wrong offset!");
static_assert(offsetof(UHitNotifyWidget_C, Image_2) == 0x000250, "Member 'UHitNotifyWidget_C::Image_2' has a wrong offset!");
static_assert(offsetof(UHitNotifyWidget_C, MaskMaterialInstance) == 0x000258, "Member 'UHitNotifyWidget_C::MaskMaterialInstance' has a wrong offset!");
static_assert(offsetof(UHitNotifyWidget_C, HitNotifyManSoundAk) == 0x000260, "Member 'UHitNotifyWidget_C::HitNotifyManSoundAk' has a wrong offset!");
static_assert(offsetof(UHitNotifyWidget_C, HitNotifyWomanSoundAk) == 0x000268, "Member 'UHitNotifyWidget_C::HitNotifyWomanSoundAk' has a wrong offset!");

}

