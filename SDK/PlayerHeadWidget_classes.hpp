#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerHeadWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TslGame_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass PlayerHeadWidget.PlayerHeadWidget_C
// 0x0110 (0x0360 - 0x0250)
class UPlayerHeadWidget_C final : public UObserverTagWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ScaleOpacityByDistance;                            // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 BoostGague;                                        // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                CharacterNameTag;                                  // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                HeadBorder;                                        // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             PlayerTagName;                                     // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTslHealthGaugeBpWidget_C*              TslHealthGaugeBpWidget_87;                         // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           VerticalBox_9;                                     // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             WeaponHandsOnLoadedAmmoCount;                      // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 weaponImage;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USizeBox*                               WeaponImageSizeBox;                                // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UMaterialInstanceDynamic*               BoostMaterial;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UBorder*                                BoostBody;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ATslWeapon*                             TslWeapon;                                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               ItemIconMaterial;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ListInSlot;                                        // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FString                                 PlayerName;                                        // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FSlateColor                            SelectedColor;                                     // 0x02E0(0x0028)(Edit, BlueprintVisible)
	struct FSlateColor                            FreeCamColor;                                      // 0x0308(0x0028)(Edit, BlueprintVisible)
	struct FSlateColor                            TeamMemberColor;                                   // 0x0330(0x0028)(Edit, BlueprintVisible)
	float                                         OffsetY;                                           // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_PlayerHeadWidget(int32 EntryPoint);
	void SetCharacterIconPosition_UC(const struct FVector2D& Pos_UC, bool IsHidden);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void UpdateHealthGauge();
	void GetGroggyHealthPercent(float* GroggyHealth);
	void GetHealthPercent(float* Health);
	void IsGroggy(bool* IsGroggy_0);
	void InitBoostGauge();
	void SetBoostGauge(float BoostGauge);
	void UpdateBoostGauge();
	void GetBoostGauge(float* BoostGauge);
	void GetTslWeaponVisibility(ESlateVisibility* Visible);
	void On_WeaponImageSizeBox_Prepass_0(class UWidget* BoundWidget);
	void On_weaponImage_Prepass_0(class UWidget* BoundWidget);
	void UpdateIcon();
	struct FLinearColor GetTslWeaponColor();
	void GetWeaponProcessor(class AWeaponProcessor** WeaponProcessor);
	void IsCurrentWeapon(bool* bCurrentWeapon);
	void GetWeaponIndex(int32* SlotIndex_0);
	void GetAmmoWeapon(int32* Ammo);
	void GetCurrentWeapon(class ATslWeapon** CurrentWeapon);
	void On_WeaponHandsOnLoadedAmmoCount_Prepass_0(class UWidget* BoundWidget);
	void GetCurrentWeaponGun(class ATslWeapon_Gun** WeaponGun);
	class FText Get_PlayerName_Text_0();
	void UpdateTextColor();
	void OnPrepass_0(class UWidget* BoundWidget);
	void OnPrepass_1(class UWidget* BoundWidget);
	void IsEmptyPlayerName(bool* EmptyPlayerName);
	void On_HeadBorder_Prepass_0(class UWidget* BoundWidget);
	void AddAlphaWhenADS(class UWidget* BoundWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerHeadWidget_C">();
	}
	static class UPlayerHeadWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerHeadWidget_C>();
	}
};
static_assert(alignof(UPlayerHeadWidget_C) == 0x000008, "Wrong alignment on UPlayerHeadWidget_C");
static_assert(sizeof(UPlayerHeadWidget_C) == 0x000360, "Wrong size on UPlayerHeadWidget_C");
static_assert(offsetof(UPlayerHeadWidget_C, UberGraphFrame) == 0x000250, "Member 'UPlayerHeadWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, ScaleOpacityByDistance) == 0x000258, "Member 'UPlayerHeadWidget_C::ScaleOpacityByDistance' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, BoostGague) == 0x000260, "Member 'UPlayerHeadWidget_C::BoostGague' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, CharacterNameTag) == 0x000268, "Member 'UPlayerHeadWidget_C::CharacterNameTag' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, HeadBorder) == 0x000270, "Member 'UPlayerHeadWidget_C::HeadBorder' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, PlayerTagName) == 0x000278, "Member 'UPlayerHeadWidget_C::PlayerTagName' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, TslHealthGaugeBpWidget_87) == 0x000280, "Member 'UPlayerHeadWidget_C::TslHealthGaugeBpWidget_87' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, VerticalBox_9) == 0x000288, "Member 'UPlayerHeadWidget_C::VerticalBox_9' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, WeaponHandsOnLoadedAmmoCount) == 0x000290, "Member 'UPlayerHeadWidget_C::WeaponHandsOnLoadedAmmoCount' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, weaponImage) == 0x000298, "Member 'UPlayerHeadWidget_C::weaponImage' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, WeaponImageSizeBox) == 0x0002A0, "Member 'UPlayerHeadWidget_C::WeaponImageSizeBox' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, BoostMaterial) == 0x0002A8, "Member 'UPlayerHeadWidget_C::BoostMaterial' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, BoostBody) == 0x0002B0, "Member 'UPlayerHeadWidget_C::BoostBody' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, TslWeapon) == 0x0002B8, "Member 'UPlayerHeadWidget_C::TslWeapon' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, ItemIconMaterial) == 0x0002C0, "Member 'UPlayerHeadWidget_C::ItemIconMaterial' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, ListInSlot) == 0x0002C8, "Member 'UPlayerHeadWidget_C::ListInSlot' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, SlotIndex) == 0x0002CC, "Member 'UPlayerHeadWidget_C::SlotIndex' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, PlayerName) == 0x0002D0, "Member 'UPlayerHeadWidget_C::PlayerName' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, SelectedColor) == 0x0002E0, "Member 'UPlayerHeadWidget_C::SelectedColor' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, FreeCamColor) == 0x000308, "Member 'UPlayerHeadWidget_C::FreeCamColor' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, TeamMemberColor) == 0x000330, "Member 'UPlayerHeadWidget_C::TeamMemberColor' has a wrong offset!");
static_assert(offsetof(UPlayerHeadWidget_C, OffsetY) == 0x000358, "Member 'UPlayerHeadWidget_C::OffsetY' has a wrong offset!");

}

