#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeneralSettingWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BaseOptionWidget_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass GeneralSettingWidget.GeneralSettingWidget_C
// 0x0028 (0x02A0 - 0x0278)
class UGeneralSettingWidget_C final : public UBaseOptionWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildOptionTitleWidget_C*              ChildOptionTitleWidget;                            // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UQualityComboBox_C*                     HighlightAutoClipsComboBox;                        // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UQualityComboBox_C*                     LanguageComboBox;                                  // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UQualityComboBox_C*                     MiniMaptypeComboBox;                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)

public:
	void ExecuteUbergraph_GeneralSettingWidget(int32 EntryPoint);
	void OnReset();
	void OnDefault();
	void OnApply();
	void Construct();
	void InitializeResolutionIWidget(bool bConstruct);
	bool GetResolutionEnabled();
	void SettingDefault();
	void ApplyMiniMapType();
	bool IsEnable_VideoCapture();

	void GetLanguageCultureName(class FString* CultureName) const;
	bool IsChanged() const;
	void IsChangeVideoCapture(bool* IsChange) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GeneralSettingWidget_C">();
	}
	static class UGeneralSettingWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneralSettingWidget_C>();
	}
};
static_assert(alignof(UGeneralSettingWidget_C) == 0x000008, "Wrong alignment on UGeneralSettingWidget_C");
static_assert(sizeof(UGeneralSettingWidget_C) == 0x0002A0, "Wrong size on UGeneralSettingWidget_C");
static_assert(offsetof(UGeneralSettingWidget_C, UberGraphFrame) == 0x000278, "Member 'UGeneralSettingWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGeneralSettingWidget_C, ChildOptionTitleWidget) == 0x000280, "Member 'UGeneralSettingWidget_C::ChildOptionTitleWidget' has a wrong offset!");
static_assert(offsetof(UGeneralSettingWidget_C, HighlightAutoClipsComboBox) == 0x000288, "Member 'UGeneralSettingWidget_C::HighlightAutoClipsComboBox' has a wrong offset!");
static_assert(offsetof(UGeneralSettingWidget_C, LanguageComboBox) == 0x000290, "Member 'UGeneralSettingWidget_C::LanguageComboBox' has a wrong offset!");
static_assert(offsetof(UGeneralSettingWidget_C, MiniMaptypeComboBox) == 0x000298, "Member 'UGeneralSettingWidget_C::MiniMaptypeComboBox' has a wrong offset!");

}

