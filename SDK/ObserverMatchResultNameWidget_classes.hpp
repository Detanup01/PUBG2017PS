#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ObserverMatchResultNameWidget

#include "Basic.hpp"

#include "TslGame_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ObserverMatchResultNameWidget.ObserverMatchResultNameWidget_C
// 0x0048 (0x0288 - 0x0240)
class UObserverMatchResultNameWidget_C final : public UUserWidget
{
public:
	class UTextBlock*                             KillCount;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             Kills;                                             // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             PlayerName;                                        // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             Slash;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	bool                                          bShow;                                             // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSmall;                                            // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTslPlayerMatchResultInfo              PlayerMatchResultInfo;                             // 0x0268(0x0020)(Edit, BlueprintVisible)

public:
	void OnPrepass_0(class UWidget* BoundWidget);
	void On_KillCount_Prepass_0(class UWidget* BoundWidget);
	void On_PlayerName_Prepass_0(class UWidget* BoundWidget);
	void On_Slash_Prepass_0(class UWidget* BoundWidget);
	void On_Kills_Prepass_0(class UWidget* BoundWidget);
	void SetSmall(bool bSmall_0);

	void GetKillFontSize(int32* FontSize) const;
	void GetPlayerNameFontSize(int32* FontSize) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ObserverMatchResultNameWidget_C">();
	}
	static class UObserverMatchResultNameWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObserverMatchResultNameWidget_C>();
	}
};
static_assert(alignof(UObserverMatchResultNameWidget_C) == 0x000008, "Wrong alignment on UObserverMatchResultNameWidget_C");
static_assert(sizeof(UObserverMatchResultNameWidget_C) == 0x000288, "Wrong size on UObserverMatchResultNameWidget_C");
static_assert(offsetof(UObserverMatchResultNameWidget_C, KillCount) == 0x000240, "Member 'UObserverMatchResultNameWidget_C::KillCount' has a wrong offset!");
static_assert(offsetof(UObserverMatchResultNameWidget_C, Kills) == 0x000248, "Member 'UObserverMatchResultNameWidget_C::Kills' has a wrong offset!");
static_assert(offsetof(UObserverMatchResultNameWidget_C, PlayerName) == 0x000250, "Member 'UObserverMatchResultNameWidget_C::PlayerName' has a wrong offset!");
static_assert(offsetof(UObserverMatchResultNameWidget_C, Slash) == 0x000258, "Member 'UObserverMatchResultNameWidget_C::Slash' has a wrong offset!");
static_assert(offsetof(UObserverMatchResultNameWidget_C, bShow) == 0x000260, "Member 'UObserverMatchResultNameWidget_C::bShow' has a wrong offset!");
static_assert(offsetof(UObserverMatchResultNameWidget_C, bSmall) == 0x000261, "Member 'UObserverMatchResultNameWidget_C::bSmall' has a wrong offset!");
static_assert(offsetof(UObserverMatchResultNameWidget_C, PlayerMatchResultInfo) == 0x000268, "Member 'UObserverMatchResultNameWidget_C::PlayerMatchResultInfo' has a wrong offset!");

}

