#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Motorbike_04_SideCar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Motorbike_04_SideCar.BP_Motorbike_04_SideCar_C.ExecuteUbergraph_BP_Motorbike_04_SideCar
// 0x0070 (0x0070 - 0x0000)
struct BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float KillingDamage, struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasContact_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue2;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue2;             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue2;          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0030(0x0008)()
	float                                         K2Node_CustomEvent_KillingDamage;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           K2Node_CustomEvent_DamageEvent;                    // 0x0040(0x0018)(ConstParm)
	class ATslPlayerState*                        K2Node_CustomEvent_PlayerInstigator;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 K2Node_CustomEvent_DamageCauser;                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetVehicleHealth_ReturnValue;             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar) == 0x000008, "Wrong alignment on BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar");
static_assert(sizeof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar) == 0x000070, "Wrong size on BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, EntryPoint) == 0x000000, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, CallFunc_HasAuthority_ReturnValue) == 0x00001C, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, CallFunc_HasContact_ReturnValue) == 0x00001D, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::CallFunc_HasContact_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, CallFunc_Not_PreBool_ReturnValue) == 0x00001E, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, K2Node_InputAxisEvent_AxisValue2) == 0x000020, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::K2Node_InputAxisEvent_AxisValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, K2Node_InputAxisEvent_AxisValue) == 0x000024, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, CallFunc_Less_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000029, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, CallFunc_Less_FloatFloat_ReturnValue2) == 0x00002A, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::CallFunc_Less_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, CallFunc_Greater_FloatFloat_ReturnValue2) == 0x00002B, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::CallFunc_Greater_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, CallFunc_K2_SetTimer_ReturnValue) == 0x000030, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, K2Node_CustomEvent_KillingDamage) == 0x000038, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::K2Node_CustomEvent_KillingDamage' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, K2Node_CustomEvent_DamageEvent) == 0x000040, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::K2Node_CustomEvent_DamageEvent' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, K2Node_CustomEvent_PlayerInstigator) == 0x000058, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::K2Node_CustomEvent_PlayerInstigator' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, K2Node_CustomEvent_DamageCauser) == 0x000060, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::K2Node_CustomEvent_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, CallFunc_GetVehicleHealth_ReturnValue) == 0x000068, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::CallFunc_GetVehicleHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_Motorbike_04_SideCar_C_ExecuteUbergraph_BP_Motorbike_04_SideCar::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Motorbike_04_SideCar.BP_Motorbike_04_SideCar_C.OnDeath_Event_0
// 0x0030 (0x0030 - 0x0000)
struct BP_Motorbike_04_SideCar_C_OnDeath_Event_0 final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm)
	class ATslPlayerState*                        PlayerInstigator;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 DamageCauser;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_SideCar_C_OnDeath_Event_0) == 0x000008, "Wrong alignment on BP_Motorbike_04_SideCar_C_OnDeath_Event_0");
static_assert(sizeof(BP_Motorbike_04_SideCar_C_OnDeath_Event_0) == 0x000030, "Wrong size on BP_Motorbike_04_SideCar_C_OnDeath_Event_0");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_OnDeath_Event_0, KillingDamage) == 0x000000, "Member 'BP_Motorbike_04_SideCar_C_OnDeath_Event_0::KillingDamage' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_OnDeath_Event_0, DamageEvent) == 0x000008, "Member 'BP_Motorbike_04_SideCar_C_OnDeath_Event_0::DamageEvent' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_OnDeath_Event_0, PlayerInstigator) == 0x000020, "Member 'BP_Motorbike_04_SideCar_C_OnDeath_Event_0::PlayerInstigator' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_OnDeath_Event_0, DamageCauser) == 0x000028, "Member 'BP_Motorbike_04_SideCar_C_OnDeath_Event_0::DamageCauser' has a wrong offset!");

// Function BP_Motorbike_04_SideCar.BP_Motorbike_04_SideCar_C.InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13
// 0x0004 (0x0004 - 0x0000)
struct BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13) == 0x000004, "Wrong alignment on BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13");
static_assert(sizeof(BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13) == 0x000004, "Wrong size on BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13, AxisValue) == 0x000000, "Member 'BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13::AxisValue' has a wrong offset!");

// Function BP_Motorbike_04_SideCar.BP_Motorbike_04_SideCar_C.InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7
// 0x0004 (0x0004 - 0x0000)
struct BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7) == 0x000004, "Wrong alignment on BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7");
static_assert(sizeof(BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7) == 0x000004, "Wrong size on BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7, AxisValue) == 0x000000, "Member 'BP_Motorbike_04_SideCar_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7::AxisValue' has a wrong offset!");

// Function BP_Motorbike_04_SideCar.BP_Motorbike_04_SideCar_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Motorbike_04_SideCar_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_SideCar_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Motorbike_04_SideCar_C_ReceiveTick");
static_assert(sizeof(BP_Motorbike_04_SideCar_C_ReceiveTick) == 0x000004, "Wrong size on BP_Motorbike_04_SideCar_C_ReceiveTick");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Motorbike_04_SideCar_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Motorbike_04_SideCar.BP_Motorbike_04_SideCar_C.InitCache
// 0x0010 (0x0010 - 0x0000)
struct BP_Motorbike_04_SideCar_C_InitCache final
{
public:
	class UTslWheeledVehicleMovement*             K2Node_DynamicCast_AsTsl_Wheeled_Vehicle_Movement; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_SideCar_C_InitCache) == 0x000008, "Wrong alignment on BP_Motorbike_04_SideCar_C_InitCache");
static_assert(sizeof(BP_Motorbike_04_SideCar_C_InitCache) == 0x000010, "Wrong size on BP_Motorbike_04_SideCar_C_InitCache");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_InitCache, K2Node_DynamicCast_AsTsl_Wheeled_Vehicle_Movement) == 0x000000, "Member 'BP_Motorbike_04_SideCar_C_InitCache::K2Node_DynamicCast_AsTsl_Wheeled_Vehicle_Movement' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_InitCache, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_Motorbike_04_SideCar_C_InitCache::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Motorbike_04_SideCar.BP_Motorbike_04_SideCar_C.Process_FuelConsumption
// 0x0038 (0x0038 - 0x0000)
struct BP_Motorbike_04_SideCar_C_Process_FuelConsumption final
{
public:
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetThrottleInput_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetEngineMaxRotationSpeed_ReturnValue;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetEngineRotationSpeed_ReturnValue;       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption) == 0x000004, "Wrong alignment on BP_Motorbike_04_SideCar_C_Process_FuelConsumption");
static_assert(sizeof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption) == 0x000038, "Wrong size on BP_Motorbike_04_SideCar_C_Process_FuelConsumption");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_GetVelocity_ReturnValue) == 0x000000, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_VSize_ReturnValue) == 0x00000C, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_GetThrottleInput_ReturnValue) == 0x000018, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_GetThrottleInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_FMax_ReturnValue) == 0x00001C, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_GetEngineMaxRotationSpeed_ReturnValue) == 0x000020, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_GetEngineMaxRotationSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_GetEngineRotationSpeed_ReturnValue) == 0x000024, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_GetEngineRotationSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000030, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_Process_FuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000034, "Member 'BP_Motorbike_04_SideCar_C_Process_FuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");

// Function BP_Motorbike_04_SideCar.BP_Motorbike_04_SideCar_C.ProcessCamera
// 0x0140 (0x0140 - 0x0000)
struct BP_Motorbike_04_SideCar_C_ProcessCamera final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue2;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslCharacter*                          CallFunc_GetDriver_ReturnValue;                    // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue3;            // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Motorbike_04_SideCar_C_ProcessCamera) == 0x000008, "Wrong alignment on BP_Motorbike_04_SideCar_C_ProcessCamera");
static_assert(sizeof(BP_Motorbike_04_SideCar_C_ProcessCamera) == 0x000140, "Wrong size on BP_Motorbike_04_SideCar_C_ProcessCamera");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_BreakRotator_Roll) == 0x000004, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_BreakRotator_Pitch) == 0x000008, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_BreakRotator_Yaw) == 0x00000C, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000010, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_Abs_ReturnValue) == 0x00001C, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_GetUpVector_ReturnValue) == 0x000020, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_MapRangeClamped_ReturnValue) == 0x00002C, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_MapRangeClamped_ReturnValue2) == 0x000030, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_MapRangeClamped_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000040, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_Multiply_VectorVector_ReturnValue) == 0x00004C, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_Normal_ReturnValue) == 0x000058, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_GetDriver_ReturnValue) == 0x000068, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_GetDriver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x000070, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_IsValid_ReturnValue) == 0x00007C, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_Add_VectorVector_ReturnValue) == 0x000080, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_GetSocketLocation_ReturnValue) == 0x00008C, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_IsActive_ReturnValue) == 0x000098, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_Add_VectorVector_ReturnValue2) == 0x00009C, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_Add_VectorVector_ReturnValue3) == 0x0000A8, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_Add_VectorVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_SideCar_C_ProcessCamera, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000B8, "Member 'BP_Motorbike_04_SideCar_C_ProcessCamera::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

}

