#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ParachuteVehicleWidget

#include "Basic.hpp"

#include "ParachuteVehicleWidget_classes.hpp"
#include "ParachuteVehicleWidget_parameters.hpp"


namespace SDK
{

// Function ParachuteVehicleWidget.ParachuteVehicleWidget_C.ExecuteUbergraph_ParachuteVehicleWidget
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UParachuteVehicleWidget_C::ExecuteUbergraph_ParachuteVehicleWidget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ParachuteVehicleWidget_C", "ExecuteUbergraph_ParachuteVehicleWidget");

	Params::ParachuteVehicleWidget_C_ExecuteUbergraph_ParachuteVehicleWidget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ParachuteVehicleWidget.ParachuteVehicleWidget_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UParachuteVehicleWidget_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ParachuteVehicleWidget_C", "Tick");

	Params::ParachuteVehicleWidget_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ParachuteVehicleWidget.ParachuteVehicleWidget_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UParachuteVehicleWidget_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ParachuteVehicleWidget_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ParachuteVehicleWidget.ParachuteVehicleWidget_C.OnPrepass_ParachuteWidgetVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          BoundWidget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UParachuteVehicleWidget_C::OnPrepass_ParachuteWidgetVisibility(class UWidget* BoundWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ParachuteVehicleWidget_C", "OnPrepass_ParachuteWidgetVisibility");

	Params::ParachuteVehicleWidget_C_OnPrepass_ParachuteWidgetVisibility Parms{};

	Parms.BoundWidget = BoundWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ParachuteVehicleWidget.ParachuteVehicleWidget_C.Get_AirSpeed_Text_0
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UParachuteVehicleWidget_C::Get_AirSpeed_Text_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ParachuteVehicleWidget_C", "Get_AirSpeed_Text_0");

	Params::ParachuteVehicleWidget_C_Get_AirSpeed_Text_0 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ParachuteVehicleWidget.ParachuteVehicleWidget_C.On_Parachute_Prepass_0
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          BoundWidget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UParachuteVehicleWidget_C::On_Parachute_Prepass_0(class UWidget* BoundWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ParachuteVehicleWidget_C", "On_Parachute_Prepass_0");

	Params::ParachuteVehicleWidget_C_On_Parachute_Prepass_0 Parms{};

	Parms.BoundWidget = BoundWidget;

	UObject::ProcessEvent(Func, &Parms);
}

}

