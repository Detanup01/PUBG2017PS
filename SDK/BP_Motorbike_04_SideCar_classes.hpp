#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Motorbike_04_SideCar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TslGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Motorbike_04_SideCar.BP_Motorbike_04_SideCar_C
// 0x0070 (0x08F0 - 0x0880)
class ABP_Motorbike_04_SideCar_C final : public ATslMotorbikeVehicle_Sidecar
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0880(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere2;                                           // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UMotorbikeVehicleSeatInteraction*       SideCarSeat;                                       // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USphereComponent*                       Sphere1;                                           // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UMotorbikeVehicleSeatInteraction*       PassengerSeat;                                     // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USphereComponent*                       Sphere;                                            // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UMotorbikeVehicleSeatInteraction*       DirverSeat;                                        // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class URadialForceComponent*                  RadialForce;                                       // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UCameraComponent*                       ThirdPersonCameraInVehicle;                        // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USpringArmInVehicleComponent*           ThirdPersonSpringArmInVehicle;                     // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UCameraComponent*                       FirstPersonCameraInVehicle;                        // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USpringArmInVehicleComponent*           FirstPersonSpringArmInVehicle;                     // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UTslWheeledVehicleMovement*             TslMovementRef;                                    // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         FuelEfficiency;                                    // 0x08E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Motorbike_04_SideCar(int32 EntryPoint);
	void OnDeath_Event_0(float KillingDamage, const struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser);
	void InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13(float AxisValue);
	void InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7(float AxisValue);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void InitCache();
	void Process_FuelConsumption();
	void ProcessCamera();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Motorbike_04_SideCar_C">();
	}
	static class ABP_Motorbike_04_SideCar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Motorbike_04_SideCar_C>();
	}
};
static_assert(alignof(ABP_Motorbike_04_SideCar_C) == 0x000008, "Wrong alignment on ABP_Motorbike_04_SideCar_C");
static_assert(sizeof(ABP_Motorbike_04_SideCar_C) == 0x0008F0, "Wrong size on ABP_Motorbike_04_SideCar_C");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, UberGraphFrame) == 0x000880, "Member 'ABP_Motorbike_04_SideCar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, Sphere2) == 0x000888, "Member 'ABP_Motorbike_04_SideCar_C::Sphere2' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, SideCarSeat) == 0x000890, "Member 'ABP_Motorbike_04_SideCar_C::SideCarSeat' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, Sphere1) == 0x000898, "Member 'ABP_Motorbike_04_SideCar_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, PassengerSeat) == 0x0008A0, "Member 'ABP_Motorbike_04_SideCar_C::PassengerSeat' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, Sphere) == 0x0008A8, "Member 'ABP_Motorbike_04_SideCar_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, DirverSeat) == 0x0008B0, "Member 'ABP_Motorbike_04_SideCar_C::DirverSeat' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, RadialForce) == 0x0008B8, "Member 'ABP_Motorbike_04_SideCar_C::RadialForce' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, ThirdPersonCameraInVehicle) == 0x0008C0, "Member 'ABP_Motorbike_04_SideCar_C::ThirdPersonCameraInVehicle' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, ThirdPersonSpringArmInVehicle) == 0x0008C8, "Member 'ABP_Motorbike_04_SideCar_C::ThirdPersonSpringArmInVehicle' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, FirstPersonCameraInVehicle) == 0x0008D0, "Member 'ABP_Motorbike_04_SideCar_C::FirstPersonCameraInVehicle' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, FirstPersonSpringArmInVehicle) == 0x0008D8, "Member 'ABP_Motorbike_04_SideCar_C::FirstPersonSpringArmInVehicle' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, TslMovementRef) == 0x0008E0, "Member 'ABP_Motorbike_04_SideCar_C::TslMovementRef' has a wrong offset!");
static_assert(offsetof(ABP_Motorbike_04_SideCar_C, FuelEfficiency) == 0x0008E8, "Member 'ABP_Motorbike_04_SideCar_C::FuelEfficiency' has a wrong offset!");

}

