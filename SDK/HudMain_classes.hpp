#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HudMain

#include "Basic.hpp"

#include "TslGame_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass HudMain.HudMain_C
// 0x0120 (0x0360 - 0x0240)
class UHudMain_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           BaseCanvas;                                        // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBP_CompassWidget_C*                    BP_CompassWidget;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBP_EquipableItemIconHudWidget_C*       BP_EquipableItemIconHudWidget;                     // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBP_FppWeaponSlotHudWidget_C*           BP_FppWeaponSlotHudWidget;                         // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBP_InteractionWidget_C*                BP_InteractionWidget_152;                          // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBP_StanceManagerWidget_C*              BP_StanceManagerWidget;                            // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBP_TeamWidget_C*                       BP_TeamWidget;                                     // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBP_WeaponSlotHudWidget_C*              BP_WeaponSlotHudWidget;                            // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBreatheBarWidget_C*                    BreatheBarWidget_90;                               // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCarePackageInteractionWidget_C*        CarePackageInteractionWidget;                      // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCarePackgeItemListWidget_C*            CarePackgeItemListWidget;                          // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCanvasPanel*                           CharacterCanvas;                                   // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCoherentUIGTWidget*                    CoherentUIGTWidget_54;                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCountDownWidget_C*                     CountDownWidget_620;                               // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                MiniMapBorder;                                     // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UMiniMapWidget_C*                       MiniMapWidget_146;                                 // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 ObserverCrossHair;                                 // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UObserverTagManagerWidget_C*            ObserverTagManagerWidget;                          // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCanvasPanel*                           OverlayCanvas;                                     // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UParachuteVehicleWidget_C*              ParachuteVehicleWidget_861;                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USpectatingSelectionWidget_C*           SpectatingSelectionWidget;                         // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCanvasPanel*                           TeamWidgetCanvas;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class ATslHUD*                                HUD;                                               // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   PlayerController;                                  // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	UMulticastDelegateProperty_                   ButtonClickedDispatcher;                           // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UHitNotifyWidget_C*                     HitNotify;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Old;                                               // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         MiniMapTypes;                                      // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          IsShowPlayerList;                                  // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorBlindColorSet                    ColorBlindColorSet_SpetatingName;                  // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bNeedInit;                                         // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ReplayGetTimeHandler;                              // 0x0358(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_HudMain(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void CreateCheckReplayTimer();
	void CheckReplayTimer();
	void HideMapForReplay();
	void OnShowWidget(const class FString& WidgetName, bool bShow);
	void Construct();
	void InitializeHUD(bool bIsReplaying);
	void OnPossessPawnChange();
	float GetHpRatio();
	class FText Get_HealthMax_Text_0();
	class FText Get_Health_Text_0();
	class FText Get_NumPlayersLeft_Text_0();
	class FText Get_PlayerCoordinate_Text_0();
	void OnKey_ToggleInventory();
	void OnToggleMap();
	class FText Get_DebugInformation_Text_0();
	struct FLinearColor GetFillColorAndOpacity_0();
	float Get_Vehicle_Health_Ratio();
	void OnKey_SystemMenuOrEscape();
	struct FLinearColor Get_HealthBar_FillColorAndOpacity_0();
	void OnButtonClick(const class FString& ButotnName);
	void OnDisplayKilledMessage(const struct FDeathMessage& DeathMessage);
	void OnDisplaySystemMessage(ESystemMessageType MessageType, const class FText& Message);
	ESlateVisibility Get_VisibilityOnMatchState();
	ESlateVisibility Get_ParachuteText_Visibility_0();
	void OnNitifyHit(float DamagePercent, EDamageTypeCategory DamageTypeCategory);
	float GetBoostRatio();
	void On_BaseCanvas_Prepass_0(class UWidget* BoundWidget);
	void OnPrepass_VisibilityOnMatchState(class UWidget* BoundWidget);
	void OnPrepass_0(class UWidget* BoundWidget);
	void On_OnlySpectating_Prepass_0(class UWidget* BoundWidget);
	class FText Get_TextBlock_1_Text_0();
	void On_InventoryShowHiddenCanvas_Prepass_0(class UWidget* BoundWidget);
	void OnToggleInventory(bool Bold);
	void IsCharacterAlive(bool* IsAlive);
	void On_SpectatingKeyInfo_Prepass_0(class UWidget* BoundWidget);
	class FText Get_KeyInfo_Text_0();
	void OnTogglePlayerList();
	void On_CharacterCanvas_Prepass_0(class UWidget* BoundWidget);
	void OnPrepass_1(class UWidget* BoundWidget);
	class FText Get_Spectating_Text_0();
	void On_BlueZoneGpsWidget_RoundType_Prepass_0(class UWidget* BoundWidget);
	void OnShowCarePackageItemList();
	void OnKey_MapPressed();
	void OnKey_MapReleased();
	void OnMapShow();
	void OnMapHide();
	void OnToggleBattleList();
	void ShowReplayTimeline();
	void On_Name_Prepass_0(class UWidget* BoundWidget);
	void OnToggleOption();
	void InitForReplay();
	void OnKey_ReplayMenuOrEscape();
	void BindEventForMapClosing();

	void IsShowMapOrInventory(bool* bIsShow) const;
	void GetMiniMapType(int32 Index_0, class UClass** MiniMapype) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HudMain_C">();
	}
	static class UHudMain_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudMain_C>();
	}
};
static_assert(alignof(UHudMain_C) == 0x000008, "Wrong alignment on UHudMain_C");
static_assert(sizeof(UHudMain_C) == 0x000360, "Wrong size on UHudMain_C");
static_assert(offsetof(UHudMain_C, UberGraphFrame) == 0x000240, "Member 'UHudMain_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHudMain_C, BaseCanvas) == 0x000248, "Member 'UHudMain_C::BaseCanvas' has a wrong offset!");
static_assert(offsetof(UHudMain_C, BP_CompassWidget) == 0x000250, "Member 'UHudMain_C::BP_CompassWidget' has a wrong offset!");
static_assert(offsetof(UHudMain_C, BP_EquipableItemIconHudWidget) == 0x000258, "Member 'UHudMain_C::BP_EquipableItemIconHudWidget' has a wrong offset!");
static_assert(offsetof(UHudMain_C, BP_FppWeaponSlotHudWidget) == 0x000260, "Member 'UHudMain_C::BP_FppWeaponSlotHudWidget' has a wrong offset!");
static_assert(offsetof(UHudMain_C, BP_InteractionWidget_152) == 0x000268, "Member 'UHudMain_C::BP_InteractionWidget_152' has a wrong offset!");
static_assert(offsetof(UHudMain_C, BP_StanceManagerWidget) == 0x000270, "Member 'UHudMain_C::BP_StanceManagerWidget' has a wrong offset!");
static_assert(offsetof(UHudMain_C, BP_TeamWidget) == 0x000278, "Member 'UHudMain_C::BP_TeamWidget' has a wrong offset!");
static_assert(offsetof(UHudMain_C, BP_WeaponSlotHudWidget) == 0x000280, "Member 'UHudMain_C::BP_WeaponSlotHudWidget' has a wrong offset!");
static_assert(offsetof(UHudMain_C, BreatheBarWidget_90) == 0x000288, "Member 'UHudMain_C::BreatheBarWidget_90' has a wrong offset!");
static_assert(offsetof(UHudMain_C, CarePackageInteractionWidget) == 0x000290, "Member 'UHudMain_C::CarePackageInteractionWidget' has a wrong offset!");
static_assert(offsetof(UHudMain_C, CarePackgeItemListWidget) == 0x000298, "Member 'UHudMain_C::CarePackgeItemListWidget' has a wrong offset!");
static_assert(offsetof(UHudMain_C, CharacterCanvas) == 0x0002A0, "Member 'UHudMain_C::CharacterCanvas' has a wrong offset!");
static_assert(offsetof(UHudMain_C, CoherentUIGTWidget_54) == 0x0002A8, "Member 'UHudMain_C::CoherentUIGTWidget_54' has a wrong offset!");
static_assert(offsetof(UHudMain_C, CountDownWidget_620) == 0x0002B0, "Member 'UHudMain_C::CountDownWidget_620' has a wrong offset!");
static_assert(offsetof(UHudMain_C, MiniMapBorder) == 0x0002B8, "Member 'UHudMain_C::MiniMapBorder' has a wrong offset!");
static_assert(offsetof(UHudMain_C, MiniMapWidget_146) == 0x0002C0, "Member 'UHudMain_C::MiniMapWidget_146' has a wrong offset!");
static_assert(offsetof(UHudMain_C, ObserverCrossHair) == 0x0002C8, "Member 'UHudMain_C::ObserverCrossHair' has a wrong offset!");
static_assert(offsetof(UHudMain_C, ObserverTagManagerWidget) == 0x0002D0, "Member 'UHudMain_C::ObserverTagManagerWidget' has a wrong offset!");
static_assert(offsetof(UHudMain_C, OverlayCanvas) == 0x0002D8, "Member 'UHudMain_C::OverlayCanvas' has a wrong offset!");
static_assert(offsetof(UHudMain_C, ParachuteVehicleWidget_861) == 0x0002E0, "Member 'UHudMain_C::ParachuteVehicleWidget_861' has a wrong offset!");
static_assert(offsetof(UHudMain_C, SpectatingSelectionWidget) == 0x0002E8, "Member 'UHudMain_C::SpectatingSelectionWidget' has a wrong offset!");
static_assert(offsetof(UHudMain_C, TeamWidgetCanvas) == 0x0002F0, "Member 'UHudMain_C::TeamWidgetCanvas' has a wrong offset!");
static_assert(offsetof(UHudMain_C, HUD) == 0x0002F8, "Member 'UHudMain_C::HUD' has a wrong offset!");
static_assert(offsetof(UHudMain_C, PlayerController) == 0x000300, "Member 'UHudMain_C::PlayerController' has a wrong offset!");
static_assert(offsetof(UHudMain_C, ButtonClickedDispatcher) == 0x000308, "Member 'UHudMain_C::ButtonClickedDispatcher' has a wrong offset!");
static_assert(offsetof(UHudMain_C, HitNotify) == 0x000318, "Member 'UHudMain_C::HitNotify' has a wrong offset!");
static_assert(offsetof(UHudMain_C, Old) == 0x000320, "Member 'UHudMain_C::Old' has a wrong offset!");
static_assert(offsetof(UHudMain_C, MiniMapTypes) == 0x000328, "Member 'UHudMain_C::MiniMapTypes' has a wrong offset!");
static_assert(offsetof(UHudMain_C, IsShowPlayerList) == 0x000338, "Member 'UHudMain_C::IsShowPlayerList' has a wrong offset!");
static_assert(offsetof(UHudMain_C, ColorBlindColorSet_SpetatingName) == 0x000340, "Member 'UHudMain_C::ColorBlindColorSet_SpetatingName' has a wrong offset!");
static_assert(offsetof(UHudMain_C, bNeedInit) == 0x000350, "Member 'UHudMain_C::bNeedInit' has a wrong offset!");
static_assert(offsetof(UHudMain_C, ReplayGetTimeHandler) == 0x000358, "Member 'UHudMain_C::ReplayGetTimeHandler' has a wrong offset!");

}

