#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemSlotWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlotBaseWidget_classes.hpp"
#include "UMG_structs.hpp"
#include "TslGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ItemSlotWidget.ItemSlotWidget_C
// 0x0180 (0x03D0 - 0x0250)
class UItemSlotWidget_C final : public USlotBaseWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ItemSlotWidget_C;                   // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       CastingComplete;                                   // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       Casting;                                           // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       TranslationTest;                                   // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       BehaviorInfoVanishing;                             // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetAnimation*                       BehaviorInfoEmerging;                              // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 CastingBar;                                        // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                CastingBarLayer;                                   // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             CategoryText;                                      // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 DurabilityGauge;                                   // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USizeBox*                               IconSizeBox;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UInnerItemSlotListWidget_C*             InnerItemSlotListWidget;                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             SlotName;                                          // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             StackCountText;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 UseInfo_bg;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             UseInfo_Text;                                      // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	TScriptInterface<class ISlotInterface>        Item_SlotInterface;                                // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	TScriptInterface<class ISlotContainerInterface> SlotContainer;                                     // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	UMulticastDelegateProperty_                   OnSlotFocus;                                       // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsPackaged;                                       // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IconSize_0;                                        // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	UMulticastDelegateProperty_                   OnRefreshInnerList;                                // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UEquipableItem*                         EquipableItem;                                     // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UImage*                                 ItemIcon;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMouseOver;                                        // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bVicinityItem;                                     // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_32A[0x6];                                      // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BackgroundMaterial;                                // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ToolTipShowDelaytime;                              // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsBehaviorInfoVanishing;                          // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsCastingSlot;                                    // 0x033D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsCastingBarVanishing;                            // 0x033E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33F[0x1];                                      // 0x033F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCastComponent*                         RefCastComponent;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UItem*                                  RefItem;                                           // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               ItemSlotCastingBar;                                // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsAvailableSlot;                                  // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AInventory*                             RefInventory;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSort;                                             // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DurabilityGaugeMaterial;                           // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               ItemIconDynamicMaterial;                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ATslCharacter*                          TslCharacter;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FText                                   Category;                                          // 0x0388(0x0018)(Edit, BlueprintVisible)
	class UTexture*                               Tex;                                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	UMulticastDelegateProperty_                   RefreshFocus;                                      // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bPressedX;                                         // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PressedXTime;                                      // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPressedB;                                         // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PressedBTime;                                      // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SelftAttachmentPutMode;                            // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ItemSlotWidget(int32 EntryPoint);
	void OnInputWidgetInputB();
	void OnButtonClicked(EPopupButtonID ButtonID);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UI_Gamepad_B_Released();
	void UI_Gamepad_B_Pressed();
	void OnInputXReleased();
	void OnInputXPressed();
	void Construct();
	void ShowToolTip();
	void BndEvt__InnerItemSlotListWidget_K2Node_ComponentBoundEvent_0_OnChildSlotFocus__DelegateSignature(TScriptInterface<class ISlotInterface> Slot_0);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void Destruct();
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	ESlateVisibility GetUseButtonVisibility();
	ESlateVisibility GetAmmountTextVisibility();
	ESlateVisibility GetIconVisibility();
	ESlateVisibility GetPackagedLabelVisibility();
	ESlateVisibility GetInnerContainerVisibility();
	void Refresh();
	void GetContentCount(int32* Count);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void IsDraggable(bool* Result);
	void DispatchRefreshInnerList();
	ESlateVisibility GetOpenButtonVisibility();
	void CreateTslDragDropOperation(class UTslItemDragDropOperation_C** OutOperation);
	void GetItemCount(int32* Count);
	void UpdateSlotName(class UWidget* BoundWidget);
	void UpdateItemIconImage(class UWidget* BoundWidget);
	void UpdateStackCountText(class UWidget* BoundWidget);
	void UpdateItemVisibility(class UWidget* BoundWidget);
	void UpdateSlot(TScriptInterface<class ISlotInterface> Item_SlotInterface_0, TScriptInterface<class ISlotContainerInterface> SlotContainer_0, bool bIsPackaged_0, bool bSort_0);
	void UpdateButtonIconIndex(class UWidget* BoundWidget);
	void UpdateUseText(class UWidget* BoundWidget);
	void UpdateIconSizeRatio(class UWidget* BoundWidget);
	void On_Brackground_Prepass_0(class UWidget* BoundWidget);
	void DialogButtonDown(EPopupButtonID ButtonID);
	void UpdateStackCountVisibility(class UWidget* BoundWidget);
	void UpdateUseButtonVisibility(class UWidget* BoundWidget);
	void UpdateEquipableIconVisibility(class UWidget* BoundWidget);
	void UpdateOpenButtonVisibility(class UWidget* BoundWidget);
	void UpdateInnerItemSlotListVisibility(class UWidget* BoundWidget);
	void UpdateItemIfoVisibility(class UWidget* BoundWidget);
	void GetOperationSpawnValue(class UItem** Item, class UEquipableItem** EquipableItem_0, class UWeaponItem** WeaponItem, class UThrowableItem** ThrowableItem, class UAttachableItem** AttachmentItem, TScriptInterface<class ISlotInterface>* SlotItem, TScriptInterface<class ISlotContainerInterface>* Container);
	class UWidget* GetToolTipWidget_0();
	void On_CastingBarLayer_Prepass_0(class UWidget* BoundWidget);
	struct FLinearColor Get_UseInfo_Text_ColorAndOpacity_0();
	void isPickupableDropItemSlot(TScriptInterface<class ISlotInterface> Target, bool* return_value);
	void IsAttachableItemSlot(TScriptInterface<class ISlotInterface> Target, bool* return_node);
	bool IsUsableItemSlot(TScriptInterface<class ISlotInterface> Target);
	void On_DurabilityBorder_Prepass_0(class UWidget* BoundWidget);
	void On_DurabilityGauge_Prepass_0(class UWidget* BoundWidget);
	void On_ItemMainLayer_Prepass_0(class UWidget* BoundWidget);
	void On_CategoryLayer_Prepass_0(class UWidget* BoundWidget);
	void On_CategoryText_Prepass_0(class UWidget* BoundWidget);
	void On_UseInfo_Text_Prepass_0(class UWidget* BoundWidget);
	void GetSlotContainer(TScriptInterface<class ISlotContainerInterface>* SlotContainer_0);
	void GetSlotItem(TScriptInterface<class ISlotInterface>* SlotItem);
	bool Up();
	bool SetFocus(bool NewFocus);
	bool Right();
	bool Left();
	bool Down();
	bool InputY();
	bool InputX();
	bool InputB();
	bool InputA();
	bool InputRT();
	bool InputRB();
	bool InputLT();
	bool InputLB();

	class FText GetSlotName() const;
	void GetIconTexture(class UTexture** Tex_0) const;
	class FText GetAmmountText() const;
	void IsCastableItem(bool* IsCastableItem_0) const;
	bool IsFocus() const;
	class UUserWidget* GetUpWidget() const;
	class UUserWidget* GetRightWidget() const;
	class UUserWidget* GetLeftWidget() const;
	class UUserWidget* GetDownWidget() const;
	class UUserWidget* GetFocusingChildWidget() const;
	bool IsFocusable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ItemSlotWidget_C">();
	}
	static class UItemSlotWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemSlotWidget_C>();
	}
};
static_assert(alignof(UItemSlotWidget_C) == 0x000008, "Wrong alignment on UItemSlotWidget_C");
static_assert(sizeof(UItemSlotWidget_C) == 0x0003D0, "Wrong size on UItemSlotWidget_C");
static_assert(offsetof(UItemSlotWidget_C, UberGraphFrame_ItemSlotWidget_C) == 0x000250, "Member 'UItemSlotWidget_C::UberGraphFrame_ItemSlotWidget_C' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, CastingComplete) == 0x000258, "Member 'UItemSlotWidget_C::CastingComplete' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, Casting) == 0x000260, "Member 'UItemSlotWidget_C::Casting' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, TranslationTest) == 0x000268, "Member 'UItemSlotWidget_C::TranslationTest' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, BehaviorInfoVanishing) == 0x000270, "Member 'UItemSlotWidget_C::BehaviorInfoVanishing' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, BehaviorInfoEmerging) == 0x000278, "Member 'UItemSlotWidget_C::BehaviorInfoEmerging' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, CastingBar) == 0x000280, "Member 'UItemSlotWidget_C::CastingBar' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, CastingBarLayer) == 0x000288, "Member 'UItemSlotWidget_C::CastingBarLayer' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, CategoryText) == 0x000290, "Member 'UItemSlotWidget_C::CategoryText' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, DurabilityGauge) == 0x000298, "Member 'UItemSlotWidget_C::DurabilityGauge' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, IconSizeBox) == 0x0002A0, "Member 'UItemSlotWidget_C::IconSizeBox' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, InnerItemSlotListWidget) == 0x0002A8, "Member 'UItemSlotWidget_C::InnerItemSlotListWidget' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, SlotName) == 0x0002B0, "Member 'UItemSlotWidget_C::SlotName' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, StackCountText) == 0x0002B8, "Member 'UItemSlotWidget_C::StackCountText' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, UseInfo_bg) == 0x0002C0, "Member 'UItemSlotWidget_C::UseInfo_bg' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, UseInfo_Text) == 0x0002C8, "Member 'UItemSlotWidget_C::UseInfo_Text' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, Item_SlotInterface) == 0x0002D0, "Member 'UItemSlotWidget_C::Item_SlotInterface' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, SlotContainer) == 0x0002E0, "Member 'UItemSlotWidget_C::SlotContainer' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, OnSlotFocus) == 0x0002F0, "Member 'UItemSlotWidget_C::OnSlotFocus' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, bIsPackaged) == 0x000300, "Member 'UItemSlotWidget_C::bIsPackaged' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, IconSize_0) == 0x000304, "Member 'UItemSlotWidget_C::IconSize_0' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, OnRefreshInnerList) == 0x000308, "Member 'UItemSlotWidget_C::OnRefreshInnerList' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, EquipableItem) == 0x000318, "Member 'UItemSlotWidget_C::EquipableItem' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, ItemIcon) == 0x000320, "Member 'UItemSlotWidget_C::ItemIcon' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, bMouseOver) == 0x000328, "Member 'UItemSlotWidget_C::bMouseOver' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, bVicinityItem) == 0x000329, "Member 'UItemSlotWidget_C::bVicinityItem' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, BackgroundMaterial) == 0x000330, "Member 'UItemSlotWidget_C::BackgroundMaterial' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, ToolTipShowDelaytime) == 0x000338, "Member 'UItemSlotWidget_C::ToolTipShowDelaytime' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, bIsBehaviorInfoVanishing) == 0x00033C, "Member 'UItemSlotWidget_C::bIsBehaviorInfoVanishing' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, bIsCastingSlot) == 0x00033D, "Member 'UItemSlotWidget_C::bIsCastingSlot' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, bIsCastingBarVanishing) == 0x00033E, "Member 'UItemSlotWidget_C::bIsCastingBarVanishing' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, RefCastComponent) == 0x000340, "Member 'UItemSlotWidget_C::RefCastComponent' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, RefItem) == 0x000348, "Member 'UItemSlotWidget_C::RefItem' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, ItemSlotCastingBar) == 0x000350, "Member 'UItemSlotWidget_C::ItemSlotCastingBar' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, bIsAvailableSlot) == 0x000358, "Member 'UItemSlotWidget_C::bIsAvailableSlot' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, RefInventory) == 0x000360, "Member 'UItemSlotWidget_C::RefInventory' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, bSort) == 0x000368, "Member 'UItemSlotWidget_C::bSort' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, DurabilityGaugeMaterial) == 0x000370, "Member 'UItemSlotWidget_C::DurabilityGaugeMaterial' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, ItemIconDynamicMaterial) == 0x000378, "Member 'UItemSlotWidget_C::ItemIconDynamicMaterial' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, TslCharacter) == 0x000380, "Member 'UItemSlotWidget_C::TslCharacter' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, Category) == 0x000388, "Member 'UItemSlotWidget_C::Category' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, Tex) == 0x0003A0, "Member 'UItemSlotWidget_C::Tex' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, RefreshFocus) == 0x0003A8, "Member 'UItemSlotWidget_C::RefreshFocus' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, bPressedX) == 0x0003B8, "Member 'UItemSlotWidget_C::bPressedX' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, PressedXTime) == 0x0003BC, "Member 'UItemSlotWidget_C::PressedXTime' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, bPressedB) == 0x0003C0, "Member 'UItemSlotWidget_C::bPressedB' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, PressedBTime) == 0x0003C4, "Member 'UItemSlotWidget_C::PressedBTime' has a wrong offset!");
static_assert(offsetof(UItemSlotWidget_C, SelftAttachmentPutMode) == 0x0003C8, "Member 'UItemSlotWidget_C::SelftAttachmentPutMode' has a wrong offset!");

}

