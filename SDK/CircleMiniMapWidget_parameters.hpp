#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CircleMiniMapWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CircleMiniMapWidget.CircleMiniMapWidget_C.OnPrepass_0
// 0x0090 (0x0090 - 0x0000)
struct CircleMiniMapWidget_C_OnPrepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslCharacter*                          CallFunc_GetCachedCharacter_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslCharacter*                          CallFunc_GetCachedViewTargetTslCharacter_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LocalPositionToServer_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LocalPositionToServer_ReturnValue2;       // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X2;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y2;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z2;                           // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue2;                // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   K2Node_DynamicCast_AsTsl_Player_Controller;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpectating_ReturnValue;                 // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CircleMiniMapWidget_C_OnPrepass_0) == 0x000008, "Wrong alignment on CircleMiniMapWidget_C_OnPrepass_0");
static_assert(sizeof(CircleMiniMapWidget_C_OnPrepass_0) == 0x000090, "Wrong size on CircleMiniMapWidget_C_OnPrepass_0");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, BoundWidget) == 0x000000, "Member 'CircleMiniMapWidget_C_OnPrepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_GetCachedCharacter_ReturnValue) == 0x000008, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_GetCachedCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_GetCachedViewTargetTslCharacter_ReturnValue) == 0x000010, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_GetCachedViewTargetTslCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_IsValid_ReturnValue2) == 0x000019, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x000028, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_LocalPositionToServer_ReturnValue) == 0x000034, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_LocalPositionToServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_LocalPositionToServer_ReturnValue2) == 0x000040, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_LocalPositionToServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_BreakVector_X) == 0x00004C, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_BreakVector_Y) == 0x000050, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_BreakVector_Z) == 0x000054, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_BreakVector_X2) == 0x000058, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_BreakVector_Y2) == 0x00005C, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_BreakVector_Z2) == 0x000060, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_MakeVector2D_ReturnValue) == 0x000064, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_MakeVector2D_ReturnValue2) == 0x00006C, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_MakeVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_GetOwningPlayer_ReturnValue) == 0x000078, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, K2Node_DynamicCast_AsTsl_Player_Controller) == 0x000080, "Member 'CircleMiniMapWidget_C_OnPrepass_0::K2Node_DynamicCast_AsTsl_Player_Controller' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'CircleMiniMapWidget_C_OnPrepass_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_0, CallFunc_IsSpectating_ReturnValue) == 0x000089, "Member 'CircleMiniMapWidget_C_OnPrepass_0::CallFunc_IsSpectating_ReturnValue' has a wrong offset!");

// Function CircleMiniMapWidget.CircleMiniMapWidget_C.On_Arrow_Prepass_0
// 0x0040 (0x0040 - 0x0000)
struct CircleMiniMapWidget_C_On_Arrow_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetNextPlayzoneDirection_Direction;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetNextPlayzoneDirection_Direction2;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Cos_ReturnValue;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CircleMiniMapWidget_C_On_Arrow_Prepass_0) == 0x000008, "Wrong alignment on CircleMiniMapWidget_C_On_Arrow_Prepass_0");
static_assert(sizeof(CircleMiniMapWidget_C_On_Arrow_Prepass_0) == 0x000040, "Wrong size on CircleMiniMapWidget_C_On_Arrow_Prepass_0");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, BoundWidget) == 0x000000, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, CallFunc_GetNextPlayzoneDirection_Direction) == 0x000008, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::CallFunc_GetNextPlayzoneDirection_Direction' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x00001C, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, CallFunc_GetNextPlayzoneDirection_Direction2) == 0x000020, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::CallFunc_GetNextPlayzoneDirection_Direction2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, CallFunc_Cos_ReturnValue) == 0x000024, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, CallFunc_Sin_ReturnValue) == 0x00002C, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_Arrow_Prepass_0, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000038, "Member 'CircleMiniMapWidget_C_On_Arrow_Prepass_0::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");

// Function CircleMiniMapWidget.CircleMiniMapWidget_C.OnPrepass_1
// 0x0010 (0x0010 - 0x0000)
struct CircleMiniMapWidget_C_OnPrepass_1 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetNextPlayzoneDirection_Direction;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CircleMiniMapWidget_C_OnPrepass_1) == 0x000008, "Wrong alignment on CircleMiniMapWidget_C_OnPrepass_1");
static_assert(sizeof(CircleMiniMapWidget_C_OnPrepass_1) == 0x000010, "Wrong size on CircleMiniMapWidget_C_OnPrepass_1");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_1, BoundWidget) == 0x000000, "Member 'CircleMiniMapWidget_C_OnPrepass_1::BoundWidget' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_OnPrepass_1, CallFunc_GetNextPlayzoneDirection_Direction) == 0x000008, "Member 'CircleMiniMapWidget_C_OnPrepass_1::CallFunc_GetNextPlayzoneDirection_Direction' has a wrong offset!");

// Function CircleMiniMapWidget.CircleMiniMapWidget_C.On_BluezoneTime_Prepass_0
// 0x0028 (0x0028 - 0x0000)
struct CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetBluezoneGpsState_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue2;           // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_GetBluezoneTimeText_ReturnValue;          // 0x0010(0x0018)()
};
static_assert(alignof(CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0) == 0x000008, "Wrong alignment on CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0");
static_assert(sizeof(CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0) == 0x000028, "Wrong size on CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0");
static_assert(offsetof(CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0, BoundWidget) == 0x000000, "Member 'CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0, CallFunc_GetBluezoneGpsState_ReturnValue) == 0x000008, "Member 'CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0::CallFunc_GetBluezoneGpsState_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0, CallFunc_IsAnimationPlaying_ReturnValue) == 0x00000D, "Member 'CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0, CallFunc_EqualEqual_IntInt_ReturnValue2) == 0x00000E, "Member 'CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0::CallFunc_EqualEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0, CallFunc_BooleanOR_ReturnValue) == 0x00000F, "Member 'CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0, CallFunc_GetBluezoneTimeText_ReturnValue) == 0x000010, "Member 'CircleMiniMapWidget_C_On_BluezoneTime_Prepass_0::CallFunc_GetBluezoneTimeText_ReturnValue' has a wrong offset!");

// Function CircleMiniMapWidget.CircleMiniMapWidget_C.GetNextPlayzoneDirection
// 0x00A8 (0x00A8 - 0x0000)
struct CircleMiniMapWidget_C_GetNextPlayzoneDirection final
{
public:
	float                                         Direction;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_DotProduct2D_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DotProduct2D_ReturnValue2;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue2;                    // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_DotProduct2D_ReturnValue3;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_DegAcos_ReturnValue2;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCharacterPosititon_Position;           // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetNextPlayzonePosition_ReturnValue;      // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X2;                           // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y2;                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z2;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue2;                // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue3;                    // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CharacterToNextPlayzone;                           // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NewLocalVar_0;                                     // 0x0090(0x0018)(Edit)
};
static_assert(alignof(CircleMiniMapWidget_C_GetNextPlayzoneDirection) == 0x000008, "Wrong alignment on CircleMiniMapWidget_C_GetNextPlayzoneDirection");
static_assert(sizeof(CircleMiniMapWidget_C_GetNextPlayzoneDirection) == 0x0000A8, "Wrong size on CircleMiniMapWidget_C_GetNextPlayzoneDirection");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, Direction) == 0x000000, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::Direction' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_Normal2D_ReturnValue) == 0x000004, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_DotProduct2D_ReturnValue) == 0x00000C, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_DotProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_Less_FloatFloat_ReturnValue) == 0x000010, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_DotProduct2D_ReturnValue2) == 0x000014, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_DotProduct2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_DegAcos_ReturnValue) == 0x000018, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_Normal2D_ReturnValue2) == 0x00001C, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_Normal2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_DotProduct2D_ReturnValue3) == 0x000028, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_DotProduct2D_ReturnValue3' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_DegAcos_ReturnValue2) == 0x00002C, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_DegAcos_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_GetCharacterPosititon_Position) == 0x000034, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_GetCharacterPosititon_Position' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_BreakVector_X) == 0x000040, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_BreakVector_Y) == 0x000044, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_BreakVector_Z) == 0x000048, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_GetNextPlayzonePosition_ReturnValue) == 0x00004C, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_GetNextPlayzonePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_MakeVector2D_ReturnValue) == 0x000058, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_BreakVector_X2) == 0x000060, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_BreakVector_Y2) == 0x000064, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_BreakVector_Z2) == 0x000068, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_MakeVector2D_ReturnValue2) == 0x00006C, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_MakeVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000074, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CallFunc_Normal2D_ReturnValue3) == 0x00007C, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CallFunc_Normal2D_ReturnValue3' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, CharacterToNextPlayzone) == 0x000084, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::CharacterToNextPlayzone' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_GetNextPlayzoneDirection, NewLocalVar_0) == 0x000090, "Member 'CircleMiniMapWidget_C_GetNextPlayzoneDirection::NewLocalVar_0' has a wrong offset!");

// Function CircleMiniMapWidget.CircleMiniMapWidget_C.On_TimeBorder_Prepass_0
// 0x0010 (0x0010 - 0x0000)
struct CircleMiniMapWidget_C_On_TimeBorder_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStateBluezoneReady_IsReady;             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_0) == 0x000008, "Wrong alignment on CircleMiniMapWidget_C_On_TimeBorder_Prepass_0");
static_assert(sizeof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_0) == 0x000010, "Wrong size on CircleMiniMapWidget_C_On_TimeBorder_Prepass_0");
static_assert(offsetof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_0, BoundWidget) == 0x000000, "Member 'CircleMiniMapWidget_C_On_TimeBorder_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_0, m__bool_Variable) == 0x000008, "Member 'CircleMiniMapWidget_C_On_TimeBorder_Prepass_0::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_0, m__byte_Variable) == 0x000009, "Member 'CircleMiniMapWidget_C_On_TimeBorder_Prepass_0::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_0, m__byte_Variable2) == 0x00000A, "Member 'CircleMiniMapWidget_C_On_TimeBorder_Prepass_0::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_0, CallFunc_IsStateBluezoneReady_IsReady) == 0x00000B, "Member 'CircleMiniMapWidget_C_On_TimeBorder_Prepass_0::CallFunc_IsStateBluezoneReady_IsReady' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_0, K2Node_Select_Default) == 0x00000C, "Member 'CircleMiniMapWidget_C_On_TimeBorder_Prepass_0::K2Node_Select_Default' has a wrong offset!");

// Function CircleMiniMapWidget.CircleMiniMapWidget_C.On_GridText_Prepass_0
// 0x0100 (0x0100 - 0x0000)
struct CircleMiniMapWidget_C_On_GridText_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_GetCharacterGridVertical_ReturnValue;     // 0x0008(0x0010)(ZeroConstructor)
	class FString                                 CallFunc_GetCharacterGridTextHorizental_ReturnValue; // 0x0018(0x0010)(ZeroConstructor)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0028(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue2;           // 0x0040(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0040)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData2;             // 0x0098(0x0040)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E8(0x0018)()
};
static_assert(alignof(CircleMiniMapWidget_C_On_GridText_Prepass_0) == 0x000008, "Wrong alignment on CircleMiniMapWidget_C_On_GridText_Prepass_0");
static_assert(sizeof(CircleMiniMapWidget_C_On_GridText_Prepass_0) == 0x000100, "Wrong size on CircleMiniMapWidget_C_On_GridText_Prepass_0");
static_assert(offsetof(CircleMiniMapWidget_C_On_GridText_Prepass_0, BoundWidget) == 0x000000, "Member 'CircleMiniMapWidget_C_On_GridText_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_GridText_Prepass_0, CallFunc_GetCharacterGridVertical_ReturnValue) == 0x000008, "Member 'CircleMiniMapWidget_C_On_GridText_Prepass_0::CallFunc_GetCharacterGridVertical_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_GridText_Prepass_0, CallFunc_GetCharacterGridTextHorizental_ReturnValue) == 0x000018, "Member 'CircleMiniMapWidget_C_On_GridText_Prepass_0::CallFunc_GetCharacterGridTextHorizental_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_GridText_Prepass_0, CallFunc_Conv_StringToText_ReturnValue) == 0x000028, "Member 'CircleMiniMapWidget_C_On_GridText_Prepass_0::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_GridText_Prepass_0, CallFunc_Conv_StringToText_ReturnValue2) == 0x000040, "Member 'CircleMiniMapWidget_C_On_GridText_Prepass_0::CallFunc_Conv_StringToText_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_GridText_Prepass_0, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'CircleMiniMapWidget_C_On_GridText_Prepass_0::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_GridText_Prepass_0, K2Node_MakeStruct_FormatArgumentData2) == 0x000098, "Member 'CircleMiniMapWidget_C_On_GridText_Prepass_0::K2Node_MakeStruct_FormatArgumentData2' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_GridText_Prepass_0, K2Node_MakeArray_Array) == 0x0000D8, "Member 'CircleMiniMapWidget_C_On_GridText_Prepass_0::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(CircleMiniMapWidget_C_On_GridText_Prepass_0, CallFunc_Format_ReturnValue) == 0x0000E8, "Member 'CircleMiniMapWidget_C_On_GridText_Prepass_0::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function CircleMiniMapWidget.CircleMiniMapWidget_C.On_TimeBorder_Prepass_1
// 0x0008 (0x0008 - 0x0000)
struct CircleMiniMapWidget_C_On_TimeBorder_Prepass_1 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_1) == 0x000008, "Wrong alignment on CircleMiniMapWidget_C_On_TimeBorder_Prepass_1");
static_assert(sizeof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_1) == 0x000008, "Wrong size on CircleMiniMapWidget_C_On_TimeBorder_Prepass_1");
static_assert(offsetof(CircleMiniMapWidget_C_On_TimeBorder_Prepass_1, BoundWidget) == 0x000000, "Member 'CircleMiniMapWidget_C_On_TimeBorder_Prepass_1::BoundWidget' has a wrong offset!");

}

