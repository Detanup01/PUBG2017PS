#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Motorbike_04

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Motorbike_04.BP_Motorbike_04_C.ExecuteUbergraph_BP_Motorbike_04
// 0x04E0 (0x04E0 - 0x0000)
struct BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key16;                        // 0x0008(0x0018)()
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue2;                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0030(0x0010)(ZeroConstructor)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue4;                     // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_AddRelativeLocation_SweepHitResult;    // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue5;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue6;                     // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x00F0(0x0018)()
	TDelegate<void(float KillingDamage, struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser)> K2Node_CreateDelegate_OutputDelegate;              // 0x0108(0x0010)(ZeroConstructor, NoDestructor)
	struct FKey                                   K2Node_InputKeyEvent_Key2;                         // 0x0118(0x0018)()
	bool                                          CallFunc_IsShipping_ReturnValue;                   // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue2;                  // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue3;                  // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue4;                  // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue4;                 // 0x0137(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue5;                  // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue6;                  // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue5;                 // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue6;                 // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue7;                  // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue8;                  // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue7;                 // 0x013E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue8;                 // 0x013F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue9;                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue10;                 // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue9;                 // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue10;                // 0x0143(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue11;                 // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue12;                 // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue11;                // 0x0146(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue12;                // 0x0147(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key3;                         // 0x0158(0x0018)()
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   K2Node_InputKeyEvent_Key4;                         // 0x0188(0x0018)()
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x01A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0228(0x0008)()
	struct FKey                                   K2Node_InputKeyEvent_Key5;                         // 0x0230(0x0018)()
	bool                                          CallFunc_HasContact_ReturnValue;                   // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue13;                // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24A[0x2];                                      // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue2;                  // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue2;             // 0x0256(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue2;          // 0x0257(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   K2Node_InputKeyEvent_Key6;                         // 0x0258(0x0018)()
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_CustomEvent_KillingDamage;                  // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FDamageEvent                           K2Node_CustomEvent_DamageEvent;                    // 0x0278(0x0018)(ConstParm)
	class ATslPlayerState*                        K2Node_CustomEvent_PlayerInstigator;               // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 K2Node_CustomEvent_DamageCauser;                   // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   K2Node_InputKeyEvent_Key7;                         // 0x02A0(0x0018)()
	float                                         CallFunc_GetVehicleHealth_ReturnValue;             // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue7;                     // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x02BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BE[0x2];                                      // 0x02BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_AddRelativeLocation_SweepHitResult2;   // 0x02C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FKey                                   K2Node_InputKeyEvent_Key8;                         // 0x0348(0x0018)()
	struct FKey                                   K2Node_InputKeyEvent_Key9;                         // 0x0360(0x0018)()
	struct FKey                                   K2Node_InputKeyEvent_Key10;                        // 0x0378(0x0018)()
	struct FKey                                   m__struct_Variable;                                // 0x0390(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue8;                     // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue4;              // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   K2Node_InputKeyEvent_Key11;                        // 0x03B0(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue9;                     // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue5;              // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue3;                      // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key12;                        // 0x03D8(0x0018)()
	struct FKey                                   m__struct_Variable2;                               // 0x03F0(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue10;                    // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue6;              // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue4;                      // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0414(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   K2Node_InputKeyEvent_Key13;                        // 0x0420(0x0018)()
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue11;                    // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key14;                        // 0x0458(0x0018)()
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0478(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key15;                        // 0x0488(0x0018)()
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x04A0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABP_CameraMan_C*                        CallFunc_FinishSpawningActor_ReturnValue;          // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04) == 0x000010, "Wrong alignment on BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04");
static_assert(sizeof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04) == 0x0004E0, "Wrong size on BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, EntryPoint) == 0x000000, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key16) == 0x000008, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key16' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_FClamp_ReturnValue) == 0x000024, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Add_FloatFloat_ReturnValue2) == 0x000028, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_FClamp_ReturnValue2) == 0x00002C, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_FClamp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Conv_FloatToString_ReturnValue) == 0x000030, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue2) == 0x000051, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue3) == 0x000052, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue4) == 0x000053, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_K2_AddRelativeLocation_SweepHitResult) == 0x000058, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_K2_AddRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue5) == 0x0000E0, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Add_FloatFloat_ReturnValue3) == 0x0000E4, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_HasAuthority_ReturnValue) == 0x0000E8, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue6) == 0x0000E9, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key) == 0x0000F0, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_CreateDelegate_OutputDelegate) == 0x000108, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key2) == 0x000118, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue) == 0x000130, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue2) == 0x000131, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue) == 0x000132, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue2) == 0x000133, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue3) == 0x000134, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue4) == 0x000135, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue3) == 0x000136, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue4) == 0x000137, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue5) == 0x000138, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue6) == 0x000139, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue5) == 0x00013A, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue6) == 0x00013B, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue7) == 0x00013C, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue8) == 0x00013D, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue7) == 0x00013E, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue8) == 0x00013F, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue9) == 0x000140, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue10) == 0x000141, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue9) == 0x000142, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue10) == 0x000143, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue11) == 0x000144, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsShipping_ReturnValue12) == 0x000145, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsShipping_ReturnValue12' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue11) == 0x000146, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue12) == 0x000147, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue12' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000148, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key3) == 0x000158, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000170, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00017C, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key4) == 0x000188, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key4' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0001A0, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_K2_SetTimer_ReturnValue) == 0x000228, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key5) == 0x000230, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key5' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_HasContact_ReturnValue) == 0x000248, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_HasContact_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Not_PreBool_ReturnValue13) == 0x000249, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Not_PreBool_ReturnValue13' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputAxisEvent_AxisValue2) == 0x00024C, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputAxisEvent_AxisValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputAxisEvent_AxisValue) == 0x000250, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Less_FloatFloat_ReturnValue) == 0x000254, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000255, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Less_FloatFloat_ReturnValue2) == 0x000256, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Less_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Greater_FloatFloat_ReturnValue2) == 0x000257, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Greater_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key6) == 0x000258, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key6' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_Event_DeltaSeconds) == 0x000270, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_CustomEvent_KillingDamage) == 0x000274, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_CustomEvent_KillingDamage' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_CustomEvent_DamageEvent) == 0x000278, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_CustomEvent_DamageEvent' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_CustomEvent_PlayerInstigator) == 0x000290, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_CustomEvent_PlayerInstigator' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_CustomEvent_DamageCauser) == 0x000298, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_CustomEvent_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key7) == 0x0002A0, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key7' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_GetVehicleHealth_ReturnValue) == 0x0002B8, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_GetVehicleHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue7) == 0x0002BC, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0002BD, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_K2_AddRelativeLocation_SweepHitResult2) == 0x0002C0, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_K2_AddRelativeLocation_SweepHitResult2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key8) == 0x000348, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key8' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key9) == 0x000360, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key9' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key10) == 0x000378, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key10' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, m__struct_Variable) == 0x000390, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::m__struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue8) == 0x0003A8, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Add_FloatFloat_ReturnValue4) == 0x0003AC, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Add_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key11) == 0x0003B0, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key11' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue9) == 0x0003C8, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Add_FloatFloat_ReturnValue5) == 0x0003CC, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Add_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_FClamp_ReturnValue3) == 0x0003D0, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_FClamp_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key12) == 0x0003D8, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key12' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, m__struct_Variable2) == 0x0003F0, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::m__struct_Variable2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue10) == 0x000408, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Add_FloatFloat_ReturnValue6) == 0x00040C, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Add_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_FClamp_ReturnValue4) == 0x000410, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_FClamp_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000414, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key13) == 0x000420, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key13' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_Add_VectorVector_ReturnValue) == 0x000438, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_GetPlayerController_ReturnValue) == 0x000448, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_IsValid_ReturnValue11) == 0x000450, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_IsValid_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key14) == 0x000458, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key14' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000470, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_GetCameraRotation_ReturnValue) == 0x000478, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, K2Node_InputKeyEvent_Key15) == 0x000488, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::K2Node_InputKeyEvent_Key15' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_MakeTransform_ReturnValue) == 0x0004A0, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0004D0, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04, CallFunc_FinishSpawningActor_ReturnValue) == 0x0004D8, "Member 'BP_Motorbike_04_C_ExecuteUbergraph_BP_Motorbike_04::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.OnDeath_Event_0
// 0x0030 (0x0030 - 0x0000)
struct BP_Motorbike_04_C_OnDeath_Event_0 final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm)
	class ATslPlayerState*                        PlayerInstigator;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 DamageCauser;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_OnDeath_Event_0) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_OnDeath_Event_0");
static_assert(sizeof(BP_Motorbike_04_C_OnDeath_Event_0) == 0x000030, "Wrong size on BP_Motorbike_04_C_OnDeath_Event_0");
static_assert(offsetof(BP_Motorbike_04_C_OnDeath_Event_0, KillingDamage) == 0x000000, "Member 'BP_Motorbike_04_C_OnDeath_Event_0::KillingDamage' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_OnDeath_Event_0, DamageEvent) == 0x000008, "Member 'BP_Motorbike_04_C_OnDeath_Event_0::DamageEvent' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_OnDeath_Event_0, PlayerInstigator) == 0x000020, "Member 'BP_Motorbike_04_C_OnDeath_Event_0::PlayerInstigator' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_OnDeath_Event_0, DamageCauser) == 0x000028, "Member 'BP_Motorbike_04_C_OnDeath_Event_0::DamageCauser' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Motorbike_04_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Motorbike_04_C_ReceiveTick");
static_assert(sizeof(BP_Motorbike_04_C_ReceiveTick) == 0x000004, "Wrong size on BP_Motorbike_04_C_ReceiveTick");
static_assert(offsetof(BP_Motorbike_04_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Motorbike_04_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13
// 0x0004 (0x0004 - 0x0000)
struct BP_Motorbike_04_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13) == 0x000004, "Wrong alignment on BP_Motorbike_04_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13");
static_assert(sizeof(BP_Motorbike_04_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13) == 0x000004, "Wrong size on BP_Motorbike_04_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13");
static_assert(offsetof(BP_Motorbike_04_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13, AxisValue) == 0x000000, "Member 'BP_Motorbike_04_C_InpAxisEvt_AirControlRoll_K2Node_InputAxisEvent_13::AxisValue' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7
// 0x0004 (0x0004 - 0x0000)
struct BP_Motorbike_04_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7) == 0x000004, "Wrong alignment on BP_Motorbike_04_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7");
static_assert(sizeof(BP_Motorbike_04_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7) == 0x000004, "Wrong size on BP_Motorbike_04_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7");
static_assert(offsetof(BP_Motorbike_04_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7, AxisValue) == 0x000000, "Member 'BP_Motorbike_04_C_InpAxisEvt_AirControlPitch_K2Node_InputAxisEvent_7::AxisValue' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_Decimal_K2Node_InputKeyEvent_16
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_Decimal_K2Node_InputKeyEvent_16 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_Decimal_K2Node_InputKeyEvent_16) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_Decimal_K2Node_InputKeyEvent_16");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_Decimal_K2Node_InputKeyEvent_16) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_Decimal_K2Node_InputKeyEvent_16");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_Decimal_K2Node_InputKeyEvent_16, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_Decimal_K2Node_InputKeyEvent_16::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadFive_K2Node_InputKeyEvent_17
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_17::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadTwo_K2Node_InputKeyEvent_18
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_18 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_18) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_18");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_18) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_18");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_18, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_18::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadEight_K2Node_InputKeyEvent_19
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_19 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_19) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_19");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_19) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_19");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_19, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_19::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadNine_K2Node_InputKeyEvent_20
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_20 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_20) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_20");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_20) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_20");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_20, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_20::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadSeven_K2Node_InputKeyEvent_21
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_21 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_21) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_21");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_21) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_21");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_21, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_21::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadThree_K2Node_InputKeyEvent_22
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_22 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_22) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_22");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_22) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_22");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_22, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadThree_K2Node_InputKeyEvent_22::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_Subtract_K2Node_InputKeyEvent_23
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_Subtract_K2Node_InputKeyEvent_23 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_Subtract_K2Node_InputKeyEvent_23) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_Subtract_K2Node_InputKeyEvent_23");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_Subtract_K2Node_InputKeyEvent_23) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_Subtract_K2Node_InputKeyEvent_23");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_Subtract_K2Node_InputKeyEvent_23, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_Subtract_K2Node_InputKeyEvent_23::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_Add_K2Node_InputKeyEvent_24
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_Add_K2Node_InputKeyEvent_24 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_Add_K2Node_InputKeyEvent_24) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_Add_K2Node_InputKeyEvent_24");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_Add_K2Node_InputKeyEvent_24) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_Add_K2Node_InputKeyEvent_24");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_Add_K2Node_InputKeyEvent_24, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_Add_K2Node_InputKeyEvent_24::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadOne_K2Node_InputKeyEvent_25
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_25 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_25) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_25");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_25) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_25");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_25, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_25::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadFour_K2Node_InputKeyEvent_26
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_26 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_26) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_26");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_26) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_26");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_26, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_26::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadFour_K2Node_InputKeyEvent_27
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_27 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_27) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_27");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_27) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_27");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_27, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_27::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadSix_K2Node_InputKeyEvent_28
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_28 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_28) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_28");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_28) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_28");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_28, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_28::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadSix_K2Node_InputKeyEvent_29
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_29 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_29) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_29");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_29) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_29");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_29, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_29::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_Multiply_K2Node_InputKeyEvent_30
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_Multiply_K2Node_InputKeyEvent_30 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_Multiply_K2Node_InputKeyEvent_30) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_Multiply_K2Node_InputKeyEvent_30");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_Multiply_K2Node_InputKeyEvent_30) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_Multiply_K2Node_InputKeyEvent_30");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_Multiply_K2Node_InputKeyEvent_30, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_Multiply_K2Node_InputKeyEvent_30::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.InpActEvt_NumPadZero_K2Node_InputKeyEvent_31
// 0x0018 (0x0018 - 0x0000)
struct BP_Motorbike_04_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_31 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm)
};
static_assert(alignof(BP_Motorbike_04_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_31) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_31");
static_assert(sizeof(BP_Motorbike_04_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_31) == 0x000018, "Wrong size on BP_Motorbike_04_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_31");
static_assert(offsetof(BP_Motorbike_04_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_31, Key) == 0x000000, "Member 'BP_Motorbike_04_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_31::Key' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.Process_Stabilize
// 0x0001 (0x0001 - 0x0000)
struct BP_Motorbike_04_C_Process_Stabilize final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_Process_Stabilize) == 0x000001, "Wrong alignment on BP_Motorbike_04_C_Process_Stabilize");
static_assert(sizeof(BP_Motorbike_04_C_Process_Stabilize) == 0x000001, "Wrong size on BP_Motorbike_04_C_Process_Stabilize");
static_assert(offsetof(BP_Motorbike_04_C_Process_Stabilize, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_Motorbike_04_C_Process_Stabilize::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.Process_Contact
// 0x0030 (0x0030 - 0x0000)
struct BP_Motorbike_04_C_Process_Contact final
{
public:
	bool                                          m__bool_True_if_break_was_hit_Variable;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m__int_Array_Index_Variable;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m__int_Loop_Counter_Variable;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicleWheel*                          CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetSuspensionOffset_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_Process_Contact) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_Process_Contact");
static_assert(sizeof(BP_Motorbike_04_C_Process_Contact) == 0x000030, "Wrong size on BP_Motorbike_04_C_Process_Contact");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, m__bool_True_if_break_was_hit_Variable) == 0x000000, "Member 'BP_Motorbike_04_C_Process_Contact::m__bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, m__int_Array_Index_Variable) == 0x000004, "Member 'BP_Motorbike_04_C_Process_Contact::m__int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_Motorbike_04_C_Process_Contact::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, m__int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_Motorbike_04_C_Process_Contact::m__int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_Motorbike_04_C_Process_Contact::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_Motorbike_04_C_Process_Contact::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_Motorbike_04_C_Process_Contact::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, CallFunc_GetSuspensionOffset_ReturnValue) == 0x000024, "Member 'BP_Motorbike_04_C_Process_Contact::CallFunc_GetSuspensionOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_Motorbike_04_C_Process_Contact::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000029, "Member 'BP_Motorbike_04_C_Process_Contact::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Contact, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'BP_Motorbike_04_C_Process_Contact::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.Process_Camera
// 0x0140 (0x0140 - 0x0000)
struct BP_Motorbike_04_C_Process_Camera final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue2;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslCharacter*                          CallFunc_GetDriver_ReturnValue;                    // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue3;            // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Motorbike_04_C_Process_Camera) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_Process_Camera");
static_assert(sizeof(BP_Motorbike_04_C_Process_Camera) == 0x000140, "Wrong size on BP_Motorbike_04_C_Process_Camera");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_BreakRotator_Roll) == 0x000004, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_BreakRotator_Pitch) == 0x000008, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_BreakRotator_Yaw) == 0x00000C, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000010, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_Abs_ReturnValue) == 0x00001C, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_GetUpVector_ReturnValue) == 0x000020, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_MapRangeClamped_ReturnValue) == 0x00002C, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_MapRangeClamped_ReturnValue2) == 0x000030, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_MapRangeClamped_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000040, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_Multiply_VectorVector_ReturnValue) == 0x00004C, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_Normal_ReturnValue) == 0x000058, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_GetDriver_ReturnValue) == 0x000068, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_GetDriver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x000070, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_IsValid_ReturnValue) == 0x00007C, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_Add_VectorVector_ReturnValue) == 0x000080, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_GetSocketLocation_ReturnValue) == 0x00008C, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_IsActive_ReturnValue) == 0x000098, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_Add_VectorVector_ReturnValue2) == 0x00009C, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_Add_VectorVector_ReturnValue3) == 0x0000A8, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_Add_VectorVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Camera, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000B8, "Member 'BP_Motorbike_04_C_Process_Camera::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.StabilizeMotorbikeSidecart
// 0x014C (0x014C - 0x0000)
struct BP_Motorbike_04_C_StabilizeMotorbikeSidecart final
{
public:
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVelocity_ReturnValue2;                 // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue2;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue2;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetSteeringInput_ReturnValue;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVelocity_ReturnValue3;                 // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue3;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue2;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue2;            // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetPhysicsAngularVelocity_ReturnValue;    // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue3;             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue2;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z;                            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue2;       // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X2;                           // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y2;                           // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z2;                           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue4;             // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue3;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue5;             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue4;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue6;             // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue4;              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue5;               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue5;              // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue6;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue7;              // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue8;              // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue3;                  // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart) == 0x000004, "Wrong alignment on BP_Motorbike_04_C_StabilizeMotorbikeSidecart");
static_assert(sizeof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart) == 0x00014C, "Wrong size on BP_Motorbike_04_C_StabilizeMotorbikeSidecart");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetVelocity_ReturnValue) == 0x000000, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetVelocity_ReturnValue2) == 0x00000C, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetVelocity_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_VSize_ReturnValue) == 0x000018, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_VSize_ReturnValue2) == 0x00001C, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_VSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000024, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_MapRangeClamped_ReturnValue) == 0x000028, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_MapRangeClamped_ReturnValue2) == 0x00002C, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_MapRangeClamped_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetSteeringInput_ReturnValue) == 0x000034, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetSteeringInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000038, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetVelocity_ReturnValue3) == 0x00003C, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetVelocity_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_FInterpTo_ReturnValue) == 0x000048, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_VSize_ReturnValue3) == 0x00004C, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_VSize_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetFloatValue_ReturnValue) == 0x000050, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_MakeVector_ReturnValue) == 0x000054, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetFloatValue_ReturnValue2) == 0x000060, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetFloatValue_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetForwardVector_ReturnValue) == 0x000064, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetUpVector_ReturnValue) == 0x000070, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00007C, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetForwardVector_ReturnValue2) == 0x000088, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetForwardVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_BreakRotator_Roll) == 0x000094, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_BreakRotator_Pitch) == 0x000098, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_BreakRotator_Yaw) == 0x00009C, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetPhysicsAngularVelocity_ReturnValue) == 0x0000A0, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetPhysicsAngularVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_MapRangeClamped_ReturnValue3) == 0x0000AC, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_MapRangeClamped_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000B0, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_MakeVector_ReturnValue2) == 0x0000BC, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_MakeVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_BreakVector_X) == 0x0000C8, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_BreakVector_Y) == 0x0000CC, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_BreakVector_Z) == 0x0000D0, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x0000D4, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Multiply_VectorVector_ReturnValue2) == 0x0000D8, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Multiply_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_FClamp_ReturnValue) == 0x0000E4, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_BreakVector_X2) == 0x0000E8, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_BreakVector_Y2) == 0x0000EC, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_BreakVector_Z2) == 0x0000F0, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_MapRangeClamped_ReturnValue4) == 0x0000F4, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_MapRangeClamped_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetFloatValue_ReturnValue3) == 0x0000F8, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetFloatValue_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Add_FloatFloat_ReturnValue2) == 0x0000FC, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_MapRangeClamped_ReturnValue5) == 0x000100, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_MapRangeClamped_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetFloatValue_ReturnValue4) == 0x000104, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetFloatValue_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Abs_ReturnValue) == 0x000108, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x00010C, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_MapRangeClamped_ReturnValue6) == 0x000110, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_MapRangeClamped_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000114, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Add_FloatFloat_ReturnValue3) == 0x000120, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Add_FloatFloat_ReturnValue4) == 0x000124, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Add_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_GetFloatValue_ReturnValue5) == 0x000128, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_GetFloatValue_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Add_FloatFloat_ReturnValue5) == 0x00012C, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Add_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000130, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Add_FloatFloat_ReturnValue6) == 0x000134, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Add_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Add_FloatFloat_ReturnValue7) == 0x000138, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Add_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_Add_FloatFloat_ReturnValue8) == 0x00013C, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_Add_FloatFloat_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_StabilizeMotorbikeSidecart, CallFunc_MakeVector_ReturnValue3) == 0x000140, "Member 'BP_Motorbike_04_C_StabilizeMotorbikeSidecart::CallFunc_MakeVector_ReturnValue3' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.Process_Audio
// 0x0010 (0x0010 - 0x0000)
struct BP_Motorbike_04_C_Process_Audio final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEngineRotationSpeed_ReturnValue;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_Process_Audio) == 0x000004, "Wrong alignment on BP_Motorbike_04_C_Process_Audio");
static_assert(sizeof(BP_Motorbike_04_C_Process_Audio) == 0x000010, "Wrong size on BP_Motorbike_04_C_Process_Audio");
static_assert(offsetof(BP_Motorbike_04_C_Process_Audio, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_Motorbike_04_C_Process_Audio::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Audio, CallFunc_GetEngineRotationSpeed_ReturnValue) == 0x000004, "Member 'BP_Motorbike_04_C_Process_Audio::CallFunc_GetEngineRotationSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Audio, CallFunc_GetFloatValue_ReturnValue) == 0x000008, "Member 'BP_Motorbike_04_C_Process_Audio::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_Audio, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_Motorbike_04_C_Process_Audio::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.Process_FuelConsumption
// 0x0038 (0x0038 - 0x0000)
struct BP_Motorbike_04_C_Process_FuelConsumption final
{
public:
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetThrottleInput_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetEngineMaxRotationSpeed_ReturnValue;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetEngineRotationSpeed_ReturnValue;       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_Process_FuelConsumption) == 0x000004, "Wrong alignment on BP_Motorbike_04_C_Process_FuelConsumption");
static_assert(sizeof(BP_Motorbike_04_C_Process_FuelConsumption) == 0x000038, "Wrong size on BP_Motorbike_04_C_Process_FuelConsumption");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_GetVelocity_ReturnValue) == 0x000000, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_VSize_ReturnValue) == 0x00000C, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_GetThrottleInput_ReturnValue) == 0x000018, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_GetThrottleInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_FMax_ReturnValue) == 0x00001C, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_GetEngineMaxRotationSpeed_ReturnValue) == 0x000020, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_GetEngineMaxRotationSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_GetEngineRotationSpeed_ReturnValue) == 0x000024, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_GetEngineRotationSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000030, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Process_FuelConsumption, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000034, "Member 'BP_Motorbike_04_C_Process_FuelConsumption::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");

// Function BP_Motorbike_04.BP_Motorbike_04_C.Init_Cache
// 0x0010 (0x0010 - 0x0000)
struct BP_Motorbike_04_C_Init_Cache final
{
public:
	class UTslWheeledVehicleMovement*             K2Node_DynamicCast_AsTsl_Wheeled_Vehicle_Movement; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Motorbike_04_C_Init_Cache) == 0x000008, "Wrong alignment on BP_Motorbike_04_C_Init_Cache");
static_assert(sizeof(BP_Motorbike_04_C_Init_Cache) == 0x000010, "Wrong size on BP_Motorbike_04_C_Init_Cache");
static_assert(offsetof(BP_Motorbike_04_C_Init_Cache, K2Node_DynamicCast_AsTsl_Wheeled_Vehicle_Movement) == 0x000000, "Member 'BP_Motorbike_04_C_Init_Cache::K2Node_DynamicCast_AsTsl_Wheeled_Vehicle_Movement' has a wrong offset!");
static_assert(offsetof(BP_Motorbike_04_C_Init_Cache, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_Motorbike_04_C_Init_Cache::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

