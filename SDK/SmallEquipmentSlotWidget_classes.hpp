#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SmallEquipmentSlotWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "InventorySlotBaseWidget_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SmallEquipmentSlotWidget.SmallEquipmentSlotWidget_C
// 0x0028 (0x0318 - 0x02F0)
class USmallEquipmentSlotWidget_C final : public UInventorySlotBaseWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_SmallEquipmentSlotWidget_C;         // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Background;                                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 FocusColorBG;                                      // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UEquipableItem*                         EquipableItem;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWantFocus;                                        // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_SmallEquipmentSlotWidget(int32 EntryPoint);
	void Construct();
	void OnUpdateItem(class UItem* Item_0);
	class FText GetSlotName();
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	struct FSlateBrush GetIcon();
	struct FEventReply OnPreviewMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void GetItem_Bp(class UItem** Item_0);
	void On_FocusColorBG_Prepass_0(class UWidget* BoundWidget);
	bool SetFocus(bool NewFocus);
	void GetSlotContainer(TScriptInterface<class ISlotContainerInterface>* SlotContainer);
	void GetSlotItem(TScriptInterface<class ISlotInterface>* SlotItem);

	bool IsFocus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SmallEquipmentSlotWidget_C">();
	}
	static class USmallEquipmentSlotWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmallEquipmentSlotWidget_C>();
	}
};
static_assert(alignof(USmallEquipmentSlotWidget_C) == 0x000008, "Wrong alignment on USmallEquipmentSlotWidget_C");
static_assert(sizeof(USmallEquipmentSlotWidget_C) == 0x000318, "Wrong size on USmallEquipmentSlotWidget_C");
static_assert(offsetof(USmallEquipmentSlotWidget_C, UberGraphFrame_SmallEquipmentSlotWidget_C) == 0x0002F0, "Member 'USmallEquipmentSlotWidget_C::UberGraphFrame_SmallEquipmentSlotWidget_C' has a wrong offset!");
static_assert(offsetof(USmallEquipmentSlotWidget_C, Background) == 0x0002F8, "Member 'USmallEquipmentSlotWidget_C::Background' has a wrong offset!");
static_assert(offsetof(USmallEquipmentSlotWidget_C, FocusColorBG) == 0x000300, "Member 'USmallEquipmentSlotWidget_C::FocusColorBG' has a wrong offset!");
static_assert(offsetof(USmallEquipmentSlotWidget_C, EquipableItem) == 0x000308, "Member 'USmallEquipmentSlotWidget_C::EquipableItem' has a wrong offset!");
static_assert(offsetof(USmallEquipmentSlotWidget_C, bWantFocus) == 0x000310, "Member 'USmallEquipmentSlotWidget_C::bWantFocus' has a wrong offset!");

}

