#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HudAlwaysOn

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function HudAlwaysOn.HudAlwaysOn_C.ExecuteUbergraph_HudAlwaysOn
// 0x0048 (0x0048 - 0x0000)
struct HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslHUD*                                K2Node_DynamicCast_AsTsl_HUD;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue2;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue2;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslHUD*                                K2Node_DynamicCast_AsTsl_HUD2;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn) == 0x000008, "Wrong alignment on HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn");
static_assert(sizeof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn) == 0x000048, "Wrong size on HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn");
static_assert(offsetof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn, EntryPoint) == 0x000000, "Member 'HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn::EntryPoint' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn, CallFunc_GetHUD_ReturnValue) == 0x000010, "Member 'HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn, K2Node_DynamicCast_AsTsl_HUD) == 0x000018, "Member 'HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn::K2Node_DynamicCast_AsTsl_HUD' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn, CallFunc_GetOwningPlayer_ReturnValue2) == 0x000028, "Member 'HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn::CallFunc_GetOwningPlayer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn, CallFunc_GetHUD_ReturnValue2) == 0x000030, "Member 'HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn::CallFunc_GetHUD_ReturnValue2' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn, K2Node_DynamicCast_AsTsl_HUD2) == 0x000038, "Member 'HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn::K2Node_DynamicCast_AsTsl_HUD2' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn, K2Node_DynamicCast_bSuccess2) == 0x000040, "Member 'HudAlwaysOn_C_ExecuteUbergraph_HudAlwaysOn::K2Node_DynamicCast_bSuccess2' has a wrong offset!");

// Function HudAlwaysOn.HudAlwaysOn_C.OnPrepass_0
// 0x0010 (0x0010 - 0x0000)
struct HudAlwaysOn_C_OnPrepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWidgetShow_ReturnValue;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWidgetShow_ReturnValue2;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HudAlwaysOn_C_OnPrepass_0) == 0x000008, "Wrong alignment on HudAlwaysOn_C_OnPrepass_0");
static_assert(sizeof(HudAlwaysOn_C_OnPrepass_0) == 0x000010, "Wrong size on HudAlwaysOn_C_OnPrepass_0");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_0, BoundWidget) == 0x000000, "Member 'HudAlwaysOn_C_OnPrepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_0, m__bool_Variable) == 0x000008, "Member 'HudAlwaysOn_C_OnPrepass_0::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_0, m__byte_Variable) == 0x000009, "Member 'HudAlwaysOn_C_OnPrepass_0::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_0, m__byte_Variable2) == 0x00000A, "Member 'HudAlwaysOn_C_OnPrepass_0::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_0, CallFunc_IsWidgetShow_ReturnValue) == 0x00000B, "Member 'HudAlwaysOn_C_OnPrepass_0::CallFunc_IsWidgetShow_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_0, CallFunc_IsWidgetShow_ReturnValue2) == 0x00000C, "Member 'HudAlwaysOn_C_OnPrepass_0::CallFunc_IsWidgetShow_ReturnValue2' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_0, CallFunc_BooleanOR_ReturnValue) == 0x00000D, "Member 'HudAlwaysOn_C_OnPrepass_0::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_0, K2Node_Select_Default) == 0x00000E, "Member 'HudAlwaysOn_C_OnPrepass_0::K2Node_Select_Default' has a wrong offset!");

// Function HudAlwaysOn.HudAlwaysOn_C.On_BlueZoneGpsWidget_RoundType_Prepass_0
// 0x0010 (0x0010 - 0x0000)
struct HudAlwaysOn_C_On_BlueZoneGpsWidget_RoundType_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibilityOnMatchState_ReturnValue;    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HudAlwaysOn_C_On_BlueZoneGpsWidget_RoundType_Prepass_0) == 0x000008, "Wrong alignment on HudAlwaysOn_C_On_BlueZoneGpsWidget_RoundType_Prepass_0");
static_assert(sizeof(HudAlwaysOn_C_On_BlueZoneGpsWidget_RoundType_Prepass_0) == 0x000010, "Wrong size on HudAlwaysOn_C_On_BlueZoneGpsWidget_RoundType_Prepass_0");
static_assert(offsetof(HudAlwaysOn_C_On_BlueZoneGpsWidget_RoundType_Prepass_0, BoundWidget) == 0x000000, "Member 'HudAlwaysOn_C_On_BlueZoneGpsWidget_RoundType_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_BlueZoneGpsWidget_RoundType_Prepass_0, CallFunc_GetVisibilityOnMatchState_ReturnValue) == 0x000008, "Member 'HudAlwaysOn_C_On_BlueZoneGpsWidget_RoundType_Prepass_0::CallFunc_GetVisibilityOnMatchState_ReturnValue' has a wrong offset!");

// Function HudAlwaysOn.HudAlwaysOn_C.GetVisibilityOnMatchState
// 0x0020 (0x0020 - 0x0000)
struct HudAlwaysOn_C_GetVisibilityOnMatchState final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATSLGameState_C*                        K2Node_DynamicCast_AsTSLGame_State;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HudAlwaysOn_C_GetVisibilityOnMatchState) == 0x000008, "Wrong alignment on HudAlwaysOn_C_GetVisibilityOnMatchState");
static_assert(sizeof(HudAlwaysOn_C_GetVisibilityOnMatchState) == 0x000020, "Wrong size on HudAlwaysOn_C_GetVisibilityOnMatchState");
static_assert(offsetof(HudAlwaysOn_C_GetVisibilityOnMatchState, ReturnValue) == 0x000000, "Member 'HudAlwaysOn_C_GetVisibilityOnMatchState::ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_GetVisibilityOnMatchState, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'HudAlwaysOn_C_GetVisibilityOnMatchState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_GetVisibilityOnMatchState, K2Node_DynamicCast_AsTSLGame_State) == 0x000010, "Member 'HudAlwaysOn_C_GetVisibilityOnMatchState::K2Node_DynamicCast_AsTSLGame_State' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_GetVisibilityOnMatchState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'HudAlwaysOn_C_GetVisibilityOnMatchState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_GetVisibilityOnMatchState, K2Node_SwitchName_CmpSuccess) == 0x000019, "Member 'HudAlwaysOn_C_GetVisibilityOnMatchState::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function HudAlwaysOn.HudAlwaysOn_C.On_CharacterCanvas_Prepass_0
// 0x0020 (0x0020 - 0x0000)
struct HudAlwaysOn_C_On_CharacterCanvas_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpectatorState_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpectating_ReturnValue;                 // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0) == 0x000008, "Wrong alignment on HudAlwaysOn_C_On_CharacterCanvas_Prepass_0");
static_assert(sizeof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0) == 0x000020, "Wrong size on HudAlwaysOn_C_On_CharacterCanvas_Prepass_0");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, BoundWidget) == 0x000000, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, m__bool_Variable) == 0x000008, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, m__byte_Variable) == 0x000009, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, m__byte_Variable2) == 0x00000A, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, CallFunc_GetOwningTslPlayerController_ReturnValue) == 0x000010, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::CallFunc_GetOwningTslPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, CallFunc_IsSpectatorState_ReturnValue) == 0x000018, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::CallFunc_IsSpectatorState_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, CallFunc_IsSpectating_ReturnValue) == 0x00001B, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::CallFunc_IsSpectating_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, CallFunc_BooleanOR_ReturnValue) == 0x00001C, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_CharacterCanvas_Prepass_0, K2Node_Select_Default) == 0x00001D, "Member 'HudAlwaysOn_C_On_CharacterCanvas_Prepass_0::K2Node_Select_Default' has a wrong offset!");

// Function HudAlwaysOn.HudAlwaysOn_C.OnPrepass_1
// 0x0020 (0x0020 - 0x0000)
struct HudAlwaysOn_C_OnPrepass_1 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHighPing_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HudAlwaysOn_C_OnPrepass_1) == 0x000008, "Wrong alignment on HudAlwaysOn_C_OnPrepass_1");
static_assert(sizeof(HudAlwaysOn_C_OnPrepass_1) == 0x000020, "Wrong size on HudAlwaysOn_C_OnPrepass_1");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_1, BoundWidget) == 0x000000, "Member 'HudAlwaysOn_C_OnPrepass_1::BoundWidget' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_1, m__bool_Variable) == 0x000008, "Member 'HudAlwaysOn_C_OnPrepass_1::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_1, m__byte_Variable) == 0x000009, "Member 'HudAlwaysOn_C_OnPrepass_1::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_1, m__byte_Variable2) == 0x00000A, "Member 'HudAlwaysOn_C_OnPrepass_1::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_1, CallFunc_GetOwningTslPlayerController_ReturnValue) == 0x000010, "Member 'HudAlwaysOn_C_OnPrepass_1::CallFunc_GetOwningTslPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_1, CallFunc_IsHighPing_ReturnValue) == 0x000018, "Member 'HudAlwaysOn_C_OnPrepass_1::CallFunc_IsHighPing_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_OnPrepass_1, K2Node_Select_Default) == 0x000019, "Member 'HudAlwaysOn_C_OnPrepass_1::K2Node_Select_Default' has a wrong offset!");

// Function HudAlwaysOn.HudAlwaysOn_C.On_ReportBotton_Prepass_0
// 0x0028 (0x0028 - 0x0000)
struct HudAlwaysOn_C_On_ReportBotton_Prepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   K2Node_DynamicCast_AsTsl_Player_Controller;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpectating_ReturnValue;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HudAlwaysOn_C_On_ReportBotton_Prepass_0) == 0x000008, "Wrong alignment on HudAlwaysOn_C_On_ReportBotton_Prepass_0");
static_assert(sizeof(HudAlwaysOn_C_On_ReportBotton_Prepass_0) == 0x000028, "Wrong size on HudAlwaysOn_C_On_ReportBotton_Prepass_0");
static_assert(offsetof(HudAlwaysOn_C_On_ReportBotton_Prepass_0, BoundWidget) == 0x000000, "Member 'HudAlwaysOn_C_On_ReportBotton_Prepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_ReportBotton_Prepass_0, m__bool_Variable) == 0x000008, "Member 'HudAlwaysOn_C_On_ReportBotton_Prepass_0::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_ReportBotton_Prepass_0, m__byte_Variable) == 0x000009, "Member 'HudAlwaysOn_C_On_ReportBotton_Prepass_0::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_ReportBotton_Prepass_0, m__byte_Variable2) == 0x00000A, "Member 'HudAlwaysOn_C_On_ReportBotton_Prepass_0::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_ReportBotton_Prepass_0, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'HudAlwaysOn_C_On_ReportBotton_Prepass_0::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_ReportBotton_Prepass_0, K2Node_DynamicCast_AsTsl_Player_Controller) == 0x000018, "Member 'HudAlwaysOn_C_On_ReportBotton_Prepass_0::K2Node_DynamicCast_AsTsl_Player_Controller' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_ReportBotton_Prepass_0, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'HudAlwaysOn_C_On_ReportBotton_Prepass_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_ReportBotton_Prepass_0, CallFunc_IsSpectating_ReturnValue) == 0x000021, "Member 'HudAlwaysOn_C_On_ReportBotton_Prepass_0::CallFunc_IsSpectating_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_On_ReportBotton_Prepass_0, K2Node_Select_Default) == 0x000022, "Member 'HudAlwaysOn_C_On_ReportBotton_Prepass_0::K2Node_Select_Default' has a wrong offset!");

// Function HudAlwaysOn.HudAlwaysOn_C.TeamInfoPrepass
// 0x0020 (0x0020 - 0x0000)
struct HudAlwaysOn_C_TeamInfoPrepass final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWidgetShow_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HudAlwaysOn_C_TeamInfoPrepass) == 0x000008, "Wrong alignment on HudAlwaysOn_C_TeamInfoPrepass");
static_assert(sizeof(HudAlwaysOn_C_TeamInfoPrepass) == 0x000020, "Wrong size on HudAlwaysOn_C_TeamInfoPrepass");
static_assert(offsetof(HudAlwaysOn_C_TeamInfoPrepass, BoundWidget) == 0x000000, "Member 'HudAlwaysOn_C_TeamInfoPrepass::BoundWidget' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_TeamInfoPrepass, m__byte_Variable) == 0x000008, "Member 'HudAlwaysOn_C_TeamInfoPrepass::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_TeamInfoPrepass, m__byte_Variable2) == 0x000009, "Member 'HudAlwaysOn_C_TeamInfoPrepass::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_TeamInfoPrepass, m__bool_Variable) == 0x00000A, "Member 'HudAlwaysOn_C_TeamInfoPrepass::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_TeamInfoPrepass, CallFunc_GetTslHUD_ReturnValue) == 0x000010, "Member 'HudAlwaysOn_C_TeamInfoPrepass::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_TeamInfoPrepass, CallFunc_IsWidgetShow_ReturnValue) == 0x000018, "Member 'HudAlwaysOn_C_TeamInfoPrepass::CallFunc_IsWidgetShow_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_TeamInfoPrepass, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'HudAlwaysOn_C_TeamInfoPrepass::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HudAlwaysOn_C_TeamInfoPrepass, K2Node_Select_Default) == 0x00001A, "Member 'HudAlwaysOn_C_TeamInfoPrepass::K2Node_Select_Default' has a wrong offset!");

}

