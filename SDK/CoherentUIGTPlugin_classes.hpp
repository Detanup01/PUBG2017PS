#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CoherentUIGTPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"
#include "CoherentUIGTPlugin_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class CoherentUIGTPlugin.CoherentUIGTWidget
// 0x0330 (0x0458 - 0x0128)
#pragma pack(push, 0x1)
class alignas(0x08) UCoherentUIGTWidget : public UWidget
{
public:
	uint8                                         Pad_128[0x18];                                     // 0x0128(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0140(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   ReadyForBindings;                                  // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   BindingsReleased;                                  // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   FinishLoad;                                        // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   FailLoad;                                          // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   StartLoading;                                      // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   NavigateTo;                                        // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   JavaScriptEvent;                                   // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   UIGTScriptingReady;                                // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8[0x78];                                     // 0x01C8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 Texture;                                           // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureFilter                                Filter;                                            // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveInput;                                     // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveInputWhenTransparent;                      // 0x024A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGammaCorrectedMaterial;                           // 0x024B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowPerformanceWarnings;                          // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExecuteJSTimersThresholdMs;                        // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateStylesAndLayoutThresholdMs;                  // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecordRenderingCommandsThresholdMs;                // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaintWarningThresholdMs;                           // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayersCountThreshold;                              // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerWidthThreshold;                               // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerHeightThreshold;                              // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAdditionalDefaultStyles;                    // 0x026C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26D[0x1D3];                                    // 0x026D(0x01D3)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClickThroughAlphaThreshold;                        // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Transparent;                                       // 0x0454(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_455[0x3];                                      // 0x0455(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCoherentUIGTJSEvent* CreateJSEvent();
	void Load(const class FString& path);
	void Reload();
	void SetClickThroughAlphaThreshold(float threshold);
	void ShowPaintRects(bool show);

	float GetClickThroughAlphaThreshold() const;
	bool HasRequestedView() const;
	bool IsDocumentReady() const;
	bool IsReadyForBindings() const;
	bool IsReadyToCreateView() const;
	bool IsTransparent() const;
	void Redraw() const;
	void TriggerJSEvent(const class FString& Name_0, class UCoherentUIGTJSEvent* eventData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoherentUIGTWidget">();
	}
	static class UCoherentUIGTWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoherentUIGTWidget>();
	}
};
#pragma pack(pop)
static_assert(alignof(UCoherentUIGTWidget) == 0x000008, "Wrong alignment on UCoherentUIGTWidget");
static_assert(sizeof(UCoherentUIGTWidget) == 0x000458, "Wrong size on UCoherentUIGTWidget");
static_assert(offsetof(UCoherentUIGTWidget, Owner) == 0x000140, "Member 'UCoherentUIGTWidget::Owner' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, ReadyForBindings) == 0x000148, "Member 'UCoherentUIGTWidget::ReadyForBindings' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, BindingsReleased) == 0x000158, "Member 'UCoherentUIGTWidget::BindingsReleased' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, FinishLoad) == 0x000168, "Member 'UCoherentUIGTWidget::FinishLoad' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, FailLoad) == 0x000178, "Member 'UCoherentUIGTWidget::FailLoad' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, StartLoading) == 0x000188, "Member 'UCoherentUIGTWidget::StartLoading' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, NavigateTo) == 0x000198, "Member 'UCoherentUIGTWidget::NavigateTo' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, JavaScriptEvent) == 0x0001A8, "Member 'UCoherentUIGTWidget::JavaScriptEvent' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, UIGTScriptingReady) == 0x0001B8, "Member 'UCoherentUIGTWidget::UIGTScriptingReady' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, Texture) == 0x000240, "Member 'UCoherentUIGTWidget::Texture' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, Filter) == 0x000248, "Member 'UCoherentUIGTWidget::Filter' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, bReceiveInput) == 0x000249, "Member 'UCoherentUIGTWidget::bReceiveInput' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, bReceiveInputWhenTransparent) == 0x00024A, "Member 'UCoherentUIGTWidget::bReceiveInputWhenTransparent' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, bGammaCorrectedMaterial) == 0x00024B, "Member 'UCoherentUIGTWidget::bGammaCorrectedMaterial' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, AllowPerformanceWarnings) == 0x00024C, "Member 'UCoherentUIGTWidget::AllowPerformanceWarnings' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, ExecuteJSTimersThresholdMs) == 0x000250, "Member 'UCoherentUIGTWidget::ExecuteJSTimersThresholdMs' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, UpdateStylesAndLayoutThresholdMs) == 0x000254, "Member 'UCoherentUIGTWidget::UpdateStylesAndLayoutThresholdMs' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, RecordRenderingCommandsThresholdMs) == 0x000258, "Member 'UCoherentUIGTWidget::RecordRenderingCommandsThresholdMs' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, PaintWarningThresholdMs) == 0x00025C, "Member 'UCoherentUIGTWidget::PaintWarningThresholdMs' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, LayersCountThreshold) == 0x000260, "Member 'UCoherentUIGTWidget::LayersCountThreshold' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, LayerWidthThreshold) == 0x000264, "Member 'UCoherentUIGTWidget::LayerWidthThreshold' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, LayerHeightThreshold) == 0x000268, "Member 'UCoherentUIGTWidget::LayerHeightThreshold' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, bEnableAdditionalDefaultStyles) == 0x00026C, "Member 'UCoherentUIGTWidget::bEnableAdditionalDefaultStyles' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, URL) == 0x000440, "Member 'UCoherentUIGTWidget::URL' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, ClickThroughAlphaThreshold) == 0x000450, "Member 'UCoherentUIGTWidget::ClickThroughAlphaThreshold' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTWidget, Transparent) == 0x000454, "Member 'UCoherentUIGTWidget::Transparent' has a wrong offset!");

// Class CoherentUIGTPlugin.CoherentUIGTAssetReferencer
// 0x0000 (0x0028 - 0x0028)
class UCoherentUIGTAssetReferencer final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoherentUIGTAssetReferencer">();
	}
	static class UCoherentUIGTAssetReferencer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoherentUIGTAssetReferencer>();
	}
};
static_assert(alignof(UCoherentUIGTAssetReferencer) == 0x000008, "Wrong alignment on UCoherentUIGTAssetReferencer");
static_assert(sizeof(UCoherentUIGTAssetReferencer) == 0x000028, "Wrong size on UCoherentUIGTAssetReferencer");

// Class CoherentUIGTPlugin.CoherentUIGTJSEvent
// 0x0080 (0x00A8 - 0x0028)
class UCoherentUIGTJSEvent final : public UObject
{
public:
	uint8                                         Pad_28[0x80];                                      // 0x0028(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddArray(const TArray<int32>& Array);
	void AddBool(bool B);
	void AddByte(uint8 byte);
	void AddFloat(float FL);
	void AddInt32(int32 integer);
	void AddObject(class UObject* Object);
	void AddString(const class FString& str);
	void AddStructArg(const class UStructProperty* Arg);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoherentUIGTJSEvent">();
	}
	static class UCoherentUIGTJSEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoherentUIGTJSEvent>();
	}
};
static_assert(alignof(UCoherentUIGTJSEvent) == 0x000008, "Wrong alignment on UCoherentUIGTJSEvent");
static_assert(sizeof(UCoherentUIGTJSEvent) == 0x0000A8, "Wrong size on UCoherentUIGTJSEvent");

// Class CoherentUIGTPlugin.CoherentUIGTBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UCoherentUIGTBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddArray(class UCoherentUIGTJSEvent* JSEvent, const TArray<int32>& Arg, int32 ArrayType);
	static void AddArrayOfStructs(class UCoherentUIGTJSEvent* JSEvent, const TArray<int32>& Arg);
	static void AddBool(class UCoherentUIGTJSEvent* JSEvent, bool Arg);
	static void AddByte(class UCoherentUIGTJSEvent* JSEvent, uint8 Arg);
	static void AddFloat(class UCoherentUIGTJSEvent* JSEvent, float Arg);
	static void AddInt32(class UCoherentUIGTJSEvent* JSEvent, int32 Arg);
	static void AddObject(class UCoherentUIGTJSEvent* JSEvent, class UObject* Arg);
	static void AddString(class UCoherentUIGTJSEvent* JSEvent, const class FString& Arg);
	static void AddStructArg(class UCoherentUIGTJSEvent* JSEvent, const class UStructProperty* Arg);
	static class UCoherentUIGTJSEvent* CreateJSEvent(class UObject* WorldContextObject);
	static void PurgeCoherentDiskCache();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoherentUIGTBlueprintFunctionLibrary">();
	}
	static class UCoherentUIGTBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoherentUIGTBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UCoherentUIGTBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UCoherentUIGTBlueprintFunctionLibrary");
static_assert(sizeof(UCoherentUIGTBlueprintFunctionLibrary) == 0x000028, "Wrong size on UCoherentUIGTBlueprintFunctionLibrary");

// Class CoherentUIGTPlugin.CoherentUIGTJSPayload
// 0x0018 (0x0040 - 0x0028)
class UCoherentUIGTJSPayload final : public UObject
{
public:
	class FString                                 EventName;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetBool(int32 Index_0);
	int32 GetInt32(int32 Index_0);
	float GetNumber(int32 Index_0);
	class FString GetString(int32 Index_0);
	void ReadObject(int32 Index_0, class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoherentUIGTJSPayload">();
	}
	static class UCoherentUIGTJSPayload* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoherentUIGTJSPayload>();
	}
};
static_assert(alignof(UCoherentUIGTJSPayload) == 0x000008, "Wrong alignment on UCoherentUIGTJSPayload");
static_assert(sizeof(UCoherentUIGTJSPayload) == 0x000040, "Wrong size on UCoherentUIGTJSPayload");
static_assert(offsetof(UCoherentUIGTJSPayload, EventName) == 0x000028, "Member 'UCoherentUIGTJSPayload::EventName' has a wrong offset!");

// Class CoherentUIGTPlugin.CoherentUIGTEventHelpers
// 0x0000 (0x0028 - 0x0028)
class UCoherentUIGTEventHelpers final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoherentUIGTEventHelpers">();
	}
	static class UCoherentUIGTEventHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoherentUIGTEventHelpers>();
	}
};
static_assert(alignof(UCoherentUIGTEventHelpers) == 0x000008, "Wrong alignment on UCoherentUIGTEventHelpers");
static_assert(sizeof(UCoherentUIGTEventHelpers) == 0x000028, "Wrong size on UCoherentUIGTEventHelpers");

// Class CoherentUIGTPlugin.CoherentUIGTSettings
// 0x0040 (0x0068 - 0x0028)
class UCoherentUIGTSettings final : public UObject
{
public:
	bool                                          EnableLiveReload;                                  // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InspectorPort;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableWebSecurity;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLocalization;                                // 0x0031(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunAsynchronous;                                   // 0x0032(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursivelyBindUStructs;                          // 0x0033(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowPerformanceWarningsInEditor;                  // 0x0034(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowWarningsOnScreen;                              // 0x0035(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECoherentUIGTSettingsSeverity                 LogSeverity;                                       // 0x0036(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespectTitleSafeZone;                             // 0x0037(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespectLetterboxing;                              // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HUDMaterialName;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CoUIResourcesRoot;                                 // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickWhileGameIsPaused;                             // 0x0060(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECoherentUIGTMSAA                             MSAA;                                              // 0x0061(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoherentUIGTSettings">();
	}
	static class UCoherentUIGTSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoherentUIGTSettings>();
	}
};
static_assert(alignof(UCoherentUIGTSettings) == 0x000008, "Wrong alignment on UCoherentUIGTSettings");
static_assert(sizeof(UCoherentUIGTSettings) == 0x000068, "Wrong size on UCoherentUIGTSettings");
static_assert(offsetof(UCoherentUIGTSettings, EnableLiveReload) == 0x000028, "Member 'UCoherentUIGTSettings::EnableLiveReload' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, InspectorPort) == 0x00002C, "Member 'UCoherentUIGTSettings::InspectorPort' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, EnableWebSecurity) == 0x000030, "Member 'UCoherentUIGTSettings::EnableWebSecurity' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, EnableLocalization) == 0x000031, "Member 'UCoherentUIGTSettings::EnableLocalization' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, RunAsynchronous) == 0x000032, "Member 'UCoherentUIGTSettings::RunAsynchronous' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, bRecursivelyBindUStructs) == 0x000033, "Member 'UCoherentUIGTSettings::bRecursivelyBindUStructs' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, AllowPerformanceWarningsInEditor) == 0x000034, "Member 'UCoherentUIGTSettings::AllowPerformanceWarningsInEditor' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, ShowWarningsOnScreen) == 0x000035, "Member 'UCoherentUIGTSettings::ShowWarningsOnScreen' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, LogSeverity) == 0x000036, "Member 'UCoherentUIGTSettings::LogSeverity' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, bRespectTitleSafeZone) == 0x000037, "Member 'UCoherentUIGTSettings::bRespectTitleSafeZone' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, bRespectLetterboxing) == 0x000038, "Member 'UCoherentUIGTSettings::bRespectLetterboxing' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, HUDMaterialName) == 0x000040, "Member 'UCoherentUIGTSettings::HUDMaterialName' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, CoUIResourcesRoot) == 0x000050, "Member 'UCoherentUIGTSettings::CoUIResourcesRoot' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, TickWhileGameIsPaused) == 0x000060, "Member 'UCoherentUIGTSettings::TickWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(UCoherentUIGTSettings, MSAA) == 0x000061, "Member 'UCoherentUIGTSettings::MSAA' has a wrong offset!");

}

