#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemToolTipWidget_Bp

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TslGame_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ItemToolTipWidget_Bp.ItemToolTipWidget_Bp_C
// 0x00E8 (0x0328 - 0x0240)
class UItemToolTipWidget_Bp_C final : public UItemToolTipWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       FadeInToolTip;                                     // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UToolTipGauageWidget_C*                 AccuracyGauge;                                     // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UHorizontalBox*                         AmmoInfoBox;                                       // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             AmmoNameText;                                      // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             AmmoPerClipText;                                   // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             Capacity;                                          // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           CapacityBlock;                                     // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             CategoryText;                                      // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             ComparingWeapon;                                   // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UHorizontalBox*                         ComparisonBlock;                                   // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                DamageBlock;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UToolTipGauageWidget_C*                 DamageGauge;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             DescText;                                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UToolTipGauageWidget_C*                 EffectRangeGauge;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UToolTipGauageWidget_C*                 FiringRate;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Icon;                                              // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USizeBox*                               IconScaleBoxSizeBlock;                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USizeBox*                               IconSize;                                          // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           ImageBlock;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             ItemName;                                          // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 MagazineIcon;                                      // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           WeaponGunBlock;                                    // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           WeaponStatBlock;                                   // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UMaterialInstanceDynamic*               ImageDynamicMaterial;                              // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DamageMax;                                         // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         EffectRangeMax;                                    // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         StabilityMax;                                      // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         FringRateMax;                                      // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ATslWeapon*                             LocalDefaultWeaponObject;                          // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DamageMultiplierForMultipleBullet;                 // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ItemToolTipWidget_Bp(int32 EntryPoint);
	void UpdateVicinityOrInventorySlotItemToolTip(class UEquipableItem* EquipableItem, class UEquipableItem* EquipmentSlotItem);
	void UpdateEquipmentSlotItemToolTip(class UEquipableItem* EquipableItem);
	void UpdateSlotInfo(const TScriptInterface<class ISlotInterface>& SlotInterface);
	void Construct();
	void UpdateItemDetailInfo(class UItem* Item);
	void SetItemByInterface(TScriptInterface<class ISlotInterface> Item);
	void UpdateDefaultInfo(TScriptInterface<class ISlotInterface> Item);
	void FadeIn();
	void GetWeaponPower(class ATslWeapon* ShooterWeapon, float* Damage);
	void GetWeaponEffectiveRange(class ATslWeapon_Trajectory* ShooterWeapon_Trajectory, float* EffectRange);
	void GetStability(class ATslWeapon_Trajectory* ShooterWeapon_Trajectory, float* Accuracy);
	void GetAttachedStability(class ATslWeapon_Trajectory* ShooterWeapon_Trajectory, float* Accuracy);
	void GetAmmo(class UWeaponItem* WeaponItem, int32* AmmoClip);
	void GetAttachedAmmo(class UWeaponItem* WeaponItem, int32* AmmoClip);
	void Clear();
	void OnUpdateVicinityOrInventorySlotItemToolTip(class UEquipableItem* EquipableItem, class UEquipableItem* EquipmentSlotItem);
	void OnUpdateEquipmentSlotItemToolTip(class UEquipableItem* EquipableItem);
	void GetShooterWeapon(class UEquipableItem* EquipableItem, class ATslWeapon** ShooterWeapon, class ATslWeapon_Trajectory** ShooterWeapon_Trajectory);
	void GetFiringRate(class ATslWeapon_Trajectory* ShooterWeapon_Trajectory, int32 AmmoClip, float FullReloadingTime, float* FringRate);
	void On_MagazineIcon_Prepass_0(class UWidget* BoundWidget);
	void GetItemDetailedName(class UEquipableItem* NewParam, class FText* Name_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ItemToolTipWidget_Bp_C">();
	}
	static class UItemToolTipWidget_Bp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemToolTipWidget_Bp_C>();
	}
};
static_assert(alignof(UItemToolTipWidget_Bp_C) == 0x000008, "Wrong alignment on UItemToolTipWidget_Bp_C");
static_assert(sizeof(UItemToolTipWidget_Bp_C) == 0x000328, "Wrong size on UItemToolTipWidget_Bp_C");
static_assert(offsetof(UItemToolTipWidget_Bp_C, UberGraphFrame) == 0x000240, "Member 'UItemToolTipWidget_Bp_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, FadeInToolTip) == 0x000248, "Member 'UItemToolTipWidget_Bp_C::FadeInToolTip' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, AccuracyGauge) == 0x000250, "Member 'UItemToolTipWidget_Bp_C::AccuracyGauge' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, AmmoInfoBox) == 0x000258, "Member 'UItemToolTipWidget_Bp_C::AmmoInfoBox' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, AmmoNameText) == 0x000260, "Member 'UItemToolTipWidget_Bp_C::AmmoNameText' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, AmmoPerClipText) == 0x000268, "Member 'UItemToolTipWidget_Bp_C::AmmoPerClipText' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, Capacity) == 0x000270, "Member 'UItemToolTipWidget_Bp_C::Capacity' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, CapacityBlock) == 0x000278, "Member 'UItemToolTipWidget_Bp_C::CapacityBlock' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, CategoryText) == 0x000280, "Member 'UItemToolTipWidget_Bp_C::CategoryText' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, ComparingWeapon) == 0x000288, "Member 'UItemToolTipWidget_Bp_C::ComparingWeapon' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, ComparisonBlock) == 0x000290, "Member 'UItemToolTipWidget_Bp_C::ComparisonBlock' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, DamageBlock) == 0x000298, "Member 'UItemToolTipWidget_Bp_C::DamageBlock' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, DamageGauge) == 0x0002A0, "Member 'UItemToolTipWidget_Bp_C::DamageGauge' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, DescText) == 0x0002A8, "Member 'UItemToolTipWidget_Bp_C::DescText' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, EffectRangeGauge) == 0x0002B0, "Member 'UItemToolTipWidget_Bp_C::EffectRangeGauge' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, FiringRate) == 0x0002B8, "Member 'UItemToolTipWidget_Bp_C::FiringRate' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, Icon) == 0x0002C0, "Member 'UItemToolTipWidget_Bp_C::Icon' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, IconScaleBoxSizeBlock) == 0x0002C8, "Member 'UItemToolTipWidget_Bp_C::IconScaleBoxSizeBlock' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, IconSize) == 0x0002D0, "Member 'UItemToolTipWidget_Bp_C::IconSize' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, ImageBlock) == 0x0002D8, "Member 'UItemToolTipWidget_Bp_C::ImageBlock' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, ItemName) == 0x0002E0, "Member 'UItemToolTipWidget_Bp_C::ItemName' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, MagazineIcon) == 0x0002E8, "Member 'UItemToolTipWidget_Bp_C::MagazineIcon' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, WeaponGunBlock) == 0x0002F0, "Member 'UItemToolTipWidget_Bp_C::WeaponGunBlock' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, WeaponStatBlock) == 0x0002F8, "Member 'UItemToolTipWidget_Bp_C::WeaponStatBlock' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, ImageDynamicMaterial) == 0x000300, "Member 'UItemToolTipWidget_Bp_C::ImageDynamicMaterial' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, DamageMax) == 0x000308, "Member 'UItemToolTipWidget_Bp_C::DamageMax' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, EffectRangeMax) == 0x00030C, "Member 'UItemToolTipWidget_Bp_C::EffectRangeMax' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, StabilityMax) == 0x000310, "Member 'UItemToolTipWidget_Bp_C::StabilityMax' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, FringRateMax) == 0x000314, "Member 'UItemToolTipWidget_Bp_C::FringRateMax' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, LocalDefaultWeaponObject) == 0x000318, "Member 'UItemToolTipWidget_Bp_C::LocalDefaultWeaponObject' has a wrong offset!");
static_assert(offsetof(UItemToolTipWidget_Bp_C, DamageMultiplierForMultipleBullet) == 0x000320, "Member 'UItemToolTipWidget_Bp_C::DamageMultiplierForMultipleBullet' has a wrong offset!");

}

