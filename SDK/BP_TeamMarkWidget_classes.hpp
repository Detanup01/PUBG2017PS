#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TeamMarkWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "TslGame_structs.hpp"
#include "TslGame_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_TeamMarkWidget.BP_TeamMarkWidget_C
// 0x00B0 (0x04F8 - 0x0448)
class UBP_TeamMarkWidget_C final : public UTeamMarkWidget
{
public:
	class UBP_CircleProgressWidget_C*             BP_CircleProgressWidget;                           // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 DeadPos;                                           // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 NormalPos;                                         // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 OutLineImage;                                      // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Parachute;                                         // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             PlayerNameText;                                    // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Quitter;                                           // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetSwitcher*                        StateSwitcher;                                     // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 VehiclePos;                                        // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           VerticalBox_0;                                     // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           VerticalBox_1;                                     // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           VerticalBox_2;                                     // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           VerticalBox_4;                                     // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           VerticalBox_5;                                     // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	float                                         ImageSize_0;                                       // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Width;                                             // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Height;                                            // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslCharacter*                          NewVar_0;                                          // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPrevGroggyState;                                 // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MoveLocation;                                      // 0x04DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E4[0x4];                                      // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorBlindColorSet                    ColorBlindColorSet;                                // 0x04E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	class FText Get_PlayerName_Text_0();
	void OnPrepass_0(class UWidget* BoundWidget);
	void GetPlayerNameTextAddLocation(struct FVector2D* AddLocation);
	void SetJustification();
	bool IsFreeCam();
	void DecideWidgetColors(bool Condition);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TeamMarkWidget_C">();
	}
	static class UBP_TeamMarkWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TeamMarkWidget_C>();
	}
};
static_assert(alignof(UBP_TeamMarkWidget_C) == 0x000008, "Wrong alignment on UBP_TeamMarkWidget_C");
static_assert(sizeof(UBP_TeamMarkWidget_C) == 0x0004F8, "Wrong size on UBP_TeamMarkWidget_C");
static_assert(offsetof(UBP_TeamMarkWidget_C, BP_CircleProgressWidget) == 0x000448, "Member 'UBP_TeamMarkWidget_C::BP_CircleProgressWidget' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, CanvasPanel_0) == 0x000450, "Member 'UBP_TeamMarkWidget_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, DeadPos) == 0x000458, "Member 'UBP_TeamMarkWidget_C::DeadPos' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, NormalPos) == 0x000460, "Member 'UBP_TeamMarkWidget_C::NormalPos' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, OutLineImage) == 0x000468, "Member 'UBP_TeamMarkWidget_C::OutLineImage' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, Parachute) == 0x000470, "Member 'UBP_TeamMarkWidget_C::Parachute' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, PlayerNameText) == 0x000478, "Member 'UBP_TeamMarkWidget_C::PlayerNameText' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, Quitter) == 0x000480, "Member 'UBP_TeamMarkWidget_C::Quitter' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, StateSwitcher) == 0x000488, "Member 'UBP_TeamMarkWidget_C::StateSwitcher' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, VehiclePos) == 0x000490, "Member 'UBP_TeamMarkWidget_C::VehiclePos' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, VerticalBox_0) == 0x000498, "Member 'UBP_TeamMarkWidget_C::VerticalBox_0' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, VerticalBox_1) == 0x0004A0, "Member 'UBP_TeamMarkWidget_C::VerticalBox_1' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, VerticalBox_2) == 0x0004A8, "Member 'UBP_TeamMarkWidget_C::VerticalBox_2' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, VerticalBox_4) == 0x0004B0, "Member 'UBP_TeamMarkWidget_C::VerticalBox_4' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, VerticalBox_5) == 0x0004B8, "Member 'UBP_TeamMarkWidget_C::VerticalBox_5' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, ImageSize_0) == 0x0004C0, "Member 'UBP_TeamMarkWidget_C::ImageSize_0' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, Width) == 0x0004C4, "Member 'UBP_TeamMarkWidget_C::Width' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, Height) == 0x0004C8, "Member 'UBP_TeamMarkWidget_C::Height' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, NewVar_0) == 0x0004D0, "Member 'UBP_TeamMarkWidget_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, IsPrevGroggyState) == 0x0004D8, "Member 'UBP_TeamMarkWidget_C::IsPrevGroggyState' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, MoveLocation) == 0x0004DC, "Member 'UBP_TeamMarkWidget_C::MoveLocation' has a wrong offset!");
static_assert(offsetof(UBP_TeamMarkWidget_C, ColorBlindColorSet) == 0x0004E8, "Member 'UBP_TeamMarkWidget_C::ColorBlindColorSet' has a wrong offset!");

}

