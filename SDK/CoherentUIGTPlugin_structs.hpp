#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CoherentUIGTPlugin

#include "Basic.hpp"


namespace SDK
{

// Enum CoherentUIGTPlugin.ECoherentUIGTMSAA
// NumValues: 0x0004
enum class ECoherentUIGTMSAA : uint8
{
	MSAA_1x                                  = 0,
	MSAA_2x                                  = 1,
	MSAA_4x                                  = 2,
	MSAA_MAX                                 = 3,
};

// Enum CoherentUIGTPlugin.ECoherentUIGTSettingsSeverity
// NumValues: 0x0007
enum class ECoherentUIGTSettingsSeverity : uint8
{
	Trace                                    = 0,
	Debug                                    = 1,
	Info                                     = 2,
	Warning                                  = 3,
	AssertFailure                            = 4,
	Error                                    = 5,
	ECoherentUIGTSettingsSeverity_MAX        = 6,
};

// Enum CoherentUIGTPlugin.ECoherentUIGTInputPropagationBehaviour
// NumValues: 0x0005
enum class ECoherentUIGTInputPropagationBehaviour : uint8
{
	None                                     = 0,
	Keyboard                                 = 1,
	Joystick                                 = 2,
	KeyboardAndJoystick                      = 3,
	ECoherentUIGTInputPropagationBehaviour_MAX = 4,
};

// Enum CoherentUIGTPlugin.EGamepadBehaviourOnFocusLost
// NumValues: 0x0004
enum class EGamepadBehaviourOnFocusLost : uint8
{
	ResetState                               = 0,
	UseCurrentState                          = 1,
	UseStateBeforeReset                      = 2,
	EGamepadBehaviourOnFocusLost_MAX         = 3,
};

// Enum CoherentUIGTPlugin.EGTInputWidgetLineTraceMode
// NumValues: 0x0003
enum class EGTInputWidgetLineTraceMode : uint8
{
	GTInputLineTrace_Single                  = 0,
	GTInputLineTrace_Multi                   = 1,
	GTInputLineTrace_MAX                     = 2,
};

// Enum CoherentUIGTPlugin.EGTInputWidgetRaycastQuality
// NumValues: 0x0004
enum class EGTInputWidgetRaycastQuality : uint8
{
	RaycastQuality_Fast                      = 0,
	RaycastQuality_Balanced                  = 1,
	RaycastQuality_Accurate                  = 2,
	RaycastQuality_MAX                       = 3,
};

// ScriptStruct CoherentUIGTPlugin.CoherentUIGTViewInfo
// 0x0014 (0x0014 - 0x0000)
struct FCoherentUIGTViewInfo final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransparent;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClickThroughAlphaThreshold;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationFrameDefer;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCoherentUIGTViewInfo) == 0x000004, "Wrong alignment on FCoherentUIGTViewInfo");
static_assert(sizeof(FCoherentUIGTViewInfo) == 0x000014, "Wrong size on FCoherentUIGTViewInfo");
static_assert(offsetof(FCoherentUIGTViewInfo, Width) == 0x000000, "Member 'FCoherentUIGTViewInfo::Width' has a wrong offset!");
static_assert(offsetof(FCoherentUIGTViewInfo, Height) == 0x000004, "Member 'FCoherentUIGTViewInfo::Height' has a wrong offset!");
static_assert(offsetof(FCoherentUIGTViewInfo, IsTransparent) == 0x000008, "Member 'FCoherentUIGTViewInfo::IsTransparent' has a wrong offset!");
static_assert(offsetof(FCoherentUIGTViewInfo, ClickThroughAlphaThreshold) == 0x00000C, "Member 'FCoherentUIGTViewInfo::ClickThroughAlphaThreshold' has a wrong offset!");
static_assert(offsetof(FCoherentUIGTViewInfo, AnimationFrameDefer) == 0x000010, "Member 'FCoherentUIGTViewInfo::AnimationFrameDefer' has a wrong offset!");

}

